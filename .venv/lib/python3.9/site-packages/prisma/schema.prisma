datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator py {
  provider = "prisma-client-py"
}

enum UserRole {
  ADMIN
  WORKSHOP_OWNER
  WORKSHOP_STAFF
  CUSTOMER
  DRIVER
  FLEET_MANAGER
  PARTS_MANAGER
}

model User {
  id            String               @id @default(uuid())
  email         String               @unique
  passwordHash  String
  fullName      String
  role          UserRole
  phone         String?
  isActive      Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  permissions   UserPermission[]
  organizations OrganizationMember[]
}

model Permission {
  id              String           @id @default(uuid())
  code            String           @unique
  name            String
  description     String?
  isActive        Boolean          @default(true)
  userPermissions UserPermission[]
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model UserPermission {
  id           String     @id @default(uuid())
  userId       String
  permissionId String
  granted      Boolean    @default(true)
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, permissionId])
}

model RolePermission {
  id           String     @id @default(uuid())
  role         UserRole
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([role, permissionId])
}

model Organization {
  id             String               @id @default(uuid())
  name           String
  description    String?
  businessNumber String?              @unique
  address        String?
  phone          String?
  email          String?
  isActive       Boolean              @default(true)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  members        OrganizationMember[]
  drivers        Driver[]
  vehicles       Vehicle[]
  maintenances   Maintenance[]
  erpSyncConfigs ERPSyncConfig[]
  erpSyncLogs    ERPSyncLog[]
}

model OrganizationMember {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  role           UserRole
  isActive       Boolean      @default(true)
  joinedAt       DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

// 운전자 모델
model Driver {
  id               String              @id @default(uuid())
  name             String
  email            String              @unique
  phone            String
  licenseNumber    String              @unique
  licenseType      String?
  licenseExpiry    DateTime
  isActive         Boolean             @default(true)
  restrictions     String[]
  notes            String?
  assignedVehicles String[]
  emergencyContact Json?
  address          String?
  birthDate        DateTime?
  hireDate         DateTime?
  department       String?
  position         String?
  profileImageUrl  String?
  organizationId   String
  organization     Organization        @relation(fields: [organizationId], references: [id])
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  performanceData  DriverPerformance[]
  drivingRecords   DrivingRecord[]
}

// 차량 모델
model Vehicle {
  id             String          @id @default(uuid())
  make           String // 제조사
  model          String // 모델명
  year           Int // 연식
  vehicleType    String // 차량 유형 (sedan, suv, truck 등)
  licensePlate   String // 번호판
  vin            String          @unique // 차대번호
  color          String? // 색상
  mileage        Int             @default(0) // 주행거리(km)
  fuelType       String? // 연료 유형
  transmission   String? // 변속기 유형
  engine         String? // 엔진 정보
  features       String[] // 차량 특징/옵션
  notes          String? // 메모
  status         String          @default("available") // 상태 (available, in_use, maintenance, out_of_service)
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id])
  maintenances   Maintenance[]
  drivingRecords DrivingRecord[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

// 유지보수 상태 열거형
enum MaintenanceStatus {
  SCHEDULED // 예정됨
  IN_PROGRESS // 진행중
  COMPLETED // 완료됨
  CANCELLED // 취소됨
}

// 유지보수 유형 열거형
enum MaintenanceType {
  REGULAR // 정기점검
  REPAIR // 수리
  INSPECTION // 검사
  TIRE_CHANGE // 타이어 교체
  OIL_CHANGE // 오일 교체
  EMERGENCY // 긴급 수리
  OTHER // 기타
}

// 유지보수 모델
model Maintenance {
  id               String            @id @default(uuid())
  title            String // 유지보수 제목
  description      String? // 상세 설명
  maintenanceType  MaintenanceType // 유지보수 유형
  status           MaintenanceStatus @default(SCHEDULED) // 상태
  startDate        DateTime // 시작 일자
  endDate          DateTime? // 종료 일자
  mileageAtService Int? // 서비스 시점 주행거리
  cost             Float? // 비용
  provider         String? // 서비스 제공자 (정비소)
  providerContact  String? // 서비스 제공자 연락처
  documents        String[] // 관련 문서 URL
  notes            String? // 메모
  vehicleId        String // 차량 ID
  vehicle          Vehicle           @relation(fields: [vehicleId], references: [id])
  organizationId   String // 조직 ID
  organization     Organization      @relation(fields: [organizationId], references: [id])
  parts            MaintenancePart[] // 사용된 부품
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([vehicleId])
  @@index([organizationId])
}

// 유지보수 부품 모델
model MaintenancePart {
  id            String      @id @default(uuid())
  name          String // 부품 이름
  partNumber    String? // 부품 번호
  quantity      Int // 수량
  unitPrice     Float? // 단가
  totalPrice    Float? // 총 금액
  maintenanceId String // 유지보수 ID
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([maintenanceId])
}

// 운전자 성능 모델 - 집계 데이터
model DriverPerformance {
  id                    String   @id @default(uuid())
  driverId              String // 운전자 ID
  driver                Driver   @relation(fields: [driverId], references: [id])
  periodStart           DateTime // 집계 기간 시작
  periodEnd             DateTime // 집계 기간 종료
  totalDistance         Float // 총 주행 거리(km)
  avgSpeed              Float? // 평균 속도(km/h)
  maxSpeed              Float? // 최대 속도(km/h)
  hardBrakeCount        Int? // 급제동 횟수
  hardAccelerationCount Int? // 급가속 횟수
  idlingDuration        Int? // 공회전 시간(분)
  fuelConsumption       Float? // 연료 소비량(L)
  avgFuelEfficiency     Float? // 평균 연비(km/L)
  co2Emission           Float? // CO2 배출량(kg)
  safetyScore           Int? // 안전 점수(0-100)
  ecoScore              Int? // 친환경 점수(0-100)
  overallScore          Int? // 종합 점수(0-100)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([driverId, periodStart, periodEnd])
  @@index([driverId])
}

// 운행 기록 모델 - 상세 데이터
model DrivingRecord {
  id              String   @id @default(uuid())
  driverId        String // 운전자 ID
  driver          Driver   @relation(fields: [driverId], references: [id])
  vehicleId       String // 차량 ID
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
  startTime       DateTime // 운행 시작 시간
  endTime         DateTime // 운행 종료 시간
  startLocation   String? // 출발 위치
  endLocation     String? // 도착 위치
  distance        Float // 주행 거리(km)
  avgSpeed        Float? // 평균 속도(km/h)
  maxSpeed        Float? // 최대 속도(km/h)
  fuelConsumption Float? // 연료 소비량(L)
  hardBrakeCount  Int? // 급제동 횟수
  hardAccelCount  Int? // 급가속 횟수
  idlingDuration  Int? // 공회전 시간(분)
  routeData       Json? // 경로 데이터(GeoJSON)
  notes           String? // 메모
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([driverId])
  @@index([vehicleId])
  @@index([startTime, endTime])
}

// ERP 시스템 유형
enum ERPSystemType {
  SAP
  ORACLE
  MICROSOFT_DYNAMICS
  CUSTOM
}

// 동기화 방향
enum SyncDirectionType {
  IMPORT // ERP -> 시스템
  EXPORT // 시스템 -> ERP
  BIDIRECTIONAL // 양방향
}

// 동기화 상태
enum SyncStatusType {
  PENDING // 대기 중
  IN_PROGRESS // 진행 중
  COMPLETED // 완료됨
  FAILED // 실패함
  PARTIAL // 일부 완료
}

// ERP 동기화 설정 모델
model ERPSyncConfig {
  id             String            @id @default(uuid())
  name           String // 설정 이름
  erpSystem      ERPSystemType // ERP 시스템 유형
  connectionUrl  String // ERP 연결 URL
  username       String // 연결 사용자명
  password       String // 연결 비밀번호 (암호화 필요)
  syncDirection  SyncDirectionType @default(IMPORT) // 동기화 방향
  syncInterval   Int? // 자동 동기화 간격(분)
  syncEnabled    Boolean           @default(false) // 자동 동기화 활성화 여부
  lastSyncTime   DateTime? // 마지막 동기화 시간
  mappingConfig  Json              @default("{}") // 필드 매핑 설정
  filters        Json              @default("{}") // 동기화 필터 설정
  organizationId String // 조직 ID
  organization   Organization      @relation(fields: [organizationId], references: [id])
  syncLogs       ERPSyncLog[] // 동기화 로그 관계
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([organizationId])
}

// ERP 동기화 로그 모델
model ERPSyncLog {
  id             String            @id @default(uuid())
  configId       String // 동기화 설정 ID
  config         ERPSyncConfig     @relation(fields: [configId], references: [id])
  status         SyncStatusType // 동기화 상태
  startTime      DateTime // 시작 시간
  endTime        DateTime? // 종료 시간
  direction      SyncDirectionType // 동기화 방향
  totalItems     Int? // 전체 항목 수
  processedItems Int? // 처리된 항목 수
  successItems   Int? // 성공한 항목 수
  failedItems    Int? // 실패한 항목 수
  errorDetails   String? // 오류 상세 정보
  organizationId String // 조직 ID
  organization   Organization      @relation(fields: [organizationId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([configId])
  @@index([organizationId])
  @@index([startTime])
}
