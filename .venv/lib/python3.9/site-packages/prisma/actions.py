# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await User.prisma().query_raw(
            'SELECT * FROM User WHERE id = $1',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().query_first(
            'SELECT * FROM User WHERE email = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = await User.prisma().create(
            data={
                # data to create a User record
                'email': 'ggciceaie',
                'passwordHash': 'bbehjachib',
                'fullName': 'cadfabfehe',
                'role': enums.UserRole.ADMIN,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'email': 'dgiiaaijj',
                    'passwordHash': 'bfaiacjjfc',
                    'fullName': 'eigcfgbif',
                    'role': enums.UserRole.ADMIN,
                },
                {
                    # data to create a User record
                    'email': 'bagcfbhiig',
                    'passwordHash': 'cghideieh',
                    'fullName': 'biabhbdai',
                    'role': enums.UserRole.ADMIN,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().delete(
            where={
                'id': 'idghgaicb',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique(
            where={
                'id': 'fjfddhigg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique_or_raise(
            where={
                'id': 'hjaecfifb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = await User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the passwordHash field
        users = await User.prisma().find_many(
            take=5,
            order={
                'passwordHash': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the fullName field
        user = await User.prisma().find_first(
            skip=1,
            order={
                'fullName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the role field
        user = await User.prisma().find_first_or_raise(
            skip=1,
            order={
                'role': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().update(
            where={
                'id': 'cbbbjbfcii',
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().upsert(
            where={
                'id': 'bbejhfidcb',
            },
            data={
                'create': {
                    'id': 'bbejhfidcb',
                    'email': 'bagcfbhiig',
                    'passwordHash': 'cghideieh',
                    'fullName': 'biabhbdai',
                    'role': enums.UserRole.ADMIN,
                },
                'update': {
                    'email': 'bagcfbhiig',
                    'passwordHash': 'cghideieh',
                    'fullName': 'biabhbdai',
                    'role': enums.UserRole.ADMIN,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = await User.prisma().update_many(
            data={
                'phone': 'bgeecijdgg'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'isActive': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = await User.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by updatedAt values
        # and count how many records are in each group
        results = await User.prisma().group_by(
            ['updatedAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PermissionActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Permission]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Permission.prisma().query_raw(
            'SELECT * FROM Permission WHERE id = $1',
            'bdiicjafbj',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Permission
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Permission.prisma().query_first(
            'SELECT * FROM Permission WHERE code = $1',
            'bgehebiafc',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.PermissionCreateInput,
        include: Optional[types.PermissionInclude] = None
    ) -> _PrismaModelT:
        """Create a new Permission record.

        Parameters
        ----------
        data
            Permission record data
        include
            Specifies which relations should be loaded on the returned Permission model

        Returns
        -------
        prisma.models.Permission
            The created Permission record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Permission record from just the required fields
        permission = await Permission.prisma().create(
            data={
                # data to create a Permission record
                'code': 'bghffegacj',
                'name': 'bhghchehcc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.PermissionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Permission records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Permission record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Permission.prisma().create_many(
            data=[
                {
                    # data to create a Permission record
                    'code': 'dcgchcbbf',
                    'name': 'bdedcabahc',
                },
                {
                    # data to create a Permission record
                    'code': 'ghfhiafcb',
                    'name': 'heejgedji',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.PermissionWhereUniqueInput,
        include: Optional[types.PermissionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Permission record.

        Parameters
        ----------
        where
            Permission filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Permission model

        Returns
        -------
        prisma.models.Permission
            The deleted Permission record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        permission = await Permission.prisma().delete(
            where={
                'id': 'bjgjgibgbf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.PermissionWhereUniqueInput,
        include: Optional[types.PermissionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Permission record.

        Parameters
        ----------
        where
            Permission filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Permission model

        Returns
        -------
        prisma.models.Permission
            The found Permission record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        permission = await Permission.prisma().find_unique(
            where={
                'id': 'bbbgbhfjge',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.PermissionWhereUniqueInput,
        include: Optional[types.PermissionInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Permission record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Permission filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Permission model

        Returns
        -------
        prisma.models.Permission
            The found Permission record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        permission = await Permission.prisma().find_unique_or_raise(
            where={
                'id': 'igbehcbab',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PermissionWhereInput] = None,
        cursor: Optional[types.PermissionWhereUniqueInput] = None,
        include: Optional[types.PermissionInclude] = None,
        order: Optional[Union[types.PermissionOrderByInput, List[types.PermissionOrderByInput]]] = None,
        distinct: Optional[List[types.PermissionScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Permission records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Permission records returned
        skip
            Ignore the first N results
        where
            Permission filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Permission model
        order
            Order the returned Permission records by any field
        distinct
            Filter Permission records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Permission]
            The list of all Permission records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Permission records
        permissions = await Permission.prisma().find_many(take=10)

        # find the first 5 Permission records ordered by the name field
        permissions = await Permission.prisma().find_many(
            take=5,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PermissionWhereInput] = None,
        cursor: Optional[types.PermissionWhereUniqueInput] = None,
        include: Optional[types.PermissionInclude] = None,
        order: Optional[Union[types.PermissionOrderByInput, List[types.PermissionOrderByInput]]] = None,
        distinct: Optional[List[types.PermissionScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Permission record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Permission filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Permission model
        order
            Order the returned Permission records by any field
        distinct
            Filter Permission records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Permission
            The first Permission record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Permission record ordered by the description field
        permission = await Permission.prisma().find_first(
            skip=1,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PermissionWhereInput] = None,
        cursor: Optional[types.PermissionWhereUniqueInput] = None,
        include: Optional[types.PermissionInclude] = None,
        order: Optional[Union[types.PermissionOrderByInput, List[types.PermissionOrderByInput]]] = None,
        distinct: Optional[List[types.PermissionScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Permission record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Permission filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Permission model
        order
            Order the returned Permission records by any field
        distinct
            Filter Permission records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Permission
            The first Permission record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Permission record ordered by the isActive field
        permission = await Permission.prisma().find_first_or_raise(
            skip=1,
            order={
                'isActive': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.PermissionUpdateInput,
        where: types.PermissionWhereUniqueInput,
        include: Optional[types.PermissionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Permission record.

        Parameters
        ----------
        data
            Permission record data specifying what to update
        where
            Permission filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Permission model

        Returns
        -------
        prisma.models.Permission
            The updated Permission record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        permission = await Permission.prisma().update(
            where={
                'id': 'bdadaadhag',
            },
            data={
                # data to update the Permission record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.PermissionWhereUniqueInput,
        data: types.PermissionUpsertInput,
        include: Optional[types.PermissionInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Permission filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Permission model

        Returns
        -------
        prisma.models.Permission
            The created or updated Permission record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        permission = await Permission.prisma().upsert(
            where={
                'id': 'bgiggdidbf',
            },
            data={
                'create': {
                    'id': 'bgiggdidbf',
                    'code': 'ghfhiafcb',
                    'name': 'heejgedji',
                },
                'update': {
                    'code': 'ghfhiafcb',
                    'name': 'heejgedji',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.PermissionUpdateManyMutationInput,
        where: types.PermissionWhereInput,
    ) -> int:
        """Update multiple Permission records

        Parameters
        ----------
        data
            Permission data to update the selected Permission records to
        where
            Filter to select the Permission records to update

        Returns
        -------
        int
            The total number of Permission records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Permission records
        total = await Permission.prisma().update_many(
            data={
                'createdAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PermissionWhereInput] = None,
        cursor: Optional[types.PermissionWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Permission records present in the database

        Parameters
        ----------
        select
            Select the Permission fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Permission filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PermissionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Permission.prisma().count()

        # results: prisma.types.PermissionCountAggregateOutput
        results = await Permission.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.PermissionCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PermissionWhereInput] = None,
        cursor: Optional[types.PermissionWhereUniqueInput] = None,
    ) -> types.PermissionCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.PermissionCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PermissionWhereInput] = None,
        cursor: Optional[types.PermissionWhereUniqueInput] = None,
    ) -> Union[int, types.PermissionCountAggregateOutput]:
        """Count the number of Permission records present in the database

        Parameters
        ----------
        select
            Select the Permission fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Permission filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PermissionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Permission.prisma().count()

        # results: prisma.types.PermissionCountAggregateOutput
        results = await Permission.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PermissionCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.PermissionWhereInput] = None
    ) -> int:
        """Delete multiple Permission records.

        Parameters
        ----------
        where
            Optional Permission filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Permission records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Permission records
        total = await Permission.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.PermissionScalarFieldKeys'],
        *,
        where: Optional['types.PermissionWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PermissionAvgAggregateInput'] = None,
        sum: Optional['types.PermissionSumAggregateInput'] = None,
        min: Optional['types.PermissionMinAggregateInput'] = None,
        max: Optional['types.PermissionMaxAggregateInput'] = None,
        having: Optional['types.PermissionScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PermissionCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PermissionScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.PermissionScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.PermissionGroupByOutput']:
        """Group Permission records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Permission fields to group records by
        where
            Permission filter to select records
        take
            Limit the maximum number of Permission records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PermissionGroupByOutput]
            A list of dictionaries representing the Permission record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Permission records by code values
        # and count how many records are in each group
        results = await Permission.prisma().group_by(
            ['code'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserPermissionActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.UserPermission]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await UserPermission.prisma().query_raw(
            'SELECT * FROM UserPermission WHERE id = $1',
            'caaaedabfc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.UserPermission
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await UserPermission.prisma().query_first(
            'SELECT * FROM UserPermission WHERE userId = $1',
            'bigibebcib',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserPermissionCreateInput,
        include: Optional[types.UserPermissionInclude] = None
    ) -> _PrismaModelT:
        """Create a new UserPermission record.

        Parameters
        ----------
        data
            UserPermission record data
        include
            Specifies which relations should be loaded on the returned UserPermission model

        Returns
        -------
        prisma.models.UserPermission
            The created UserPermission record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a UserPermission record from just the required fields
        userpermission = await UserPermission.prisma().create(
            data={
                # data to create a UserPermission record
                'userId': 'bigaiehgcc',
                'permissionId': 'beeifcbebf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserPermissionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple UserPermission records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of UserPermission record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await UserPermission.prisma().create_many(
            data=[
                {
                    # data to create a UserPermission record
                    'userId': 'bgcigfahea',
                    'permissionId': 'bcejgaggif',
                },
                {
                    # data to create a UserPermission record
                    'userId': 'idfjadbcc',
                    'permissionId': 'hgdhbjhhj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserPermissionWhereUniqueInput,
        include: Optional[types.UserPermissionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single UserPermission record.

        Parameters
        ----------
        where
            UserPermission filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned UserPermission model

        Returns
        -------
        prisma.models.UserPermission
            The deleted UserPermission record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userpermission = await UserPermission.prisma().delete(
            where={
                'id': 'ecjjjfbae',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserPermissionWhereUniqueInput,
        include: Optional[types.UserPermissionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique UserPermission record.

        Parameters
        ----------
        where
            UserPermission filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserPermission model

        Returns
        -------
        prisma.models.UserPermission
            The found UserPermission record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userpermission = await UserPermission.prisma().find_unique(
            where={
                'id': 'bhhfibbigf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserPermissionWhereUniqueInput,
        include: Optional[types.UserPermissionInclude] = None
    ) -> _PrismaModelT:
        """Find a unique UserPermission record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            UserPermission filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserPermission model

        Returns
        -------
        prisma.models.UserPermission
            The found UserPermission record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userpermission = await UserPermission.prisma().find_unique_or_raise(
            where={
                'id': 'ijdbeffgg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserPermissionWhereInput] = None,
        cursor: Optional[types.UserPermissionWhereUniqueInput] = None,
        include: Optional[types.UserPermissionInclude] = None,
        order: Optional[Union[types.UserPermissionOrderByInput, List[types.UserPermissionOrderByInput]]] = None,
        distinct: Optional[List[types.UserPermissionScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple UserPermission records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of UserPermission records returned
        skip
            Ignore the first N results
        where
            UserPermission filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserPermission model
        order
            Order the returned UserPermission records by any field
        distinct
            Filter UserPermission records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.UserPermission]
            The list of all UserPermission records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 UserPermission records
        userpermissions = await UserPermission.prisma().find_many(take=10)

        # find the first 5 UserPermission records ordered by the permissionId field
        userpermissions = await UserPermission.prisma().find_many(
            take=5,
            order={
                'permissionId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserPermissionWhereInput] = None,
        cursor: Optional[types.UserPermissionWhereUniqueInput] = None,
        include: Optional[types.UserPermissionInclude] = None,
        order: Optional[Union[types.UserPermissionOrderByInput, List[types.UserPermissionOrderByInput]]] = None,
        distinct: Optional[List[types.UserPermissionScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single UserPermission record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserPermission filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserPermission model
        order
            Order the returned UserPermission records by any field
        distinct
            Filter UserPermission records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserPermission
            The first UserPermission record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserPermission record ordered by the granted field
        userpermission = await UserPermission.prisma().find_first(
            skip=1,
            order={
                'granted': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserPermissionWhereInput] = None,
        cursor: Optional[types.UserPermissionWhereUniqueInput] = None,
        include: Optional[types.UserPermissionInclude] = None,
        order: Optional[Union[types.UserPermissionOrderByInput, List[types.UserPermissionOrderByInput]]] = None,
        distinct: Optional[List[types.UserPermissionScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single UserPermission record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserPermission filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserPermission model
        order
            Order the returned UserPermission records by any field
        distinct
            Filter UserPermission records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserPermission
            The first UserPermission record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserPermission record ordered by the createdAt field
        userpermission = await UserPermission.prisma().find_first_or_raise(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserPermissionUpdateInput,
        where: types.UserPermissionWhereUniqueInput,
        include: Optional[types.UserPermissionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single UserPermission record.

        Parameters
        ----------
        data
            UserPermission record data specifying what to update
        where
            UserPermission filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned UserPermission model

        Returns
        -------
        prisma.models.UserPermission
            The updated UserPermission record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        userpermission = await UserPermission.prisma().update(
            where={
                'id': 'jjfeafhfj',
            },
            data={
                # data to update the UserPermission record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserPermissionWhereUniqueInput,
        data: types.UserPermissionUpsertInput,
        include: Optional[types.UserPermissionInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            UserPermission filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned UserPermission model

        Returns
        -------
        prisma.models.UserPermission
            The created or updated UserPermission record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userpermission = await UserPermission.prisma().upsert(
            where={
                'id': 'cbachdgfce',
            },
            data={
                'create': {
                    'id': 'cbachdgfce',
                    'userId': 'idfjadbcc',
                    'permissionId': 'hgdhbjhhj',
                },
                'update': {
                    'userId': 'idfjadbcc',
                    'permissionId': 'hgdhbjhhj',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserPermissionUpdateManyMutationInput,
        where: types.UserPermissionWhereInput,
    ) -> int:
        """Update multiple UserPermission records

        Parameters
        ----------
        data
            UserPermission data to update the selected UserPermission records to
        where
            Filter to select the UserPermission records to update

        Returns
        -------
        int
            The total number of UserPermission records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all UserPermission records
        total = await UserPermission.prisma().update_many(
            data={
                'updatedAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserPermissionWhereInput] = None,
        cursor: Optional[types.UserPermissionWhereUniqueInput] = None,
    ) -> int:
        """Count the number of UserPermission records present in the database

        Parameters
        ----------
        select
            Select the UserPermission fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserPermission filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserPermissionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserPermission.prisma().count()

        # results: prisma.types.UserPermissionCountAggregateOutput
        results = await UserPermission.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserPermissionCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserPermissionWhereInput] = None,
        cursor: Optional[types.UserPermissionWhereUniqueInput] = None,
    ) -> types.UserPermissionCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserPermissionCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserPermissionWhereInput] = None,
        cursor: Optional[types.UserPermissionWhereUniqueInput] = None,
    ) -> Union[int, types.UserPermissionCountAggregateOutput]:
        """Count the number of UserPermission records present in the database

        Parameters
        ----------
        select
            Select the UserPermission fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserPermission filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserPermissionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserPermission.prisma().count()

        # results: prisma.types.UserPermissionCountAggregateOutput
        results = await UserPermission.prisma().count(
            select={
                '_all': True,
                'userId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserPermissionCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserPermissionWhereInput] = None
    ) -> int:
        """Delete multiple UserPermission records.

        Parameters
        ----------
        where
            Optional UserPermission filter to find the records to be deleted

        Returns
        -------
        int
            The total number of UserPermission records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all UserPermission records
        total = await UserPermission.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserPermissionScalarFieldKeys'],
        *,
        where: Optional['types.UserPermissionWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserPermissionAvgAggregateInput'] = None,
        sum: Optional['types.UserPermissionSumAggregateInput'] = None,
        min: Optional['types.UserPermissionMinAggregateInput'] = None,
        max: Optional['types.UserPermissionMaxAggregateInput'] = None,
        having: Optional['types.UserPermissionScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserPermissionCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserPermissionScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserPermissionScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserPermissionGroupByOutput']:
        """Group UserPermission records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar UserPermission fields to group records by
        where
            UserPermission filter to select records
        take
            Limit the maximum number of UserPermission records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserPermissionGroupByOutput]
            A list of dictionaries representing the UserPermission record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group UserPermission records by permissionId values
        # and count how many records are in each group
        results = await UserPermission.prisma().group_by(
            ['permissionId'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class RolePermissionActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.RolePermission]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await RolePermission.prisma().query_raw(
            'SELECT * FROM RolePermission WHERE id = $1',
            'chbfcacbd',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.RolePermission
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await RolePermission.prisma().query_first(
            'SELECT * FROM RolePermission WHERE role = $1',
            enums.UserRole.ADMIN,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.RolePermissionCreateInput,
        include: Optional[types.RolePermissionInclude] = None
    ) -> _PrismaModelT:
        """Create a new RolePermission record.

        Parameters
        ----------
        data
            RolePermission record data
        include
            Specifies which relations should be loaded on the returned RolePermission model

        Returns
        -------
        prisma.models.RolePermission
            The created RolePermission record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a RolePermission record from just the required fields
        rolepermission = await RolePermission.prisma().create(
            data={
                # data to create a RolePermission record
                'role': enums.UserRole.ADMIN,
                'permissionId': 'efggddide',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.RolePermissionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple RolePermission records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of RolePermission record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await RolePermission.prisma().create_many(
            data=[
                {
                    # data to create a RolePermission record
                    'role': enums.UserRole.ADMIN,
                    'permissionId': 'caficfigfb',
                },
                {
                    # data to create a RolePermission record
                    'role': enums.UserRole.ADMIN,
                    'permissionId': 'bfidgijfjc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.RolePermissionWhereUniqueInput,
        include: Optional[types.RolePermissionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single RolePermission record.

        Parameters
        ----------
        where
            RolePermission filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned RolePermission model

        Returns
        -------
        prisma.models.RolePermission
            The deleted RolePermission record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        rolepermission = await RolePermission.prisma().delete(
            where={
                'id': 'ihieecagf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.RolePermissionWhereUniqueInput,
        include: Optional[types.RolePermissionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique RolePermission record.

        Parameters
        ----------
        where
            RolePermission filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned RolePermission model

        Returns
        -------
        prisma.models.RolePermission
            The found RolePermission record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        rolepermission = await RolePermission.prisma().find_unique(
            where={
                'id': 'bghfciaafe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.RolePermissionWhereUniqueInput,
        include: Optional[types.RolePermissionInclude] = None
    ) -> _PrismaModelT:
        """Find a unique RolePermission record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            RolePermission filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned RolePermission model

        Returns
        -------
        prisma.models.RolePermission
            The found RolePermission record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        rolepermission = await RolePermission.prisma().find_unique_or_raise(
            where={
                'id': 'bgchfhgceh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RolePermissionWhereInput] = None,
        cursor: Optional[types.RolePermissionWhereUniqueInput] = None,
        include: Optional[types.RolePermissionInclude] = None,
        order: Optional[Union[types.RolePermissionOrderByInput, List[types.RolePermissionOrderByInput]]] = None,
        distinct: Optional[List[types.RolePermissionScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple RolePermission records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of RolePermission records returned
        skip
            Ignore the first N results
        where
            RolePermission filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned RolePermission model
        order
            Order the returned RolePermission records by any field
        distinct
            Filter RolePermission records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.RolePermission]
            The list of all RolePermission records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 RolePermission records
        rolepermissions = await RolePermission.prisma().find_many(take=10)

        # find the first 5 RolePermission records ordered by the permissionId field
        rolepermissions = await RolePermission.prisma().find_many(
            take=5,
            order={
                'permissionId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RolePermissionWhereInput] = None,
        cursor: Optional[types.RolePermissionWhereUniqueInput] = None,
        include: Optional[types.RolePermissionInclude] = None,
        order: Optional[Union[types.RolePermissionOrderByInput, List[types.RolePermissionOrderByInput]]] = None,
        distinct: Optional[List[types.RolePermissionScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single RolePermission record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            RolePermission filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned RolePermission model
        order
            Order the returned RolePermission records by any field
        distinct
            Filter RolePermission records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.RolePermission
            The first RolePermission record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second RolePermission record ordered by the createdAt field
        rolepermission = await RolePermission.prisma().find_first(
            skip=1,
            order={
                'createdAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RolePermissionWhereInput] = None,
        cursor: Optional[types.RolePermissionWhereUniqueInput] = None,
        include: Optional[types.RolePermissionInclude] = None,
        order: Optional[Union[types.RolePermissionOrderByInput, List[types.RolePermissionOrderByInput]]] = None,
        distinct: Optional[List[types.RolePermissionScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single RolePermission record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            RolePermission filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned RolePermission model
        order
            Order the returned RolePermission records by any field
        distinct
            Filter RolePermission records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.RolePermission
            The first RolePermission record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second RolePermission record ordered by the updatedAt field
        rolepermission = await RolePermission.prisma().find_first_or_raise(
            skip=1,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.RolePermissionUpdateInput,
        where: types.RolePermissionWhereUniqueInput,
        include: Optional[types.RolePermissionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single RolePermission record.

        Parameters
        ----------
        data
            RolePermission record data specifying what to update
        where
            RolePermission filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned RolePermission model

        Returns
        -------
        prisma.models.RolePermission
            The updated RolePermission record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        rolepermission = await RolePermission.prisma().update(
            where={
                'id': 'cafeiaccbc',
            },
            data={
                # data to update the RolePermission record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.RolePermissionWhereUniqueInput,
        data: types.RolePermissionUpsertInput,
        include: Optional[types.RolePermissionInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            RolePermission filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned RolePermission model

        Returns
        -------
        prisma.models.RolePermission
            The created or updated RolePermission record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        rolepermission = await RolePermission.prisma().upsert(
            where={
                'id': 'gaddfhfh',
            },
            data={
                'create': {
                    'id': 'gaddfhfh',
                    'role': enums.UserRole.ADMIN,
                    'permissionId': 'bfidgijfjc',
                },
                'update': {
                    'role': enums.UserRole.ADMIN,
                    'permissionId': 'bfidgijfjc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.RolePermissionUpdateManyMutationInput,
        where: types.RolePermissionWhereInput,
    ) -> int:
        """Update multiple RolePermission records

        Parameters
        ----------
        data
            RolePermission data to update the selected RolePermission records to
        where
            Filter to select the RolePermission records to update

        Returns
        -------
        int
            The total number of RolePermission records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all RolePermission records
        total = await RolePermission.prisma().update_many(
            data={
                'id': 'gieegcbeg'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RolePermissionWhereInput] = None,
        cursor: Optional[types.RolePermissionWhereUniqueInput] = None,
    ) -> int:
        """Count the number of RolePermission records present in the database

        Parameters
        ----------
        select
            Select the RolePermission fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            RolePermission filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RolePermissionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await RolePermission.prisma().count()

        # results: prisma.types.RolePermissionCountAggregateOutput
        results = await RolePermission.prisma().count(
            select={
                '_all': True,
                'role': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.RolePermissionCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RolePermissionWhereInput] = None,
        cursor: Optional[types.RolePermissionWhereUniqueInput] = None,
    ) -> types.RolePermissionCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.RolePermissionCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RolePermissionWhereInput] = None,
        cursor: Optional[types.RolePermissionWhereUniqueInput] = None,
    ) -> Union[int, types.RolePermissionCountAggregateOutput]:
        """Count the number of RolePermission records present in the database

        Parameters
        ----------
        select
            Select the RolePermission fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            RolePermission filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RolePermissionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await RolePermission.prisma().count()

        # results: prisma.types.RolePermissionCountAggregateOutput
        results = await RolePermission.prisma().count(
            select={
                '_all': True,
                'permissionId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.RolePermissionCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.RolePermissionWhereInput] = None
    ) -> int:
        """Delete multiple RolePermission records.

        Parameters
        ----------
        where
            Optional RolePermission filter to find the records to be deleted

        Returns
        -------
        int
            The total number of RolePermission records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all RolePermission records
        total = await RolePermission.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.RolePermissionScalarFieldKeys'],
        *,
        where: Optional['types.RolePermissionWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.RolePermissionAvgAggregateInput'] = None,
        sum: Optional['types.RolePermissionSumAggregateInput'] = None,
        min: Optional['types.RolePermissionMinAggregateInput'] = None,
        max: Optional['types.RolePermissionMaxAggregateInput'] = None,
        having: Optional['types.RolePermissionScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.RolePermissionCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.RolePermissionScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.RolePermissionScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.RolePermissionGroupByOutput']:
        """Group RolePermission records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar RolePermission fields to group records by
        where
            RolePermission filter to select records
        take
            Limit the maximum number of RolePermission records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.RolePermissionGroupByOutput]
            A list of dictionaries representing the RolePermission record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group RolePermission records by createdAt values
        # and count how many records are in each group
        results = await RolePermission.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class OrganizationActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Organization]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Organization.prisma().query_raw(
            'SELECT * FROM Organization WHERE id = $1',
            'bgcffadich',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Organization
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Organization.prisma().query_first(
            'SELECT * FROM Organization WHERE name = $1',
            'fcbichhci',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.OrganizationCreateInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> _PrismaModelT:
        """Create a new Organization record.

        Parameters
        ----------
        data
            Organization record data
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The created Organization record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Organization record from just the required fields
        organization = await Organization.prisma().create(
            data={
                # data to create a Organization record
                'name': 'bcggadccgf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.OrganizationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Organization records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Organization record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Organization.prisma().create_many(
            data=[
                {
                    # data to create a Organization record
                    'name': 'jdcfdcgc',
                },
                {
                    # data to create a Organization record
                    'name': 'cafdaehjid',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.OrganizationWhereUniqueInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Organization record.

        Parameters
        ----------
        where
            Organization filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The deleted Organization record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organization = await Organization.prisma().delete(
            where={
                'id': 'gifdddbia',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.OrganizationWhereUniqueInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Organization record.

        Parameters
        ----------
        where
            Organization filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The found Organization record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organization = await Organization.prisma().find_unique(
            where={
                'id': 'bchehecef',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.OrganizationWhereUniqueInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Organization record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Organization filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The found Organization record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organization = await Organization.prisma().find_unique_or_raise(
            where={
                'id': 'jeijcbhfe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
        include: Optional[types.OrganizationInclude] = None,
        order: Optional[Union[types.OrganizationOrderByInput, List[types.OrganizationOrderByInput]]] = None,
        distinct: Optional[List[types.OrganizationScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Organization records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Organization records returned
        skip
            Ignore the first N results
        where
            Organization filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Organization model
        order
            Order the returned Organization records by any field
        distinct
            Filter Organization records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Organization]
            The list of all Organization records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Organization records
        organizations = await Organization.prisma().find_many(take=10)

        # find the first 5 Organization records ordered by the description field
        organizations = await Organization.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
        include: Optional[types.OrganizationInclude] = None,
        order: Optional[Union[types.OrganizationOrderByInput, List[types.OrganizationOrderByInput]]] = None,
        distinct: Optional[List[types.OrganizationScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Organization record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Organization filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Organization model
        order
            Order the returned Organization records by any field
        distinct
            Filter Organization records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Organization
            The first Organization record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Organization record ordered by the businessNumber field
        organization = await Organization.prisma().find_first(
            skip=1,
            order={
                'businessNumber': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
        include: Optional[types.OrganizationInclude] = None,
        order: Optional[Union[types.OrganizationOrderByInput, List[types.OrganizationOrderByInput]]] = None,
        distinct: Optional[List[types.OrganizationScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Organization record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Organization filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Organization model
        order
            Order the returned Organization records by any field
        distinct
            Filter Organization records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Organization
            The first Organization record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Organization record ordered by the address field
        organization = await Organization.prisma().find_first_or_raise(
            skip=1,
            order={
                'address': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.OrganizationUpdateInput,
        where: types.OrganizationWhereUniqueInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Organization record.

        Parameters
        ----------
        data
            Organization record data specifying what to update
        where
            Organization filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The updated Organization record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        organization = await Organization.prisma().update(
            where={
                'id': 'bjgejjabff',
            },
            data={
                # data to update the Organization record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.OrganizationWhereUniqueInput,
        data: types.OrganizationUpsertInput,
        include: Optional[types.OrganizationInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Organization filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The created or updated Organization record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organization = await Organization.prisma().upsert(
            where={
                'id': 'bcciijbibg',
            },
            data={
                'create': {
                    'id': 'bcciijbibg',
                    'name': 'cafdaehjid',
                },
                'update': {
                    'name': 'cafdaehjid',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.OrganizationUpdateManyMutationInput,
        where: types.OrganizationWhereInput,
    ) -> int:
        """Update multiple Organization records

        Parameters
        ----------
        data
            Organization data to update the selected Organization records to
        where
            Filter to select the Organization records to update

        Returns
        -------
        int
            The total number of Organization records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Organization records
        total = await Organization.prisma().update_many(
            data={
                'phone': 'cffcachfd'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Organization records present in the database

        Parameters
        ----------
        select
            Select the Organization fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Organization filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OrganizationCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Organization.prisma().count()

        # results: prisma.types.OrganizationCountAggregateOutput
        results = await Organization.prisma().count(
            select={
                '_all': True,
                'email': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.OrganizationCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
    ) -> types.OrganizationCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.OrganizationCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
    ) -> Union[int, types.OrganizationCountAggregateOutput]:
        """Count the number of Organization records present in the database

        Parameters
        ----------
        select
            Select the Organization fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Organization filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OrganizationCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Organization.prisma().count()

        # results: prisma.types.OrganizationCountAggregateOutput
        results = await Organization.prisma().count(
            select={
                '_all': True,
                'isActive': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.OrganizationCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.OrganizationWhereInput] = None
    ) -> int:
        """Delete multiple Organization records.

        Parameters
        ----------
        where
            Optional Organization filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Organization records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Organization records
        total = await Organization.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.OrganizationScalarFieldKeys'],
        *,
        where: Optional['types.OrganizationWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.OrganizationAvgAggregateInput'] = None,
        sum: Optional['types.OrganizationSumAggregateInput'] = None,
        min: Optional['types.OrganizationMinAggregateInput'] = None,
        max: Optional['types.OrganizationMaxAggregateInput'] = None,
        having: Optional['types.OrganizationScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.OrganizationCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.OrganizationScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.OrganizationScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.OrganizationGroupByOutput']:
        """Group Organization records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Organization fields to group records by
        where
            Organization filter to select records
        take
            Limit the maximum number of Organization records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.OrganizationGroupByOutput]
            A list of dictionaries representing the Organization record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Organization records by createdAt values
        # and count how many records are in each group
        results = await Organization.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class OrganizationMemberActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.OrganizationMember]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await OrganizationMember.prisma().query_raw(
            'SELECT * FROM OrganizationMember WHERE id = $1',
            'bccdfhdigc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.OrganizationMember
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await OrganizationMember.prisma().query_first(
            'SELECT * FROM OrganizationMember WHERE userId = $1',
            'febcgjbfj',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.OrganizationMemberCreateInput,
        include: Optional[types.OrganizationMemberInclude] = None
    ) -> _PrismaModelT:
        """Create a new OrganizationMember record.

        Parameters
        ----------
        data
            OrganizationMember record data
        include
            Specifies which relations should be loaded on the returned OrganizationMember model

        Returns
        -------
        prisma.models.OrganizationMember
            The created OrganizationMember record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a OrganizationMember record from just the required fields
        organizationmember = await OrganizationMember.prisma().create(
            data={
                # data to create a OrganizationMember record
                'userId': 'bageiegghg',
                'organizationId': 'faidicegb',
                'role': enums.UserRole.ADMIN,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.OrganizationMemberCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple OrganizationMember records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of OrganizationMember record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await OrganizationMember.prisma().create_many(
            data=[
                {
                    # data to create a OrganizationMember record
                    'userId': 'bacecgfhbe',
                    'organizationId': 'ihcahiead',
                    'role': enums.UserRole.ADMIN,
                },
                {
                    # data to create a OrganizationMember record
                    'userId': 'biheheiajg',
                    'organizationId': 'jbgijghgb',
                    'role': enums.UserRole.ADMIN,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.OrganizationMemberWhereUniqueInput,
        include: Optional[types.OrganizationMemberInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single OrganizationMember record.

        Parameters
        ----------
        where
            OrganizationMember filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned OrganizationMember model

        Returns
        -------
        prisma.models.OrganizationMember
            The deleted OrganizationMember record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organizationmember = await OrganizationMember.prisma().delete(
            where={
                'id': 'hgjcghfbi',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.OrganizationMemberWhereUniqueInput,
        include: Optional[types.OrganizationMemberInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique OrganizationMember record.

        Parameters
        ----------
        where
            OrganizationMember filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned OrganizationMember model

        Returns
        -------
        prisma.models.OrganizationMember
            The found OrganizationMember record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organizationmember = await OrganizationMember.prisma().find_unique(
            where={
                'id': 'icadbcehj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.OrganizationMemberWhereUniqueInput,
        include: Optional[types.OrganizationMemberInclude] = None
    ) -> _PrismaModelT:
        """Find a unique OrganizationMember record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            OrganizationMember filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned OrganizationMember model

        Returns
        -------
        prisma.models.OrganizationMember
            The found OrganizationMember record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organizationmember = await OrganizationMember.prisma().find_unique_or_raise(
            where={
                'id': 'jchciaee',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationMemberWhereInput] = None,
        cursor: Optional[types.OrganizationMemberWhereUniqueInput] = None,
        include: Optional[types.OrganizationMemberInclude] = None,
        order: Optional[Union[types.OrganizationMemberOrderByInput, List[types.OrganizationMemberOrderByInput]]] = None,
        distinct: Optional[List[types.OrganizationMemberScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple OrganizationMember records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of OrganizationMember records returned
        skip
            Ignore the first N results
        where
            OrganizationMember filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OrganizationMember model
        order
            Order the returned OrganizationMember records by any field
        distinct
            Filter OrganizationMember records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.OrganizationMember]
            The list of all OrganizationMember records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 OrganizationMember records
        organizationmembers = await OrganizationMember.prisma().find_many(take=10)

        # find the first 5 OrganizationMember records ordered by the organizationId field
        organizationmembers = await OrganizationMember.prisma().find_many(
            take=5,
            order={
                'organizationId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationMemberWhereInput] = None,
        cursor: Optional[types.OrganizationMemberWhereUniqueInput] = None,
        include: Optional[types.OrganizationMemberInclude] = None,
        order: Optional[Union[types.OrganizationMemberOrderByInput, List[types.OrganizationMemberOrderByInput]]] = None,
        distinct: Optional[List[types.OrganizationMemberScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single OrganizationMember record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            OrganizationMember filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OrganizationMember model
        order
            Order the returned OrganizationMember records by any field
        distinct
            Filter OrganizationMember records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.OrganizationMember
            The first OrganizationMember record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second OrganizationMember record ordered by the role field
        organizationmember = await OrganizationMember.prisma().find_first(
            skip=1,
            order={
                'role': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationMemberWhereInput] = None,
        cursor: Optional[types.OrganizationMemberWhereUniqueInput] = None,
        include: Optional[types.OrganizationMemberInclude] = None,
        order: Optional[Union[types.OrganizationMemberOrderByInput, List[types.OrganizationMemberOrderByInput]]] = None,
        distinct: Optional[List[types.OrganizationMemberScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single OrganizationMember record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            OrganizationMember filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OrganizationMember model
        order
            Order the returned OrganizationMember records by any field
        distinct
            Filter OrganizationMember records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.OrganizationMember
            The first OrganizationMember record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second OrganizationMember record ordered by the isActive field
        organizationmember = await OrganizationMember.prisma().find_first_or_raise(
            skip=1,
            order={
                'isActive': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.OrganizationMemberUpdateInput,
        where: types.OrganizationMemberWhereUniqueInput,
        include: Optional[types.OrganizationMemberInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single OrganizationMember record.

        Parameters
        ----------
        data
            OrganizationMember record data specifying what to update
        where
            OrganizationMember filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned OrganizationMember model

        Returns
        -------
        prisma.models.OrganizationMember
            The updated OrganizationMember record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        organizationmember = await OrganizationMember.prisma().update(
            where={
                'id': 'deeificjd',
            },
            data={
                # data to update the OrganizationMember record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.OrganizationMemberWhereUniqueInput,
        data: types.OrganizationMemberUpsertInput,
        include: Optional[types.OrganizationMemberInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            OrganizationMember filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned OrganizationMember model

        Returns
        -------
        prisma.models.OrganizationMember
            The created or updated OrganizationMember record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organizationmember = await OrganizationMember.prisma().upsert(
            where={
                'id': 'bbcbhebbda',
            },
            data={
                'create': {
                    'id': 'bbcbhebbda',
                    'userId': 'biheheiajg',
                    'organizationId': 'jbgijghgb',
                    'role': enums.UserRole.ADMIN,
                },
                'update': {
                    'userId': 'biheheiajg',
                    'organizationId': 'jbgijghgb',
                    'role': enums.UserRole.ADMIN,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.OrganizationMemberUpdateManyMutationInput,
        where: types.OrganizationMemberWhereInput,
    ) -> int:
        """Update multiple OrganizationMember records

        Parameters
        ----------
        data
            OrganizationMember data to update the selected OrganizationMember records to
        where
            Filter to select the OrganizationMember records to update

        Returns
        -------
        int
            The total number of OrganizationMember records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all OrganizationMember records
        total = await OrganizationMember.prisma().update_many(
            data={
                'joinedAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationMemberWhereInput] = None,
        cursor: Optional[types.OrganizationMemberWhereUniqueInput] = None,
    ) -> int:
        """Count the number of OrganizationMember records present in the database

        Parameters
        ----------
        select
            Select the OrganizationMember fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            OrganizationMember filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OrganizationMemberCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await OrganizationMember.prisma().count()

        # results: prisma.types.OrganizationMemberCountAggregateOutput
        results = await OrganizationMember.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.OrganizationMemberCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationMemberWhereInput] = None,
        cursor: Optional[types.OrganizationMemberWhereUniqueInput] = None,
    ) -> types.OrganizationMemberCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.OrganizationMemberCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationMemberWhereInput] = None,
        cursor: Optional[types.OrganizationMemberWhereUniqueInput] = None,
    ) -> Union[int, types.OrganizationMemberCountAggregateOutput]:
        """Count the number of OrganizationMember records present in the database

        Parameters
        ----------
        select
            Select the OrganizationMember fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            OrganizationMember filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OrganizationMemberCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await OrganizationMember.prisma().count()

        # results: prisma.types.OrganizationMemberCountAggregateOutput
        results = await OrganizationMember.prisma().count(
            select={
                '_all': True,
                'userId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.OrganizationMemberCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.OrganizationMemberWhereInput] = None
    ) -> int:
        """Delete multiple OrganizationMember records.

        Parameters
        ----------
        where
            Optional OrganizationMember filter to find the records to be deleted

        Returns
        -------
        int
            The total number of OrganizationMember records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all OrganizationMember records
        total = await OrganizationMember.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.OrganizationMemberScalarFieldKeys'],
        *,
        where: Optional['types.OrganizationMemberWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.OrganizationMemberAvgAggregateInput'] = None,
        sum: Optional['types.OrganizationMemberSumAggregateInput'] = None,
        min: Optional['types.OrganizationMemberMinAggregateInput'] = None,
        max: Optional['types.OrganizationMemberMaxAggregateInput'] = None,
        having: Optional['types.OrganizationMemberScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.OrganizationMemberCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.OrganizationMemberScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.OrganizationMemberScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.OrganizationMemberGroupByOutput']:
        """Group OrganizationMember records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar OrganizationMember fields to group records by
        where
            OrganizationMember filter to select records
        take
            Limit the maximum number of OrganizationMember records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.OrganizationMemberGroupByOutput]
            A list of dictionaries representing the OrganizationMember record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group OrganizationMember records by organizationId values
        # and count how many records are in each group
        results = await OrganizationMember.prisma().group_by(
            ['organizationId'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class DriverActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Driver]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Driver.prisma().query_raw(
            'SELECT * FROM Driver WHERE id = $1',
            'bejfijgcfb',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Driver
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Driver.prisma().query_first(
            'SELECT * FROM Driver WHERE name = $1',
            'caifcbgii',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.DriverCreateInput,
        include: Optional[types.DriverInclude] = None
    ) -> _PrismaModelT:
        """Create a new Driver record.

        Parameters
        ----------
        data
            Driver record data
        include
            Specifies which relations should be loaded on the returned Driver model

        Returns
        -------
        prisma.models.Driver
            The created Driver record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Driver record from just the required fields
        driver = await Driver.prisma().create(
            data={
                # data to create a Driver record
                'name': 'igaibbfgj',
                'email': 'bggajdcbbi',
                'phone': 'fcfhgbjed',
                'licenseNumber': 'hdgcajhjg',
                'licenseExpiry': datetime.datetime.utcnow(),
                'organizationId': 'ejdjahicb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.DriverCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Driver records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Driver record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Driver.prisma().create_many(
            data=[
                {
                    # data to create a Driver record
                    'name': 'gdjgigfgc',
                    'email': 'gfeaahdeh',
                    'phone': 'bjafcgbffc',
                    'licenseNumber': 'hihegjif',
                    'licenseExpiry': datetime.datetime.utcnow(),
                    'organizationId': 'bdjidcidac',
                },
                {
                    # data to create a Driver record
                    'name': 'ifgaaagff',
                    'email': 'befcddgjce',
                    'phone': 'bfhdbjjgfd',
                    'licenseNumber': 'cabdjadaji',
                    'licenseExpiry': datetime.datetime.utcnow(),
                    'organizationId': 'faajgfadf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.DriverWhereUniqueInput,
        include: Optional[types.DriverInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Driver record.

        Parameters
        ----------
        where
            Driver filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Driver model

        Returns
        -------
        prisma.models.Driver
            The deleted Driver record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        driver = await Driver.prisma().delete(
            where={
                'id': 'biaagcedjc',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.DriverWhereUniqueInput,
        include: Optional[types.DriverInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Driver record.

        Parameters
        ----------
        where
            Driver filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Driver model

        Returns
        -------
        prisma.models.Driver
            The found Driver record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        driver = await Driver.prisma().find_unique(
            where={
                'id': 'cahhaghecf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.DriverWhereUniqueInput,
        include: Optional[types.DriverInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Driver record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Driver filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Driver model

        Returns
        -------
        prisma.models.Driver
            The found Driver record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        driver = await Driver.prisma().find_unique_or_raise(
            where={
                'id': 'bghcbbcidi',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DriverWhereInput] = None,
        cursor: Optional[types.DriverWhereUniqueInput] = None,
        include: Optional[types.DriverInclude] = None,
        order: Optional[Union[types.DriverOrderByInput, List[types.DriverOrderByInput]]] = None,
        distinct: Optional[List[types.DriverScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Driver records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Driver records returned
        skip
            Ignore the first N results
        where
            Driver filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Driver model
        order
            Order the returned Driver records by any field
        distinct
            Filter Driver records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Driver]
            The list of all Driver records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Driver records
        drivers = await Driver.prisma().find_many(take=10)

        # find the first 5 Driver records ordered by the email field
        drivers = await Driver.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DriverWhereInput] = None,
        cursor: Optional[types.DriverWhereUniqueInput] = None,
        include: Optional[types.DriverInclude] = None,
        order: Optional[Union[types.DriverOrderByInput, List[types.DriverOrderByInput]]] = None,
        distinct: Optional[List[types.DriverScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Driver record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Driver filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Driver model
        order
            Order the returned Driver records by any field
        distinct
            Filter Driver records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Driver
            The first Driver record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Driver record ordered by the phone field
        driver = await Driver.prisma().find_first(
            skip=1,
            order={
                'phone': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DriverWhereInput] = None,
        cursor: Optional[types.DriverWhereUniqueInput] = None,
        include: Optional[types.DriverInclude] = None,
        order: Optional[Union[types.DriverOrderByInput, List[types.DriverOrderByInput]]] = None,
        distinct: Optional[List[types.DriverScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Driver record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Driver filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Driver model
        order
            Order the returned Driver records by any field
        distinct
            Filter Driver records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Driver
            The first Driver record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Driver record ordered by the licenseNumber field
        driver = await Driver.prisma().find_first_or_raise(
            skip=1,
            order={
                'licenseNumber': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.DriverUpdateInput,
        where: types.DriverWhereUniqueInput,
        include: Optional[types.DriverInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Driver record.

        Parameters
        ----------
        data
            Driver record data specifying what to update
        where
            Driver filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Driver model

        Returns
        -------
        prisma.models.Driver
            The updated Driver record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        driver = await Driver.prisma().update(
            where={
                'id': 'jcgghhgdj',
            },
            data={
                # data to update the Driver record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.DriverWhereUniqueInput,
        data: types.DriverUpsertInput,
        include: Optional[types.DriverInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Driver filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Driver model

        Returns
        -------
        prisma.models.Driver
            The created or updated Driver record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        driver = await Driver.prisma().upsert(
            where={
                'id': 'beehgcebbg',
            },
            data={
                'create': {
                    'id': 'beehgcebbg',
                    'name': 'ifgaaagff',
                    'email': 'befcddgjce',
                    'phone': 'bfhdbjjgfd',
                    'licenseNumber': 'cabdjadaji',
                    'licenseExpiry': datetime.datetime.utcnow(),
                    'organizationId': 'faajgfadf',
                },
                'update': {
                    'name': 'ifgaaagff',
                    'email': 'befcddgjce',
                    'phone': 'bfhdbjjgfd',
                    'licenseNumber': 'cabdjadaji',
                    'licenseExpiry': datetime.datetime.utcnow(),
                    'organizationId': 'faajgfadf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.DriverUpdateManyMutationInput,
        where: types.DriverWhereInput,
    ) -> int:
        """Update multiple Driver records

        Parameters
        ----------
        data
            Driver data to update the selected Driver records to
        where
            Filter to select the Driver records to update

        Returns
        -------
        int
            The total number of Driver records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Driver records
        total = await Driver.prisma().update_many(
            data={
                'licenseType': 'bhdiaidiaf'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DriverWhereInput] = None,
        cursor: Optional[types.DriverWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Driver records present in the database

        Parameters
        ----------
        select
            Select the Driver fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Driver filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DriverCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Driver.prisma().count()

        # results: prisma.types.DriverCountAggregateOutput
        results = await Driver.prisma().count(
            select={
                '_all': True,
                'licenseExpiry': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.DriverCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DriverWhereInput] = None,
        cursor: Optional[types.DriverWhereUniqueInput] = None,
    ) -> types.DriverCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.DriverCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DriverWhereInput] = None,
        cursor: Optional[types.DriverWhereUniqueInput] = None,
    ) -> Union[int, types.DriverCountAggregateOutput]:
        """Count the number of Driver records present in the database

        Parameters
        ----------
        select
            Select the Driver fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Driver filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DriverCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Driver.prisma().count()

        # results: prisma.types.DriverCountAggregateOutput
        results = await Driver.prisma().count(
            select={
                '_all': True,
                'isActive': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.DriverCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.DriverWhereInput] = None
    ) -> int:
        """Delete multiple Driver records.

        Parameters
        ----------
        where
            Optional Driver filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Driver records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Driver records
        total = await Driver.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.DriverScalarFieldKeys'],
        *,
        where: Optional['types.DriverWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.DriverAvgAggregateInput'] = None,
        sum: Optional['types.DriverSumAggregateInput'] = None,
        min: Optional['types.DriverMinAggregateInput'] = None,
        max: Optional['types.DriverMaxAggregateInput'] = None,
        having: Optional['types.DriverScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.DriverCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.DriverScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.DriverScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.DriverGroupByOutput']:
        """Group Driver records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Driver fields to group records by
        where
            Driver filter to select records
        take
            Limit the maximum number of Driver records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DriverGroupByOutput]
            A list of dictionaries representing the Driver record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Driver records by restrictions values
        # and count how many records are in each group
        results = await Driver.prisma().group_by(
            ['restrictions'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class VehicleActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Vehicle]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Vehicle.prisma().query_raw(
            'SELECT * FROM Vehicle WHERE id = $1',
            'deajegcfi',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Vehicle
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Vehicle.prisma().query_first(
            'SELECT * FROM Vehicle WHERE make = $1',
            'gabahhhjf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.VehicleCreateInput,
        include: Optional[types.VehicleInclude] = None
    ) -> _PrismaModelT:
        """Create a new Vehicle record.

        Parameters
        ----------
        data
            Vehicle record data
        include
            Specifies which relations should be loaded on the returned Vehicle model

        Returns
        -------
        prisma.models.Vehicle
            The created Vehicle record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Vehicle record from just the required fields
        vehicle = await Vehicle.prisma().create(
            data={
                # data to create a Vehicle record
                'make': 'cjagadcjg',
                'model': 'bifficggej',
                'year': 1611009182,
                'vehicleType': 'eegghdhjb',
                'licensePlate': 'daafgidjg',
                'vin': 'gdcgcgagj',
                'organizationId': 'bhceabbgja',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.VehicleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Vehicle records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Vehicle record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Vehicle.prisma().create_many(
            data=[
                {
                    # data to create a Vehicle record
                    'make': 'ehabfhegh',
                    'model': 'bcajcajjbc',
                    'year': 1536744465,
                    'vehicleType': 'ececbijji',
                    'licensePlate': 'cbcfgdcdhf',
                    'vin': 'fdgjfbhia',
                    'organizationId': 'jcehcdchh',
                },
                {
                    # data to create a Vehicle record
                    'make': 'bgcbjdhjcc',
                    'model': 'bieiidcabj',
                    'year': 1921528400,
                    'vehicleType': 'cbaaechiej',
                    'licensePlate': 'iejbeaaeg',
                    'vin': 'jcibfcbhf',
                    'organizationId': 'chdadcaga',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.VehicleWhereUniqueInput,
        include: Optional[types.VehicleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Vehicle record.

        Parameters
        ----------
        where
            Vehicle filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Vehicle model

        Returns
        -------
        prisma.models.Vehicle
            The deleted Vehicle record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        vehicle = await Vehicle.prisma().delete(
            where={
                'id': 'jicieifbh',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.VehicleWhereUniqueInput,
        include: Optional[types.VehicleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Vehicle record.

        Parameters
        ----------
        where
            Vehicle filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Vehicle model

        Returns
        -------
        prisma.models.Vehicle
            The found Vehicle record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        vehicle = await Vehicle.prisma().find_unique(
            where={
                'id': 'fbahdheji',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.VehicleWhereUniqueInput,
        include: Optional[types.VehicleInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Vehicle record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Vehicle filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Vehicle model

        Returns
        -------
        prisma.models.Vehicle
            The found Vehicle record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        vehicle = await Vehicle.prisma().find_unique_or_raise(
            where={
                'id': 'cbbheiicgh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VehicleWhereInput] = None,
        cursor: Optional[types.VehicleWhereUniqueInput] = None,
        include: Optional[types.VehicleInclude] = None,
        order: Optional[Union[types.VehicleOrderByInput, List[types.VehicleOrderByInput]]] = None,
        distinct: Optional[List[types.VehicleScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Vehicle records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Vehicle records returned
        skip
            Ignore the first N results
        where
            Vehicle filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Vehicle model
        order
            Order the returned Vehicle records by any field
        distinct
            Filter Vehicle records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Vehicle]
            The list of all Vehicle records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Vehicle records
        vehicles = await Vehicle.prisma().find_many(take=10)

        # find the first 5 Vehicle records ordered by the model field
        vehicles = await Vehicle.prisma().find_many(
            take=5,
            order={
                'model': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.VehicleWhereInput] = None,
        cursor: Optional[types.VehicleWhereUniqueInput] = None,
        include: Optional[types.VehicleInclude] = None,
        order: Optional[Union[types.VehicleOrderByInput, List[types.VehicleOrderByInput]]] = None,
        distinct: Optional[List[types.VehicleScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Vehicle record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Vehicle filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Vehicle model
        order
            Order the returned Vehicle records by any field
        distinct
            Filter Vehicle records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Vehicle
            The first Vehicle record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Vehicle record ordered by the year field
        vehicle = await Vehicle.prisma().find_first(
            skip=1,
            order={
                'year': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.VehicleWhereInput] = None,
        cursor: Optional[types.VehicleWhereUniqueInput] = None,
        include: Optional[types.VehicleInclude] = None,
        order: Optional[Union[types.VehicleOrderByInput, List[types.VehicleOrderByInput]]] = None,
        distinct: Optional[List[types.VehicleScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Vehicle record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Vehicle filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Vehicle model
        order
            Order the returned Vehicle records by any field
        distinct
            Filter Vehicle records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Vehicle
            The first Vehicle record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Vehicle record ordered by the vehicleType field
        vehicle = await Vehicle.prisma().find_first_or_raise(
            skip=1,
            order={
                'vehicleType': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.VehicleUpdateInput,
        where: types.VehicleWhereUniqueInput,
        include: Optional[types.VehicleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Vehicle record.

        Parameters
        ----------
        data
            Vehicle record data specifying what to update
        where
            Vehicle filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Vehicle model

        Returns
        -------
        prisma.models.Vehicle
            The updated Vehicle record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        vehicle = await Vehicle.prisma().update(
            where={
                'id': 'beabjeejdg',
            },
            data={
                # data to update the Vehicle record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.VehicleWhereUniqueInput,
        data: types.VehicleUpsertInput,
        include: Optional[types.VehicleInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Vehicle filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Vehicle model

        Returns
        -------
        prisma.models.Vehicle
            The created or updated Vehicle record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        vehicle = await Vehicle.prisma().upsert(
            where={
                'id': 'bcjhgahffd',
            },
            data={
                'create': {
                    'id': 'bcjhgahffd',
                    'make': 'bgcbjdhjcc',
                    'model': 'bieiidcabj',
                    'year': 1921528400,
                    'vehicleType': 'cbaaechiej',
                    'licensePlate': 'iejbeaaeg',
                    'vin': 'jcibfcbhf',
                    'organizationId': 'chdadcaga',
                },
                'update': {
                    'make': 'bgcbjdhjcc',
                    'model': 'bieiidcabj',
                    'year': 1921528400,
                    'vehicleType': 'cbaaechiej',
                    'licensePlate': 'iejbeaaeg',
                    'vin': 'jcibfcbhf',
                    'organizationId': 'chdadcaga',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.VehicleUpdateManyMutationInput,
        where: types.VehicleWhereInput,
    ) -> int:
        """Update multiple Vehicle records

        Parameters
        ----------
        data
            Vehicle data to update the selected Vehicle records to
        where
            Filter to select the Vehicle records to update

        Returns
        -------
        int
            The total number of Vehicle records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Vehicle records
        total = await Vehicle.prisma().update_many(
            data={
                'licensePlate': 'fbjeiiffa'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VehicleWhereInput] = None,
        cursor: Optional[types.VehicleWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Vehicle records present in the database

        Parameters
        ----------
        select
            Select the Vehicle fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Vehicle filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.VehicleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Vehicle.prisma().count()

        # results: prisma.types.VehicleCountAggregateOutput
        results = await Vehicle.prisma().count(
            select={
                '_all': True,
                'vin': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.VehicleCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VehicleWhereInput] = None,
        cursor: Optional[types.VehicleWhereUniqueInput] = None,
    ) -> types.VehicleCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.VehicleCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.VehicleWhereInput] = None,
        cursor: Optional[types.VehicleWhereUniqueInput] = None,
    ) -> Union[int, types.VehicleCountAggregateOutput]:
        """Count the number of Vehicle records present in the database

        Parameters
        ----------
        select
            Select the Vehicle fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Vehicle filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.VehicleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Vehicle.prisma().count()

        # results: prisma.types.VehicleCountAggregateOutput
        results = await Vehicle.prisma().count(
            select={
                '_all': True,
                'color': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.VehicleCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.VehicleWhereInput] = None
    ) -> int:
        """Delete multiple Vehicle records.

        Parameters
        ----------
        where
            Optional Vehicle filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Vehicle records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Vehicle records
        total = await Vehicle.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.VehicleScalarFieldKeys'],
        *,
        where: Optional['types.VehicleWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.VehicleAvgAggregateInput'] = None,
        sum: Optional['types.VehicleSumAggregateInput'] = None,
        min: Optional['types.VehicleMinAggregateInput'] = None,
        max: Optional['types.VehicleMaxAggregateInput'] = None,
        having: Optional['types.VehicleScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.VehicleCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.VehicleScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.VehicleScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.VehicleGroupByOutput']:
        """Group Vehicle records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Vehicle fields to group records by
        where
            Vehicle filter to select records
        take
            Limit the maximum number of Vehicle records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.VehicleGroupByOutput]
            A list of dictionaries representing the Vehicle record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Vehicle records by mileage values
        # and count how many records are in each group
        results = await Vehicle.prisma().group_by(
            ['mileage'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MaintenanceActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Maintenance]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Maintenance.prisma().query_raw(
            'SELECT * FROM Maintenance WHERE id = $1',
            'jhgidcgbf',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Maintenance
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Maintenance.prisma().query_first(
            'SELECT * FROM Maintenance WHERE title = $1',
            'bgjgecfejc',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MaintenanceCreateInput,
        include: Optional[types.MaintenanceInclude] = None
    ) -> _PrismaModelT:
        """Create a new Maintenance record.

        Parameters
        ----------
        data
            Maintenance record data
        include
            Specifies which relations should be loaded on the returned Maintenance model

        Returns
        -------
        prisma.models.Maintenance
            The created Maintenance record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Maintenance record from just the required fields
        maintenance = await Maintenance.prisma().create(
            data={
                # data to create a Maintenance record
                'title': 'bgjcgchib',
                'maintenanceType': enums.MaintenanceType.REGULAR,
                'startDate': datetime.datetime.utcnow(),
                'vehicleId': 'bacdaibgfa',
                'organizationId': 'dchgibach',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MaintenanceCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Maintenance records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Maintenance record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Maintenance.prisma().create_many(
            data=[
                {
                    # data to create a Maintenance record
                    'title': 'fchheijjc',
                    'maintenanceType': enums.MaintenanceType.REGULAR,
                    'startDate': datetime.datetime.utcnow(),
                    'vehicleId': 'cacjdfhejh',
                    'organizationId': 'bdbifjhbbi',
                },
                {
                    # data to create a Maintenance record
                    'title': 'cbccbbcdfb',
                    'maintenanceType': enums.MaintenanceType.REGULAR,
                    'startDate': datetime.datetime.utcnow(),
                    'vehicleId': 'bacejedaca',
                    'organizationId': 'bhbhdahfaj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MaintenanceWhereUniqueInput,
        include: Optional[types.MaintenanceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Maintenance record.

        Parameters
        ----------
        where
            Maintenance filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Maintenance model

        Returns
        -------
        prisma.models.Maintenance
            The deleted Maintenance record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        maintenance = await Maintenance.prisma().delete(
            where={
                'id': 'bfjibceaec',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.MaintenanceWhereUniqueInput,
        include: Optional[types.MaintenanceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Maintenance record.

        Parameters
        ----------
        where
            Maintenance filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Maintenance model

        Returns
        -------
        prisma.models.Maintenance
            The found Maintenance record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        maintenance = await Maintenance.prisma().find_unique(
            where={
                'id': 'ibhgcdbgd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.MaintenanceWhereUniqueInput,
        include: Optional[types.MaintenanceInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Maintenance record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Maintenance filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Maintenance model

        Returns
        -------
        prisma.models.Maintenance
            The found Maintenance record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        maintenance = await Maintenance.prisma().find_unique_or_raise(
            where={
                'id': 'badaffhddg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaintenanceWhereInput] = None,
        cursor: Optional[types.MaintenanceWhereUniqueInput] = None,
        include: Optional[types.MaintenanceInclude] = None,
        order: Optional[Union[types.MaintenanceOrderByInput, List[types.MaintenanceOrderByInput]]] = None,
        distinct: Optional[List[types.MaintenanceScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Maintenance records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Maintenance records returned
        skip
            Ignore the first N results
        where
            Maintenance filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Maintenance model
        order
            Order the returned Maintenance records by any field
        distinct
            Filter Maintenance records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Maintenance]
            The list of all Maintenance records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Maintenance records
        maintenances = await Maintenance.prisma().find_many(take=10)

        # find the first 5 Maintenance records ordered by the description field
        maintenances = await Maintenance.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MaintenanceWhereInput] = None,
        cursor: Optional[types.MaintenanceWhereUniqueInput] = None,
        include: Optional[types.MaintenanceInclude] = None,
        order: Optional[Union[types.MaintenanceOrderByInput, List[types.MaintenanceOrderByInput]]] = None,
        distinct: Optional[List[types.MaintenanceScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Maintenance record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Maintenance filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Maintenance model
        order
            Order the returned Maintenance records by any field
        distinct
            Filter Maintenance records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Maintenance
            The first Maintenance record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Maintenance record ordered by the maintenanceType field
        maintenance = await Maintenance.prisma().find_first(
            skip=1,
            order={
                'maintenanceType': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MaintenanceWhereInput] = None,
        cursor: Optional[types.MaintenanceWhereUniqueInput] = None,
        include: Optional[types.MaintenanceInclude] = None,
        order: Optional[Union[types.MaintenanceOrderByInput, List[types.MaintenanceOrderByInput]]] = None,
        distinct: Optional[List[types.MaintenanceScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Maintenance record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Maintenance filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Maintenance model
        order
            Order the returned Maintenance records by any field
        distinct
            Filter Maintenance records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Maintenance
            The first Maintenance record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Maintenance record ordered by the status field
        maintenance = await Maintenance.prisma().find_first_or_raise(
            skip=1,
            order={
                'status': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.MaintenanceUpdateInput,
        where: types.MaintenanceWhereUniqueInput,
        include: Optional[types.MaintenanceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Maintenance record.

        Parameters
        ----------
        data
            Maintenance record data specifying what to update
        where
            Maintenance filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Maintenance model

        Returns
        -------
        prisma.models.Maintenance
            The updated Maintenance record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        maintenance = await Maintenance.prisma().update(
            where={
                'id': 'bbdbfcfihd',
            },
            data={
                # data to update the Maintenance record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.MaintenanceWhereUniqueInput,
        data: types.MaintenanceUpsertInput,
        include: Optional[types.MaintenanceInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Maintenance filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Maintenance model

        Returns
        -------
        prisma.models.Maintenance
            The created or updated Maintenance record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        maintenance = await Maintenance.prisma().upsert(
            where={
                'id': 'cbagggbji',
            },
            data={
                'create': {
                    'id': 'cbagggbji',
                    'title': 'cbccbbcdfb',
                    'maintenanceType': enums.MaintenanceType.REGULAR,
                    'startDate': datetime.datetime.utcnow(),
                    'vehicleId': 'bacejedaca',
                    'organizationId': 'bhbhdahfaj',
                },
                'update': {
                    'title': 'cbccbbcdfb',
                    'maintenanceType': enums.MaintenanceType.REGULAR,
                    'startDate': datetime.datetime.utcnow(),
                    'vehicleId': 'bacejedaca',
                    'organizationId': 'bhbhdahfaj',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.MaintenanceUpdateManyMutationInput,
        where: types.MaintenanceWhereInput,
    ) -> int:
        """Update multiple Maintenance records

        Parameters
        ----------
        data
            Maintenance data to update the selected Maintenance records to
        where
            Filter to select the Maintenance records to update

        Returns
        -------
        int
            The total number of Maintenance records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Maintenance records
        total = await Maintenance.prisma().update_many(
            data={
                'startDate': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaintenanceWhereInput] = None,
        cursor: Optional[types.MaintenanceWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Maintenance records present in the database

        Parameters
        ----------
        select
            Select the Maintenance fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Maintenance filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MaintenanceCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Maintenance.prisma().count()

        # results: prisma.types.MaintenanceCountAggregateOutput
        results = await Maintenance.prisma().count(
            select={
                '_all': True,
                'endDate': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MaintenanceCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaintenanceWhereInput] = None,
        cursor: Optional[types.MaintenanceWhereUniqueInput] = None,
    ) -> types.MaintenanceCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MaintenanceCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaintenanceWhereInput] = None,
        cursor: Optional[types.MaintenanceWhereUniqueInput] = None,
    ) -> Union[int, types.MaintenanceCountAggregateOutput]:
        """Count the number of Maintenance records present in the database

        Parameters
        ----------
        select
            Select the Maintenance fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Maintenance filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MaintenanceCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Maintenance.prisma().count()

        # results: prisma.types.MaintenanceCountAggregateOutput
        results = await Maintenance.prisma().count(
            select={
                '_all': True,
                'mileageAtService': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MaintenanceCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MaintenanceWhereInput] = None
    ) -> int:
        """Delete multiple Maintenance records.

        Parameters
        ----------
        where
            Optional Maintenance filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Maintenance records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Maintenance records
        total = await Maintenance.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MaintenanceScalarFieldKeys'],
        *,
        where: Optional['types.MaintenanceWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MaintenanceAvgAggregateInput'] = None,
        sum: Optional['types.MaintenanceSumAggregateInput'] = None,
        min: Optional['types.MaintenanceMinAggregateInput'] = None,
        max: Optional['types.MaintenanceMaxAggregateInput'] = None,
        having: Optional['types.MaintenanceScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MaintenanceCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MaintenanceScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MaintenanceScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MaintenanceGroupByOutput']:
        """Group Maintenance records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Maintenance fields to group records by
        where
            Maintenance filter to select records
        take
            Limit the maximum number of Maintenance records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MaintenanceGroupByOutput]
            A list of dictionaries representing the Maintenance record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Maintenance records by cost values
        # and count how many records are in each group
        results = await Maintenance.prisma().group_by(
            ['cost'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MaintenancePartActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.MaintenancePart]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await MaintenancePart.prisma().query_raw(
            'SELECT * FROM MaintenancePart WHERE id = $1',
            'bchgafhjed',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.MaintenancePart
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await MaintenancePart.prisma().query_first(
            'SELECT * FROM MaintenancePart WHERE name = $1',
            'heffgjdei',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MaintenancePartCreateInput,
        include: Optional[types.MaintenancePartInclude] = None
    ) -> _PrismaModelT:
        """Create a new MaintenancePart record.

        Parameters
        ----------
        data
            MaintenancePart record data
        include
            Specifies which relations should be loaded on the returned MaintenancePart model

        Returns
        -------
        prisma.models.MaintenancePart
            The created MaintenancePart record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a MaintenancePart record from just the required fields
        maintenancepart = await MaintenancePart.prisma().create(
            data={
                # data to create a MaintenancePart record
                'name': 'dahihgbeb',
                'quantity': 1674049122,
                'maintenanceId': 'bfcgifeged',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MaintenancePartCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple MaintenancePart records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of MaintenancePart record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await MaintenancePart.prisma().create_many(
            data=[
                {
                    # data to create a MaintenancePart record
                    'name': 'jfiahhbae',
                    'quantity': 1513050921,
                    'maintenanceId': 'caeghehde',
                },
                {
                    # data to create a MaintenancePart record
                    'name': 'caghgfbggd',
                    'quantity': 1183911900,
                    'maintenanceId': 'bfijhaejdd',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MaintenancePartWhereUniqueInput,
        include: Optional[types.MaintenancePartInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single MaintenancePart record.

        Parameters
        ----------
        where
            MaintenancePart filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned MaintenancePart model

        Returns
        -------
        prisma.models.MaintenancePart
            The deleted MaintenancePart record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        maintenancepart = await MaintenancePart.prisma().delete(
            where={
                'id': 'bcedehfiji',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.MaintenancePartWhereUniqueInput,
        include: Optional[types.MaintenancePartInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique MaintenancePart record.

        Parameters
        ----------
        where
            MaintenancePart filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MaintenancePart model

        Returns
        -------
        prisma.models.MaintenancePart
            The found MaintenancePart record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        maintenancepart = await MaintenancePart.prisma().find_unique(
            where={
                'id': 'bdgjicijhb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.MaintenancePartWhereUniqueInput,
        include: Optional[types.MaintenancePartInclude] = None
    ) -> _PrismaModelT:
        """Find a unique MaintenancePart record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            MaintenancePart filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned MaintenancePart model

        Returns
        -------
        prisma.models.MaintenancePart
            The found MaintenancePart record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        maintenancepart = await MaintenancePart.prisma().find_unique_or_raise(
            where={
                'id': 'bghifjdeia',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaintenancePartWhereInput] = None,
        cursor: Optional[types.MaintenancePartWhereUniqueInput] = None,
        include: Optional[types.MaintenancePartInclude] = None,
        order: Optional[Union[types.MaintenancePartOrderByInput, List[types.MaintenancePartOrderByInput]]] = None,
        distinct: Optional[List[types.MaintenancePartScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple MaintenancePart records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of MaintenancePart records returned
        skip
            Ignore the first N results
        where
            MaintenancePart filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MaintenancePart model
        order
            Order the returned MaintenancePart records by any field
        distinct
            Filter MaintenancePart records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.MaintenancePart]
            The list of all MaintenancePart records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 MaintenancePart records
        maintenanceparts = await MaintenancePart.prisma().find_many(take=10)

        # find the first 5 MaintenancePart records ordered by the partNumber field
        maintenanceparts = await MaintenancePart.prisma().find_many(
            take=5,
            order={
                'partNumber': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MaintenancePartWhereInput] = None,
        cursor: Optional[types.MaintenancePartWhereUniqueInput] = None,
        include: Optional[types.MaintenancePartInclude] = None,
        order: Optional[Union[types.MaintenancePartOrderByInput, List[types.MaintenancePartOrderByInput]]] = None,
        distinct: Optional[List[types.MaintenancePartScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single MaintenancePart record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MaintenancePart filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MaintenancePart model
        order
            Order the returned MaintenancePart records by any field
        distinct
            Filter MaintenancePart records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MaintenancePart
            The first MaintenancePart record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MaintenancePart record ordered by the quantity field
        maintenancepart = await MaintenancePart.prisma().find_first(
            skip=1,
            order={
                'quantity': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MaintenancePartWhereInput] = None,
        cursor: Optional[types.MaintenancePartWhereUniqueInput] = None,
        include: Optional[types.MaintenancePartInclude] = None,
        order: Optional[Union[types.MaintenancePartOrderByInput, List[types.MaintenancePartOrderByInput]]] = None,
        distinct: Optional[List[types.MaintenancePartScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single MaintenancePart record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            MaintenancePart filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned MaintenancePart model
        order
            Order the returned MaintenancePart records by any field
        distinct
            Filter MaintenancePart records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.MaintenancePart
            The first MaintenancePart record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second MaintenancePart record ordered by the unitPrice field
        maintenancepart = await MaintenancePart.prisma().find_first_or_raise(
            skip=1,
            order={
                'unitPrice': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.MaintenancePartUpdateInput,
        where: types.MaintenancePartWhereUniqueInput,
        include: Optional[types.MaintenancePartInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single MaintenancePart record.

        Parameters
        ----------
        data
            MaintenancePart record data specifying what to update
        where
            MaintenancePart filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned MaintenancePart model

        Returns
        -------
        prisma.models.MaintenancePart
            The updated MaintenancePart record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        maintenancepart = await MaintenancePart.prisma().update(
            where={
                'id': 'eadfcbbcb',
            },
            data={
                # data to update the MaintenancePart record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.MaintenancePartWhereUniqueInput,
        data: types.MaintenancePartUpsertInput,
        include: Optional[types.MaintenancePartInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            MaintenancePart filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned MaintenancePart model

        Returns
        -------
        prisma.models.MaintenancePart
            The created or updated MaintenancePart record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        maintenancepart = await MaintenancePart.prisma().upsert(
            where={
                'id': 'geihgahba',
            },
            data={
                'create': {
                    'id': 'geihgahba',
                    'name': 'caghgfbggd',
                    'quantity': 1183911900,
                    'maintenanceId': 'bfijhaejdd',
                },
                'update': {
                    'name': 'caghgfbggd',
                    'quantity': 1183911900,
                    'maintenanceId': 'bfijhaejdd',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.MaintenancePartUpdateManyMutationInput,
        where: types.MaintenancePartWhereInput,
    ) -> int:
        """Update multiple MaintenancePart records

        Parameters
        ----------
        data
            MaintenancePart data to update the selected MaintenancePart records to
        where
            Filter to select the MaintenancePart records to update

        Returns
        -------
        int
            The total number of MaintenancePart records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all MaintenancePart records
        total = await MaintenancePart.prisma().update_many(
            data={
                'totalPrice': 607323719.146889
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaintenancePartWhereInput] = None,
        cursor: Optional[types.MaintenancePartWhereUniqueInput] = None,
    ) -> int:
        """Count the number of MaintenancePart records present in the database

        Parameters
        ----------
        select
            Select the MaintenancePart fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MaintenancePart filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MaintenancePartCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MaintenancePart.prisma().count()

        # results: prisma.types.MaintenancePartCountAggregateOutput
        results = await MaintenancePart.prisma().count(
            select={
                '_all': True,
                'maintenanceId': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MaintenancePartCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaintenancePartWhereInput] = None,
        cursor: Optional[types.MaintenancePartWhereUniqueInput] = None,
    ) -> types.MaintenancePartCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MaintenancePartCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MaintenancePartWhereInput] = None,
        cursor: Optional[types.MaintenancePartWhereUniqueInput] = None,
    ) -> Union[int, types.MaintenancePartCountAggregateOutput]:
        """Count the number of MaintenancePart records present in the database

        Parameters
        ----------
        select
            Select the MaintenancePart fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            MaintenancePart filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MaintenancePartCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await MaintenancePart.prisma().count()

        # results: prisma.types.MaintenancePartCountAggregateOutput
        results = await MaintenancePart.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MaintenancePartCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MaintenancePartWhereInput] = None
    ) -> int:
        """Delete multiple MaintenancePart records.

        Parameters
        ----------
        where
            Optional MaintenancePart filter to find the records to be deleted

        Returns
        -------
        int
            The total number of MaintenancePart records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all MaintenancePart records
        total = await MaintenancePart.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MaintenancePartScalarFieldKeys'],
        *,
        where: Optional['types.MaintenancePartWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MaintenancePartAvgAggregateInput'] = None,
        sum: Optional['types.MaintenancePartSumAggregateInput'] = None,
        min: Optional['types.MaintenancePartMinAggregateInput'] = None,
        max: Optional['types.MaintenancePartMaxAggregateInput'] = None,
        having: Optional['types.MaintenancePartScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MaintenancePartCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MaintenancePartScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MaintenancePartScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MaintenancePartGroupByOutput']:
        """Group MaintenancePart records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar MaintenancePart fields to group records by
        where
            MaintenancePart filter to select records
        take
            Limit the maximum number of MaintenancePart records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MaintenancePartGroupByOutput]
            A list of dictionaries representing the MaintenancePart record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group MaintenancePart records by updatedAt values
        # and count how many records are in each group
        results = await MaintenancePart.prisma().group_by(
            ['updatedAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class DriverPerformanceActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.DriverPerformance]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await DriverPerformance.prisma().query_raw(
            'SELECT * FROM DriverPerformance WHERE id = $1',
            'gcjadjaaf',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.DriverPerformance
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await DriverPerformance.prisma().query_first(
            'SELECT * FROM DriverPerformance WHERE driverId = $1',
            'bcbebgiaic',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.DriverPerformanceCreateInput,
        include: Optional[types.DriverPerformanceInclude] = None
    ) -> _PrismaModelT:
        """Create a new DriverPerformance record.

        Parameters
        ----------
        data
            DriverPerformance record data
        include
            Specifies which relations should be loaded on the returned DriverPerformance model

        Returns
        -------
        prisma.models.DriverPerformance
            The created DriverPerformance record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a DriverPerformance record from just the required fields
        driverperformance = await DriverPerformance.prisma().create(
            data={
                # data to create a DriverPerformance record
                'driverId': 'ijigbdcbj',
                'periodStart': datetime.datetime.utcnow(),
                'periodEnd': datetime.datetime.utcnow(),
                'totalDistance': 658378208.95462,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.DriverPerformanceCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple DriverPerformance records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of DriverPerformance record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await DriverPerformance.prisma().create_many(
            data=[
                {
                    # data to create a DriverPerformance record
                    'driverId': 'bcbeiajjfa',
                    'periodStart': datetime.datetime.utcnow(),
                    'periodEnd': datetime.datetime.utcnow(),
                    'totalDistance': 1047820095.130273,
                },
                {
                    # data to create a DriverPerformance record
                    'driverId': 'ijdafccef',
                    'periodStart': datetime.datetime.utcnow(),
                    'periodEnd': datetime.datetime.utcnow(),
                    'totalDistance': 280083306.54966,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.DriverPerformanceWhereUniqueInput,
        include: Optional[types.DriverPerformanceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single DriverPerformance record.

        Parameters
        ----------
        where
            DriverPerformance filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned DriverPerformance model

        Returns
        -------
        prisma.models.DriverPerformance
            The deleted DriverPerformance record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        driverperformance = await DriverPerformance.prisma().delete(
            where={
                'id': 'hghjaaai',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.DriverPerformanceWhereUniqueInput,
        include: Optional[types.DriverPerformanceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique DriverPerformance record.

        Parameters
        ----------
        where
            DriverPerformance filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned DriverPerformance model

        Returns
        -------
        prisma.models.DriverPerformance
            The found DriverPerformance record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        driverperformance = await DriverPerformance.prisma().find_unique(
            where={
                'id': 'cajicjjdef',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.DriverPerformanceWhereUniqueInput,
        include: Optional[types.DriverPerformanceInclude] = None
    ) -> _PrismaModelT:
        """Find a unique DriverPerformance record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            DriverPerformance filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned DriverPerformance model

        Returns
        -------
        prisma.models.DriverPerformance
            The found DriverPerformance record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        driverperformance = await DriverPerformance.prisma().find_unique_or_raise(
            where={
                'id': 'cefjaadec',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DriverPerformanceWhereInput] = None,
        cursor: Optional[types.DriverPerformanceWhereUniqueInput] = None,
        include: Optional[types.DriverPerformanceInclude] = None,
        order: Optional[Union[types.DriverPerformanceOrderByInput, List[types.DriverPerformanceOrderByInput]]] = None,
        distinct: Optional[List[types.DriverPerformanceScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple DriverPerformance records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of DriverPerformance records returned
        skip
            Ignore the first N results
        where
            DriverPerformance filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DriverPerformance model
        order
            Order the returned DriverPerformance records by any field
        distinct
            Filter DriverPerformance records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.DriverPerformance]
            The list of all DriverPerformance records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 DriverPerformance records
        driverperformances = await DriverPerformance.prisma().find_many(take=10)

        # find the first 5 DriverPerformance records ordered by the periodStart field
        driverperformances = await DriverPerformance.prisma().find_many(
            take=5,
            order={
                'periodStart': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DriverPerformanceWhereInput] = None,
        cursor: Optional[types.DriverPerformanceWhereUniqueInput] = None,
        include: Optional[types.DriverPerformanceInclude] = None,
        order: Optional[Union[types.DriverPerformanceOrderByInput, List[types.DriverPerformanceOrderByInput]]] = None,
        distinct: Optional[List[types.DriverPerformanceScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single DriverPerformance record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            DriverPerformance filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DriverPerformance model
        order
            Order the returned DriverPerformance records by any field
        distinct
            Filter DriverPerformance records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.DriverPerformance
            The first DriverPerformance record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second DriverPerformance record ordered by the periodEnd field
        driverperformance = await DriverPerformance.prisma().find_first(
            skip=1,
            order={
                'periodEnd': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DriverPerformanceWhereInput] = None,
        cursor: Optional[types.DriverPerformanceWhereUniqueInput] = None,
        include: Optional[types.DriverPerformanceInclude] = None,
        order: Optional[Union[types.DriverPerformanceOrderByInput, List[types.DriverPerformanceOrderByInput]]] = None,
        distinct: Optional[List[types.DriverPerformanceScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single DriverPerformance record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            DriverPerformance filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DriverPerformance model
        order
            Order the returned DriverPerformance records by any field
        distinct
            Filter DriverPerformance records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.DriverPerformance
            The first DriverPerformance record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second DriverPerformance record ordered by the totalDistance field
        driverperformance = await DriverPerformance.prisma().find_first_or_raise(
            skip=1,
            order={
                'totalDistance': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.DriverPerformanceUpdateInput,
        where: types.DriverPerformanceWhereUniqueInput,
        include: Optional[types.DriverPerformanceInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single DriverPerformance record.

        Parameters
        ----------
        data
            DriverPerformance record data specifying what to update
        where
            DriverPerformance filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned DriverPerformance model

        Returns
        -------
        prisma.models.DriverPerformance
            The updated DriverPerformance record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        driverperformance = await DriverPerformance.prisma().update(
            where={
                'id': 'ibbigdigd',
            },
            data={
                # data to update the DriverPerformance record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.DriverPerformanceWhereUniqueInput,
        data: types.DriverPerformanceUpsertInput,
        include: Optional[types.DriverPerformanceInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            DriverPerformance filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned DriverPerformance model

        Returns
        -------
        prisma.models.DriverPerformance
            The created or updated DriverPerformance record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        driverperformance = await DriverPerformance.prisma().upsert(
            where={
                'id': 'bdiiiabbii',
            },
            data={
                'create': {
                    'id': 'bdiiiabbii',
                    'driverId': 'ijdafccef',
                    'periodStart': datetime.datetime.utcnow(),
                    'periodEnd': datetime.datetime.utcnow(),
                    'totalDistance': 280083306.54966,
                },
                'update': {
                    'driverId': 'ijdafccef',
                    'periodStart': datetime.datetime.utcnow(),
                    'periodEnd': datetime.datetime.utcnow(),
                    'totalDistance': 280083306.54966,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.DriverPerformanceUpdateManyMutationInput,
        where: types.DriverPerformanceWhereInput,
    ) -> int:
        """Update multiple DriverPerformance records

        Parameters
        ----------
        data
            DriverPerformance data to update the selected DriverPerformance records to
        where
            Filter to select the DriverPerformance records to update

        Returns
        -------
        int
            The total number of DriverPerformance records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all DriverPerformance records
        total = await DriverPerformance.prisma().update_many(
            data={
                'avgSpeed': 752577037.118766
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DriverPerformanceWhereInput] = None,
        cursor: Optional[types.DriverPerformanceWhereUniqueInput] = None,
    ) -> int:
        """Count the number of DriverPerformance records present in the database

        Parameters
        ----------
        select
            Select the DriverPerformance fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            DriverPerformance filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DriverPerformanceCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await DriverPerformance.prisma().count()

        # results: prisma.types.DriverPerformanceCountAggregateOutput
        results = await DriverPerformance.prisma().count(
            select={
                '_all': True,
                'maxSpeed': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.DriverPerformanceCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DriverPerformanceWhereInput] = None,
        cursor: Optional[types.DriverPerformanceWhereUniqueInput] = None,
    ) -> types.DriverPerformanceCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.DriverPerformanceCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DriverPerformanceWhereInput] = None,
        cursor: Optional[types.DriverPerformanceWhereUniqueInput] = None,
    ) -> Union[int, types.DriverPerformanceCountAggregateOutput]:
        """Count the number of DriverPerformance records present in the database

        Parameters
        ----------
        select
            Select the DriverPerformance fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            DriverPerformance filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DriverPerformanceCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await DriverPerformance.prisma().count()

        # results: prisma.types.DriverPerformanceCountAggregateOutput
        results = await DriverPerformance.prisma().count(
            select={
                '_all': True,
                'hardBrakeCount': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.DriverPerformanceCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.DriverPerformanceWhereInput] = None
    ) -> int:
        """Delete multiple DriverPerformance records.

        Parameters
        ----------
        where
            Optional DriverPerformance filter to find the records to be deleted

        Returns
        -------
        int
            The total number of DriverPerformance records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all DriverPerformance records
        total = await DriverPerformance.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.DriverPerformanceScalarFieldKeys'],
        *,
        where: Optional['types.DriverPerformanceWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.DriverPerformanceAvgAggregateInput'] = None,
        sum: Optional['types.DriverPerformanceSumAggregateInput'] = None,
        min: Optional['types.DriverPerformanceMinAggregateInput'] = None,
        max: Optional['types.DriverPerformanceMaxAggregateInput'] = None,
        having: Optional['types.DriverPerformanceScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.DriverPerformanceCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.DriverPerformanceScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.DriverPerformanceScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.DriverPerformanceGroupByOutput']:
        """Group DriverPerformance records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar DriverPerformance fields to group records by
        where
            DriverPerformance filter to select records
        take
            Limit the maximum number of DriverPerformance records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DriverPerformanceGroupByOutput]
            A list of dictionaries representing the DriverPerformance record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group DriverPerformance records by hardAccelerationCount values
        # and count how many records are in each group
        results = await DriverPerformance.prisma().group_by(
            ['hardAccelerationCount'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class DrivingRecordActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.DrivingRecord]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await DrivingRecord.prisma().query_raw(
            'SELECT * FROM DrivingRecord WHERE id = $1',
            'hgjgibdgd',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.DrivingRecord
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await DrivingRecord.prisma().query_first(
            'SELECT * FROM DrivingRecord WHERE driverId = $1',
            'bcbecjfice',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.DrivingRecordCreateInput,
        include: Optional[types.DrivingRecordInclude] = None
    ) -> _PrismaModelT:
        """Create a new DrivingRecord record.

        Parameters
        ----------
        data
            DrivingRecord record data
        include
            Specifies which relations should be loaded on the returned DrivingRecord model

        Returns
        -------
        prisma.models.DrivingRecord
            The created DrivingRecord record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a DrivingRecord record from just the required fields
        drivingrecord = await DrivingRecord.prisma().create(
            data={
                # data to create a DrivingRecord record
                'driverId': 'bacbebhjjd',
                'vehicleId': 'dfbfaddhe',
                'startTime': datetime.datetime.utcnow(),
                'endTime': datetime.datetime.utcnow(),
                'distance': 1321184815.36973,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.DrivingRecordCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple DrivingRecord records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of DrivingRecord record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await DrivingRecord.prisma().create_many(
            data=[
                {
                    # data to create a DrivingRecord record
                    'driverId': 'bbjbcdfabd',
                    'vehicleId': 'gchfgbcec',
                    'startTime': datetime.datetime.utcnow(),
                    'endTime': datetime.datetime.utcnow(),
                    'distance': 1872952907.179328,
                },
                {
                    # data to create a DrivingRecord record
                    'driverId': 'bibedjhcej',
                    'vehicleId': 'bjcdajabfa',
                    'startTime': datetime.datetime.utcnow(),
                    'endTime': datetime.datetime.utcnow(),
                    'distance': 1277244455.116085,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.DrivingRecordWhereUniqueInput,
        include: Optional[types.DrivingRecordInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single DrivingRecord record.

        Parameters
        ----------
        where
            DrivingRecord filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned DrivingRecord model

        Returns
        -------
        prisma.models.DrivingRecord
            The deleted DrivingRecord record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        drivingrecord = await DrivingRecord.prisma().delete(
            where={
                'id': 'dgbcdaegb',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.DrivingRecordWhereUniqueInput,
        include: Optional[types.DrivingRecordInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique DrivingRecord record.

        Parameters
        ----------
        where
            DrivingRecord filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned DrivingRecord model

        Returns
        -------
        prisma.models.DrivingRecord
            The found DrivingRecord record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        drivingrecord = await DrivingRecord.prisma().find_unique(
            where={
                'id': 'beagfbbjig',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.DrivingRecordWhereUniqueInput,
        include: Optional[types.DrivingRecordInclude] = None
    ) -> _PrismaModelT:
        """Find a unique DrivingRecord record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            DrivingRecord filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned DrivingRecord model

        Returns
        -------
        prisma.models.DrivingRecord
            The found DrivingRecord record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        drivingrecord = await DrivingRecord.prisma().find_unique_or_raise(
            where={
                'id': 'beicihhijb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DrivingRecordWhereInput] = None,
        cursor: Optional[types.DrivingRecordWhereUniqueInput] = None,
        include: Optional[types.DrivingRecordInclude] = None,
        order: Optional[Union[types.DrivingRecordOrderByInput, List[types.DrivingRecordOrderByInput]]] = None,
        distinct: Optional[List[types.DrivingRecordScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple DrivingRecord records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of DrivingRecord records returned
        skip
            Ignore the first N results
        where
            DrivingRecord filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DrivingRecord model
        order
            Order the returned DrivingRecord records by any field
        distinct
            Filter DrivingRecord records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.DrivingRecord]
            The list of all DrivingRecord records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 DrivingRecord records
        drivingrecords = await DrivingRecord.prisma().find_many(take=10)

        # find the first 5 DrivingRecord records ordered by the vehicleId field
        drivingrecords = await DrivingRecord.prisma().find_many(
            take=5,
            order={
                'vehicleId': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DrivingRecordWhereInput] = None,
        cursor: Optional[types.DrivingRecordWhereUniqueInput] = None,
        include: Optional[types.DrivingRecordInclude] = None,
        order: Optional[Union[types.DrivingRecordOrderByInput, List[types.DrivingRecordOrderByInput]]] = None,
        distinct: Optional[List[types.DrivingRecordScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single DrivingRecord record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            DrivingRecord filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DrivingRecord model
        order
            Order the returned DrivingRecord records by any field
        distinct
            Filter DrivingRecord records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.DrivingRecord
            The first DrivingRecord record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second DrivingRecord record ordered by the startTime field
        drivingrecord = await DrivingRecord.prisma().find_first(
            skip=1,
            order={
                'startTime': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DrivingRecordWhereInput] = None,
        cursor: Optional[types.DrivingRecordWhereUniqueInput] = None,
        include: Optional[types.DrivingRecordInclude] = None,
        order: Optional[Union[types.DrivingRecordOrderByInput, List[types.DrivingRecordOrderByInput]]] = None,
        distinct: Optional[List[types.DrivingRecordScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single DrivingRecord record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            DrivingRecord filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DrivingRecord model
        order
            Order the returned DrivingRecord records by any field
        distinct
            Filter DrivingRecord records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.DrivingRecord
            The first DrivingRecord record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second DrivingRecord record ordered by the endTime field
        drivingrecord = await DrivingRecord.prisma().find_first_or_raise(
            skip=1,
            order={
                'endTime': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.DrivingRecordUpdateInput,
        where: types.DrivingRecordWhereUniqueInput,
        include: Optional[types.DrivingRecordInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single DrivingRecord record.

        Parameters
        ----------
        data
            DrivingRecord record data specifying what to update
        where
            DrivingRecord filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned DrivingRecord model

        Returns
        -------
        prisma.models.DrivingRecord
            The updated DrivingRecord record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        drivingrecord = await DrivingRecord.prisma().update(
            where={
                'id': 'fgggcdcjg',
            },
            data={
                # data to update the DrivingRecord record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.DrivingRecordWhereUniqueInput,
        data: types.DrivingRecordUpsertInput,
        include: Optional[types.DrivingRecordInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            DrivingRecord filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned DrivingRecord model

        Returns
        -------
        prisma.models.DrivingRecord
            The created or updated DrivingRecord record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        drivingrecord = await DrivingRecord.prisma().upsert(
            where={
                'id': 'ccjbbjigf',
            },
            data={
                'create': {
                    'id': 'ccjbbjigf',
                    'driverId': 'bibedjhcej',
                    'vehicleId': 'bjcdajabfa',
                    'startTime': datetime.datetime.utcnow(),
                    'endTime': datetime.datetime.utcnow(),
                    'distance': 1277244455.116085,
                },
                'update': {
                    'driverId': 'bibedjhcej',
                    'vehicleId': 'bjcdajabfa',
                    'startTime': datetime.datetime.utcnow(),
                    'endTime': datetime.datetime.utcnow(),
                    'distance': 1277244455.116085,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.DrivingRecordUpdateManyMutationInput,
        where: types.DrivingRecordWhereInput,
    ) -> int:
        """Update multiple DrivingRecord records

        Parameters
        ----------
        data
            DrivingRecord data to update the selected DrivingRecord records to
        where
            Filter to select the DrivingRecord records to update

        Returns
        -------
        int
            The total number of DrivingRecord records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all DrivingRecord records
        total = await DrivingRecord.prisma().update_many(
            data={
                'startLocation': 'bhfaabbaha'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DrivingRecordWhereInput] = None,
        cursor: Optional[types.DrivingRecordWhereUniqueInput] = None,
    ) -> int:
        """Count the number of DrivingRecord records present in the database

        Parameters
        ----------
        select
            Select the DrivingRecord fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            DrivingRecord filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DrivingRecordCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await DrivingRecord.prisma().count()

        # results: prisma.types.DrivingRecordCountAggregateOutput
        results = await DrivingRecord.prisma().count(
            select={
                '_all': True,
                'endLocation': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.DrivingRecordCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DrivingRecordWhereInput] = None,
        cursor: Optional[types.DrivingRecordWhereUniqueInput] = None,
    ) -> types.DrivingRecordCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.DrivingRecordCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DrivingRecordWhereInput] = None,
        cursor: Optional[types.DrivingRecordWhereUniqueInput] = None,
    ) -> Union[int, types.DrivingRecordCountAggregateOutput]:
        """Count the number of DrivingRecord records present in the database

        Parameters
        ----------
        select
            Select the DrivingRecord fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            DrivingRecord filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DrivingRecordCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await DrivingRecord.prisma().count()

        # results: prisma.types.DrivingRecordCountAggregateOutput
        results = await DrivingRecord.prisma().count(
            select={
                '_all': True,
                'distance': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.DrivingRecordCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.DrivingRecordWhereInput] = None
    ) -> int:
        """Delete multiple DrivingRecord records.

        Parameters
        ----------
        where
            Optional DrivingRecord filter to find the records to be deleted

        Returns
        -------
        int
            The total number of DrivingRecord records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all DrivingRecord records
        total = await DrivingRecord.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.DrivingRecordScalarFieldKeys'],
        *,
        where: Optional['types.DrivingRecordWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.DrivingRecordAvgAggregateInput'] = None,
        sum: Optional['types.DrivingRecordSumAggregateInput'] = None,
        min: Optional['types.DrivingRecordMinAggregateInput'] = None,
        max: Optional['types.DrivingRecordMaxAggregateInput'] = None,
        having: Optional['types.DrivingRecordScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.DrivingRecordCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.DrivingRecordScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.DrivingRecordScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.DrivingRecordGroupByOutput']:
        """Group DrivingRecord records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar DrivingRecord fields to group records by
        where
            DrivingRecord filter to select records
        take
            Limit the maximum number of DrivingRecord records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DrivingRecordGroupByOutput]
            A list of dictionaries representing the DrivingRecord record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group DrivingRecord records by avgSpeed values
        # and count how many records are in each group
        results = await DrivingRecord.prisma().group_by(
            ['avgSpeed'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ERPSyncConfigActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.ERPSyncConfig]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await ERPSyncConfig.prisma().query_raw(
            'SELECT * FROM ERPSyncConfig WHERE id = $1',
            'ebajedhhf',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.ERPSyncConfig
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await ERPSyncConfig.prisma().query_first(
            'SELECT * FROM ERPSyncConfig WHERE name = $1',
            'jajacedge',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ERPSyncConfigCreateInput,
        include: Optional[types.ERPSyncConfigInclude] = None
    ) -> _PrismaModelT:
        """Create a new ERPSyncConfig record.

        Parameters
        ----------
        data
            ERPSyncConfig record data
        include
            Specifies which relations should be loaded on the returned ERPSyncConfig model

        Returns
        -------
        prisma.models.ERPSyncConfig
            The created ERPSyncConfig record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a ERPSyncConfig record from just the required fields
        erpsyncconfig = await ERPSyncConfig.prisma().create(
            data={
                # data to create a ERPSyncConfig record
                'name': 'hffgbabgf',
                'erpSystem': enums.ERPSystemType.SAP,
                'connectionUrl': 'biacbiieja',
                'username': 'cjejbgbff',
                'password': 'fgeahddae',
                'organizationId': 'diageigcf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ERPSyncConfigCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple ERPSyncConfig records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of ERPSyncConfig record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await ERPSyncConfig.prisma().create_many(
            data=[
                {
                    # data to create a ERPSyncConfig record
                    'name': 'badagbgeha',
                    'erpSystem': enums.ERPSystemType.SAP,
                    'connectionUrl': 'ibgebbjch',
                    'username': 'baieajjiee',
                    'password': 'bahjhaccfd',
                    'organizationId': 'hffhfabhi',
                },
                {
                    # data to create a ERPSyncConfig record
                    'name': 'bbcigiadhb',
                    'erpSystem': enums.ERPSystemType.SAP,
                    'connectionUrl': 'cfjagbbae',
                    'username': 'bbbfhdidef',
                    'password': 'bdadhibhec',
                    'organizationId': 'bfhdjaiejf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ERPSyncConfigWhereUniqueInput,
        include: Optional[types.ERPSyncConfigInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single ERPSyncConfig record.

        Parameters
        ----------
        where
            ERPSyncConfig filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned ERPSyncConfig model

        Returns
        -------
        prisma.models.ERPSyncConfig
            The deleted ERPSyncConfig record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        erpsyncconfig = await ERPSyncConfig.prisma().delete(
            where={
                'id': 'bbjfijjadg',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ERPSyncConfigWhereUniqueInput,
        include: Optional[types.ERPSyncConfigInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique ERPSyncConfig record.

        Parameters
        ----------
        where
            ERPSyncConfig filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ERPSyncConfig model

        Returns
        -------
        prisma.models.ERPSyncConfig
            The found ERPSyncConfig record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        erpsyncconfig = await ERPSyncConfig.prisma().find_unique(
            where={
                'id': 'hdjacbehh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ERPSyncConfigWhereUniqueInput,
        include: Optional[types.ERPSyncConfigInclude] = None
    ) -> _PrismaModelT:
        """Find a unique ERPSyncConfig record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            ERPSyncConfig filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ERPSyncConfig model

        Returns
        -------
        prisma.models.ERPSyncConfig
            The found ERPSyncConfig record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        erpsyncconfig = await ERPSyncConfig.prisma().find_unique_or_raise(
            where={
                'id': 'bhcccbeaba',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncConfigWhereInput] = None,
        cursor: Optional[types.ERPSyncConfigWhereUniqueInput] = None,
        include: Optional[types.ERPSyncConfigInclude] = None,
        order: Optional[Union[types.ERPSyncConfigOrderByInput, List[types.ERPSyncConfigOrderByInput]]] = None,
        distinct: Optional[List[types.ERPSyncConfigScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple ERPSyncConfig records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of ERPSyncConfig records returned
        skip
            Ignore the first N results
        where
            ERPSyncConfig filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ERPSyncConfig model
        order
            Order the returned ERPSyncConfig records by any field
        distinct
            Filter ERPSyncConfig records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.ERPSyncConfig]
            The list of all ERPSyncConfig records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 ERPSyncConfig records
        erpsyncconfigs = await ERPSyncConfig.prisma().find_many(take=10)

        # find the first 5 ERPSyncConfig records ordered by the erpSystem field
        erpsyncconfigs = await ERPSyncConfig.prisma().find_many(
            take=5,
            order={
                'erpSystem': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncConfigWhereInput] = None,
        cursor: Optional[types.ERPSyncConfigWhereUniqueInput] = None,
        include: Optional[types.ERPSyncConfigInclude] = None,
        order: Optional[Union[types.ERPSyncConfigOrderByInput, List[types.ERPSyncConfigOrderByInput]]] = None,
        distinct: Optional[List[types.ERPSyncConfigScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single ERPSyncConfig record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ERPSyncConfig filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ERPSyncConfig model
        order
            Order the returned ERPSyncConfig records by any field
        distinct
            Filter ERPSyncConfig records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ERPSyncConfig
            The first ERPSyncConfig record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ERPSyncConfig record ordered by the connectionUrl field
        erpsyncconfig = await ERPSyncConfig.prisma().find_first(
            skip=1,
            order={
                'connectionUrl': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncConfigWhereInput] = None,
        cursor: Optional[types.ERPSyncConfigWhereUniqueInput] = None,
        include: Optional[types.ERPSyncConfigInclude] = None,
        order: Optional[Union[types.ERPSyncConfigOrderByInput, List[types.ERPSyncConfigOrderByInput]]] = None,
        distinct: Optional[List[types.ERPSyncConfigScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single ERPSyncConfig record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ERPSyncConfig filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ERPSyncConfig model
        order
            Order the returned ERPSyncConfig records by any field
        distinct
            Filter ERPSyncConfig records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ERPSyncConfig
            The first ERPSyncConfig record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ERPSyncConfig record ordered by the username field
        erpsyncconfig = await ERPSyncConfig.prisma().find_first_or_raise(
            skip=1,
            order={
                'username': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ERPSyncConfigUpdateInput,
        where: types.ERPSyncConfigWhereUniqueInput,
        include: Optional[types.ERPSyncConfigInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single ERPSyncConfig record.

        Parameters
        ----------
        data
            ERPSyncConfig record data specifying what to update
        where
            ERPSyncConfig filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned ERPSyncConfig model

        Returns
        -------
        prisma.models.ERPSyncConfig
            The updated ERPSyncConfig record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        erpsyncconfig = await ERPSyncConfig.prisma().update(
            where={
                'id': 'bcgjbdgjdj',
            },
            data={
                # data to update the ERPSyncConfig record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ERPSyncConfigWhereUniqueInput,
        data: types.ERPSyncConfigUpsertInput,
        include: Optional[types.ERPSyncConfigInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            ERPSyncConfig filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned ERPSyncConfig model

        Returns
        -------
        prisma.models.ERPSyncConfig
            The created or updated ERPSyncConfig record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        erpsyncconfig = await ERPSyncConfig.prisma().upsert(
            where={
                'id': 'fhdbhifae',
            },
            data={
                'create': {
                    'id': 'fhdbhifae',
                    'name': 'bbcigiadhb',
                    'erpSystem': enums.ERPSystemType.SAP,
                    'connectionUrl': 'cfjagbbae',
                    'username': 'bbbfhdidef',
                    'password': 'bdadhibhec',
                    'organizationId': 'bfhdjaiejf',
                },
                'update': {
                    'name': 'bbcigiadhb',
                    'erpSystem': enums.ERPSystemType.SAP,
                    'connectionUrl': 'cfjagbbae',
                    'username': 'bbbfhdidef',
                    'password': 'bdadhibhec',
                    'organizationId': 'bfhdjaiejf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ERPSyncConfigUpdateManyMutationInput,
        where: types.ERPSyncConfigWhereInput,
    ) -> int:
        """Update multiple ERPSyncConfig records

        Parameters
        ----------
        data
            ERPSyncConfig data to update the selected ERPSyncConfig records to
        where
            Filter to select the ERPSyncConfig records to update

        Returns
        -------
        int
            The total number of ERPSyncConfig records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all ERPSyncConfig records
        total = await ERPSyncConfig.prisma().update_many(
            data={
                'password': 'beeacgfcej'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncConfigWhereInput] = None,
        cursor: Optional[types.ERPSyncConfigWhereUniqueInput] = None,
    ) -> int:
        """Count the number of ERPSyncConfig records present in the database

        Parameters
        ----------
        select
            Select the ERPSyncConfig fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ERPSyncConfig filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ERPSyncConfigCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ERPSyncConfig.prisma().count()

        # results: prisma.types.ERPSyncConfigCountAggregateOutput
        results = await ERPSyncConfig.prisma().count(
            select={
                '_all': True,
                'syncDirection': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ERPSyncConfigCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncConfigWhereInput] = None,
        cursor: Optional[types.ERPSyncConfigWhereUniqueInput] = None,
    ) -> types.ERPSyncConfigCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ERPSyncConfigCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncConfigWhereInput] = None,
        cursor: Optional[types.ERPSyncConfigWhereUniqueInput] = None,
    ) -> Union[int, types.ERPSyncConfigCountAggregateOutput]:
        """Count the number of ERPSyncConfig records present in the database

        Parameters
        ----------
        select
            Select the ERPSyncConfig fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ERPSyncConfig filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ERPSyncConfigCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ERPSyncConfig.prisma().count()

        # results: prisma.types.ERPSyncConfigCountAggregateOutput
        results = await ERPSyncConfig.prisma().count(
            select={
                '_all': True,
                'syncInterval': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ERPSyncConfigCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ERPSyncConfigWhereInput] = None
    ) -> int:
        """Delete multiple ERPSyncConfig records.

        Parameters
        ----------
        where
            Optional ERPSyncConfig filter to find the records to be deleted

        Returns
        -------
        int
            The total number of ERPSyncConfig records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all ERPSyncConfig records
        total = await ERPSyncConfig.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ERPSyncConfigScalarFieldKeys'],
        *,
        where: Optional['types.ERPSyncConfigWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ERPSyncConfigAvgAggregateInput'] = None,
        sum: Optional['types.ERPSyncConfigSumAggregateInput'] = None,
        min: Optional['types.ERPSyncConfigMinAggregateInput'] = None,
        max: Optional['types.ERPSyncConfigMaxAggregateInput'] = None,
        having: Optional['types.ERPSyncConfigScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ERPSyncConfigCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ERPSyncConfigScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ERPSyncConfigScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ERPSyncConfigGroupByOutput']:
        """Group ERPSyncConfig records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar ERPSyncConfig fields to group records by
        where
            ERPSyncConfig filter to select records
        take
            Limit the maximum number of ERPSyncConfig records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ERPSyncConfigGroupByOutput]
            A list of dictionaries representing the ERPSyncConfig record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group ERPSyncConfig records by syncEnabled values
        # and count how many records are in each group
        results = await ERPSyncConfig.prisma().group_by(
            ['syncEnabled'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ERPSyncLogActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.ERPSyncLog]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await ERPSyncLog.prisma().query_raw(
            'SELECT * FROM ERPSyncLog WHERE id = $1',
            'bbifhdiicc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.ERPSyncLog
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await ERPSyncLog.prisma().query_first(
            'SELECT * FROM ERPSyncLog WHERE configId = $1',
            'bgjeccejad',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ERPSyncLogCreateInput,
        include: Optional[types.ERPSyncLogInclude] = None
    ) -> _PrismaModelT:
        """Create a new ERPSyncLog record.

        Parameters
        ----------
        data
            ERPSyncLog record data
        include
            Specifies which relations should be loaded on the returned ERPSyncLog model

        Returns
        -------
        prisma.models.ERPSyncLog
            The created ERPSyncLog record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a ERPSyncLog record from just the required fields
        erpsynclog = await ERPSyncLog.prisma().create(
            data={
                # data to create a ERPSyncLog record
                'configId': 'bjagdgabbg',
                'status': enums.SyncStatusType.PENDING,
                'startTime': datetime.datetime.utcnow(),
                'direction': enums.SyncDirectionType.IMPORT,
                'organizationId': 'bjbbcffdij',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ERPSyncLogCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple ERPSyncLog records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of ERPSyncLog record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await ERPSyncLog.prisma().create_many(
            data=[
                {
                    # data to create a ERPSyncLog record
                    'configId': 'begcgchdi',
                    'status': enums.SyncStatusType.PENDING,
                    'startTime': datetime.datetime.utcnow(),
                    'direction': enums.SyncDirectionType.IMPORT,
                    'organizationId': 'bhbjceagbb',
                },
                {
                    # data to create a ERPSyncLog record
                    'configId': 'bjeifffjdg',
                    'status': enums.SyncStatusType.PENDING,
                    'startTime': datetime.datetime.utcnow(),
                    'direction': enums.SyncDirectionType.IMPORT,
                    'organizationId': 'bdidcfdfjd',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ERPSyncLogWhereUniqueInput,
        include: Optional[types.ERPSyncLogInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single ERPSyncLog record.

        Parameters
        ----------
        where
            ERPSyncLog filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned ERPSyncLog model

        Returns
        -------
        prisma.models.ERPSyncLog
            The deleted ERPSyncLog record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        erpsynclog = await ERPSyncLog.prisma().delete(
            where={
                'id': 'dfeggejja',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ERPSyncLogWhereUniqueInput,
        include: Optional[types.ERPSyncLogInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique ERPSyncLog record.

        Parameters
        ----------
        where
            ERPSyncLog filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ERPSyncLog model

        Returns
        -------
        prisma.models.ERPSyncLog
            The found ERPSyncLog record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        erpsynclog = await ERPSyncLog.prisma().find_unique(
            where={
                'id': 'gehbgghbj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ERPSyncLogWhereUniqueInput,
        include: Optional[types.ERPSyncLogInclude] = None
    ) -> _PrismaModelT:
        """Find a unique ERPSyncLog record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            ERPSyncLog filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ERPSyncLog model

        Returns
        -------
        prisma.models.ERPSyncLog
            The found ERPSyncLog record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        erpsynclog = await ERPSyncLog.prisma().find_unique_or_raise(
            where={
                'id': 'dfhaijeie',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncLogWhereInput] = None,
        cursor: Optional[types.ERPSyncLogWhereUniqueInput] = None,
        include: Optional[types.ERPSyncLogInclude] = None,
        order: Optional[Union[types.ERPSyncLogOrderByInput, List[types.ERPSyncLogOrderByInput]]] = None,
        distinct: Optional[List[types.ERPSyncLogScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple ERPSyncLog records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of ERPSyncLog records returned
        skip
            Ignore the first N results
        where
            ERPSyncLog filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ERPSyncLog model
        order
            Order the returned ERPSyncLog records by any field
        distinct
            Filter ERPSyncLog records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.ERPSyncLog]
            The list of all ERPSyncLog records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 ERPSyncLog records
        erpsynclogs = await ERPSyncLog.prisma().find_many(take=10)

        # find the first 5 ERPSyncLog records ordered by the status field
        erpsynclogs = await ERPSyncLog.prisma().find_many(
            take=5,
            order={
                'status': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncLogWhereInput] = None,
        cursor: Optional[types.ERPSyncLogWhereUniqueInput] = None,
        include: Optional[types.ERPSyncLogInclude] = None,
        order: Optional[Union[types.ERPSyncLogOrderByInput, List[types.ERPSyncLogOrderByInput]]] = None,
        distinct: Optional[List[types.ERPSyncLogScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single ERPSyncLog record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ERPSyncLog filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ERPSyncLog model
        order
            Order the returned ERPSyncLog records by any field
        distinct
            Filter ERPSyncLog records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ERPSyncLog
            The first ERPSyncLog record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ERPSyncLog record ordered by the startTime field
        erpsynclog = await ERPSyncLog.prisma().find_first(
            skip=1,
            order={
                'startTime': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncLogWhereInput] = None,
        cursor: Optional[types.ERPSyncLogWhereUniqueInput] = None,
        include: Optional[types.ERPSyncLogInclude] = None,
        order: Optional[Union[types.ERPSyncLogOrderByInput, List[types.ERPSyncLogOrderByInput]]] = None,
        distinct: Optional[List[types.ERPSyncLogScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single ERPSyncLog record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ERPSyncLog filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ERPSyncLog model
        order
            Order the returned ERPSyncLog records by any field
        distinct
            Filter ERPSyncLog records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ERPSyncLog
            The first ERPSyncLog record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ERPSyncLog record ordered by the endTime field
        erpsynclog = await ERPSyncLog.prisma().find_first_or_raise(
            skip=1,
            order={
                'endTime': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ERPSyncLogUpdateInput,
        where: types.ERPSyncLogWhereUniqueInput,
        include: Optional[types.ERPSyncLogInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single ERPSyncLog record.

        Parameters
        ----------
        data
            ERPSyncLog record data specifying what to update
        where
            ERPSyncLog filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned ERPSyncLog model

        Returns
        -------
        prisma.models.ERPSyncLog
            The updated ERPSyncLog record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        erpsynclog = await ERPSyncLog.prisma().update(
            where={
                'id': 'gbcdjgicb',
            },
            data={
                # data to update the ERPSyncLog record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ERPSyncLogWhereUniqueInput,
        data: types.ERPSyncLogUpsertInput,
        include: Optional[types.ERPSyncLogInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            ERPSyncLog filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned ERPSyncLog model

        Returns
        -------
        prisma.models.ERPSyncLog
            The created or updated ERPSyncLog record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        erpsynclog = await ERPSyncLog.prisma().upsert(
            where={
                'id': 'biaibdagac',
            },
            data={
                'create': {
                    'id': 'biaibdagac',
                    'configId': 'bjeifffjdg',
                    'status': enums.SyncStatusType.PENDING,
                    'startTime': datetime.datetime.utcnow(),
                    'direction': enums.SyncDirectionType.IMPORT,
                    'organizationId': 'bdidcfdfjd',
                },
                'update': {
                    'configId': 'bjeifffjdg',
                    'status': enums.SyncStatusType.PENDING,
                    'startTime': datetime.datetime.utcnow(),
                    'direction': enums.SyncDirectionType.IMPORT,
                    'organizationId': 'bdidcfdfjd',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ERPSyncLogUpdateManyMutationInput,
        where: types.ERPSyncLogWhereInput,
    ) -> int:
        """Update multiple ERPSyncLog records

        Parameters
        ----------
        data
            ERPSyncLog data to update the selected ERPSyncLog records to
        where
            Filter to select the ERPSyncLog records to update

        Returns
        -------
        int
            The total number of ERPSyncLog records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all ERPSyncLog records
        total = await ERPSyncLog.prisma().update_many(
            data={
                'direction': enums.SyncDirectionType.IMPORT
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncLogWhereInput] = None,
        cursor: Optional[types.ERPSyncLogWhereUniqueInput] = None,
    ) -> int:
        """Count the number of ERPSyncLog records present in the database

        Parameters
        ----------
        select
            Select the ERPSyncLog fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ERPSyncLog filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ERPSyncLogCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ERPSyncLog.prisma().count()

        # results: prisma.types.ERPSyncLogCountAggregateOutput
        results = await ERPSyncLog.prisma().count(
            select={
                '_all': True,
                'totalItems': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ERPSyncLogCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncLogWhereInput] = None,
        cursor: Optional[types.ERPSyncLogWhereUniqueInput] = None,
    ) -> types.ERPSyncLogCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ERPSyncLogCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ERPSyncLogWhereInput] = None,
        cursor: Optional[types.ERPSyncLogWhereUniqueInput] = None,
    ) -> Union[int, types.ERPSyncLogCountAggregateOutput]:
        """Count the number of ERPSyncLog records present in the database

        Parameters
        ----------
        select
            Select the ERPSyncLog fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ERPSyncLog filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ERPSyncLogCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ERPSyncLog.prisma().count()

        # results: prisma.types.ERPSyncLogCountAggregateOutput
        results = await ERPSyncLog.prisma().count(
            select={
                '_all': True,
                'processedItems': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ERPSyncLogCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ERPSyncLogWhereInput] = None
    ) -> int:
        """Delete multiple ERPSyncLog records.

        Parameters
        ----------
        where
            Optional ERPSyncLog filter to find the records to be deleted

        Returns
        -------
        int
            The total number of ERPSyncLog records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all ERPSyncLog records
        total = await ERPSyncLog.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ERPSyncLogScalarFieldKeys'],
        *,
        where: Optional['types.ERPSyncLogWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ERPSyncLogAvgAggregateInput'] = None,
        sum: Optional['types.ERPSyncLogSumAggregateInput'] = None,
        min: Optional['types.ERPSyncLogMinAggregateInput'] = None,
        max: Optional['types.ERPSyncLogMaxAggregateInput'] = None,
        having: Optional['types.ERPSyncLogScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ERPSyncLogCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ERPSyncLogScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ERPSyncLogScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ERPSyncLogGroupByOutput']:
        """Group ERPSyncLog records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar ERPSyncLog fields to group records by
        where
            ERPSyncLog filter to select records
        take
            Limit the maximum number of ERPSyncLog records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ERPSyncLogGroupByOutput]
            A list of dictionaries representing the ERPSyncLog record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group ERPSyncLog records by successItems values
        # and count how many records are in each group
        results = await ERPSyncLog.prisma().group_by(
            ['successItems'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models