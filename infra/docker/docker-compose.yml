version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15
    container_name: cargoro-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cargoro
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시 서버
  redis:
    image: redis:7-alpine
    container_name: cargoro-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 백엔드 API 게이트웨이
  api-gateway:
    build:
      context: ../../backend/gateway
      dockerfile: Dockerfile
    container_name: cargoro-api-gateway
    restart: always
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/cargoro
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # 메시지 브로커
  rabbitmq:
    image: rabbitmq:3-management
    container_name: cargoro-rabbitmq
    restart: always
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # 관리자 UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 백그라운드 작업 처리
  worker:
    build:
      context: ../../backend/jobs
      dockerfile: Dockerfile
    container_name: cargoro-worker
    restart: always
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/cargoro
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: 