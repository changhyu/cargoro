apiVersion: v1
kind: Namespace
metadata:
  name: cargoro
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cargoro-config
  namespace: cargoro
data:
  DATABASE_HOST: "postgres-service"
  REDIS_HOST: "redis-service"
  GATEWAY_URL: "http://gateway-service:8000"
---
apiVersion: v1
kind: Secret
metadata:
  name: cargoro-secrets
  namespace: cargoro
type: Opaque
stringData:
  DATABASE_URL: "postgresql://cargoro:cargoro123@postgres-service:5432/cargoro"
  REDIS_URL: "redis://redis-service:6379"
  SECRET_KEY: "your-secret-key-here"
  CLERK_SECRET_KEY: "your-clerk-secret-key"
---
# PostgreSQL
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: cargoro
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: cargoro
        - name: POSTGRES_USER
          value: cargoro
        - name: POSTGRES_PASSWORD
          value: cargoro123
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: cargoro
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
---
# Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: cargoro
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: cargoro
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
# GraphQL Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  namespace: cargoro
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: gateway
        image: cargoro/gateway:latest
        ports:
        - containerPort: 8000
        env:
        - name: CORE_API_URL
          value: "http://core-api-service:8001"
        - name: REPAIR_API_URL
          value: "http://repair-api-service:8002"
        - name: FLEET_API_URL
          value: "http://fleet-api-service:8003"
        - name: PARTS_API_URL
          value: "http://parts-api-service:8004"
---
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
  namespace: cargoro
spec:
  selector:
    app: gateway
  ports:
  - port: 8000
    targetPort: 8000
---
# Core API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: core-api
  namespace: cargoro
spec:
  replicas: 2
  selector:
    matchLabels:
      app: core-api
  template:
    metadata:
      labels:
        app: core-api
    spec:
      containers:
      - name: core-api
        image: cargoro/core-api:latest
        ports:
        - containerPort: 8001
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: cargoro-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: cargoro-secrets
              key: REDIS_URL
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: cargoro-secrets
              key: SECRET_KEY
---
apiVersion: v1
kind: Service
metadata:
  name: core-api-service
  namespace: cargoro
spec:
  selector:
    app: core-api
  ports:
  - port: 8001
    targetPort: 8001
---
# Workshop Web
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workshop-web
  namespace: cargoro
spec:
  replicas: 2
  selector:
    matchLabels:
      app: workshop-web
  template:
    metadata:
      labels:
        app: workshop-web
    spec:
      containers:
      - name: workshop-web
        image: cargoro/workshop-web:latest
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "http://gateway-service:8000/graphql"
        - name: CLERK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: cargoro-secrets
              key: CLERK_SECRET_KEY
---
apiVersion: v1
kind: Service
metadata:
  name: workshop-web-service
  namespace: cargoro
spec:
  selector:
    app: workshop-web
  ports:
  - port: 3000
    targetPort: 3000
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cargoro-ingress
  namespace: cargoro
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - api.cargoro.com
    - workshop.cargoro.com
    - fleet.cargoro.com
    - parts.cargoro.com
    - admin.cargoro.com
    secretName: cargoro-tls
  rules:
  - host: api.cargoro.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: gateway-service
            port:
              number: 8000
  - host: workshop.cargoro.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: workshop-web-service
            port:
              number: 3000
  - host: fleet.cargoro.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fleet-web-service
            port:
              number: 3001
  - host: parts.cargoro.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: parts-web-service
            port:
              number: 3002
  - host: admin.cargoro.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: superadmin-web-service
            port:
              number: 3003
