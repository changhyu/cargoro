name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 린팅 및 테스트
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [workshop-web, fleet-manager-web, parts-web, superadmin-web]
    
    steps:
    - uses: actions/checkout@v3
    
    - uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Lint
      run: pnpm run lint --filter=@cargoro/${{ matrix.app }}
    
    - name: Type check
      run: pnpm run typecheck --filter=@cargoro/${{ matrix.app }}
    
    - name: Test
      run: pnpm run test --filter=@cargoro/${{ matrix.app }}
    
    - name: Build
      run: pnpm run build --filter=@cargoro/${{ matrix.app }}

  # Python 백엔드 테스트
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run tests
      run: |
        cd backend
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3

  # Docker 이미지 빌드 및 푸시
  build-and-push:
    needs: [test, test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        include:
          - app: workshop-web
            dockerfile: ./apps/workshop-web/Dockerfile
          - app: fleet-manager-web
            dockerfile: ./apps/fleet-manager-web/Dockerfile
          - app: parts-web
            dockerfile: ./apps/parts-web/Dockerfile
          - app: superadmin-web
            dockerfile: ./apps/superadmin-web/Dockerfile
          - app: gateway
            dockerfile: ./backend/gateway/Dockerfile
          - app: core-api
            dockerfile: ./backend/services/core-api/Dockerfile
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Kubernetes 배포
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
    
    - name: Update image tags
      run: |
        cd infra/k8s
        kubectl set image deployment/workshop-web workshop-web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/workshop-web:sha-${GITHUB_SHA::7} -n cargoro
        kubectl set image deployment/fleet-manager-web fleet-manager-web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/fleet-manager-web:sha-${GITHUB_SHA::7} -n cargoro
        kubectl set image deployment/parts-web parts-web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/parts-web:sha-${GITHUB_SHA::7} -n cargoro
        kubectl set image deployment/superadmin-web superadmin-web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/superadmin-web:sha-${GITHUB_SHA::7} -n cargoro
        kubectl set image deployment/gateway gateway=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:sha-${GITHUB_SHA::7} -n cargoro
        kubectl set image deployment/core-api core-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/core-api:sha-${GITHUB_SHA::7} -n cargoro
    
    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/workshop-web -n cargoro
        kubectl rollout status deployment/gateway -n cargoro
        kubectl rollout status deployment/core-api -n cargoro

  # 슬랙 알림
  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          배포 상태: ${{ job.status }}
          커밋: ${{ github.sha }}
          작성자: ${{ github.actor }}
          메시지: ${{ github.event.head_commit.message }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
