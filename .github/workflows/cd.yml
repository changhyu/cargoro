name: CD - CarGoro Platform

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.vscode/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - canary
          - blue-green

env:
  NODE_VERSION: 18
  PNPM_VERSION: 8.12.0
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/cargoro

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deployment_type: ${{ steps.env.outputs.deployment_type }}
      is_production: ${{ steps.env.outputs.is_production }}
    steps:
      - name: Set environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deployment_type=${{ inputs.deployment_type }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "deployment_type=rolling" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deployment_type=rolling" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            echo "is_production=true" >> $GITHUB_OUTPUT
          else
            echo "is_production=false" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: [determine-environment]
    environment: ${{ needs.determine-environment.outputs.environment }}
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install pnpm manually
        run: |
          npm install -g pnpm@${{ env.PNPM_VERSION }}
          pnpm --version

      - name: Debug working directory
        run: |
          echo "Current working directory: $(pwd)"
          echo "GitHub workspace: $GITHUB_WORKSPACE"
          echo "Directory contents:"
          ls -la
          echo "Looking for pnpm-lock.yaml:"
          find . -name "pnpm-lock.yaml" -type f 2>/dev/null || echo "No pnpm-lock.yaml found"

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "Installing with frozen lockfile..."
            pnpm install --frozen-lockfile
          else
            echo "Warning: pnpm-lock.yaml not found, installing without frozen lockfile..."
            pnpm install
          fi

      - name: Generate Prisma client
        run: pnpm prisma generate --filter @cargoro/database

      - name: Run tests
        run: pnpm test
        env:
          NODE_ENV: test

      - name: Build applications
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/Dockerfile.multi-stage
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            ENVIRONMENT=${{ needs.determine-environment.outputs.environment }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test]
    environment: ${{ needs.determine-environment.outputs.environment }}
    if: needs.determine-environment.outputs.environment == 'production' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd infra/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd infra/terraform
          terraform plan -var="environment=${{ needs.determine-environment.outputs.environment }}" -out=tfplan

      - name: Terraform Apply
        if: needs.determine-environment.outputs.is_production == 'true'
        run: |
          cd infra/terraform
          terraform apply -auto-approve tfplan

  deploy-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test, deploy-infrastructure]
    environment: ${{ needs.determine-environment.outputs.environment }}
    if: always() && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes context
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config use-context ${{ vars.K8S_CONTEXT }}

      - name: Create namespace if not exists
        run: |
          export KUBECONFIG=kubeconfig
          kubectl create namespace cargoro-${{ needs.determine-environment.outputs.environment }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with Rolling Update
        if: inputs.deployment_type == 'rolling' || inputs.deployment_type == ''
        run: |
          export KUBECONFIG=kubeconfig
          cd infra/k8s
          helm upgrade --install cargoro-${{ needs.determine-environment.outputs.environment }} . \
            --namespace cargoro-${{ needs.determine-environment.outputs.environment }} \
            --values values-${{ needs.determine-environment.outputs.environment }}.yaml \
            --set global.image.tag=${{ needs.build-and-test.outputs.image-tag }} \
            --set global.image.repository=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set global.environment=${{ needs.determine-environment.outputs.environment }} \
            --atomic \
            --timeout 15m \
            --wait

      - name: Deploy with Canary Strategy
        if: inputs.deployment_type == 'canary'
        run: |
          export KUBECONFIG=kubeconfig
          cd infra/k8s

          # Deploy canary version (10% traffic)
          helm upgrade --install cargoro-${{ needs.determine-environment.outputs.environment }}-canary . \
            --namespace cargoro-${{ needs.determine-environment.outputs.environment }} \
            --values values-${{ needs.determine-environment.outputs.environment }}.yaml \
            --values values-canary.yaml \
            --set global.image.tag=${{ needs.build-and-test.outputs.image-tag }} \
            --set global.image.repository=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set global.environment=${{ needs.determine-environment.outputs.environment }} \
            --set canary.enabled=true \
            --set canary.weight=10 \
            --atomic \
            --timeout 10m \
            --wait

      - name: Deploy with Blue-Green Strategy
        if: inputs.deployment_type == 'blue-green'
        run: |
          export KUBECONFIG=kubeconfig
          cd infra/k8s

          # Deploy to green environment
          helm upgrade --install cargoro-${{ needs.determine-environment.outputs.environment }}-green . \
            --namespace cargoro-${{ needs.determine-environment.outputs.environment }} \
            --values values-${{ needs.determine-environment.outputs.environment }}.yaml \
            --values values-blue-green.yaml \
            --set global.image.tag=${{ needs.build-and-test.outputs.image-tag }} \
            --set global.image.repository=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set global.environment=${{ needs.determine-environment.outputs.environment }} \
            --set blueGreen.slot=green \
            --atomic \
            --timeout 10m \
            --wait

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-kubernetes]
    steps:
      - name: Wait for deployment to stabilize
        run: sleep 60

      - name: Health check
        run: |
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            HEALTH_URL="https://api.cargoro.com/health"
          else
            HEALTH_URL="https://api-${{ needs.determine-environment.outputs.environment }}.cargoro.com/health"
          fi

          for i in {1..10}; do
            if curl -f "$HEALTH_URL"; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check failed, retrying in 30s..."
            sleep 30
          done
          echo "Health check failed after 10 attempts"
          exit 1

      - name: Run smoke tests
        run: |
          # Add smoke tests here
          echo "Running smoke tests..."
          # Example: API endpoint tests, database connectivity, etc.

  promote-canary:
    name: Promote Canary
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-kubernetes, health-check]
    if: inputs.deployment_type == 'canary' && needs.health-check.result == 'success'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}-canary-promotion
      url: ${{ steps.get-url.outputs.url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl and Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes context
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Promote canary to 100%
        run: |
          export KUBECONFIG=kubeconfig
          cd infra/k8s
          helm upgrade cargoro-${{ needs.determine-environment.outputs.environment }} . \
            --namespace cargoro-${{ needs.determine-environment.outputs.environment }} \
            --reuse-values \
            --set canary.weight=100 \
            --wait

      - name: Cleanup canary deployment
        run: |
          export KUBECONFIG=kubeconfig
          helm uninstall cargoro-${{ needs.determine-environment.outputs.environment }}-canary \
            --namespace cargoro-${{ needs.determine-environment.outputs.environment }}

  switch-blue-green:
    name: Switch Blue-Green
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-kubernetes, health-check]
    if: inputs.deployment_type == 'blue-green' && needs.health-check.result == 'success'
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}-blue-green-switch
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl and Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes context
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Switch traffic to green
        run: |
          export KUBECONFIG=kubeconfig
          cd infra/k8s
          # Update ingress to point to green
          kubectl patch ingress cargoro-ingress \
            --namespace cargoro-${{ needs.determine-environment.outputs.environment }} \
            --type='merge' \
            --patch='{"spec":{"rules":[{"host":"api.cargoro.com","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"cargoro-green","port":{"number":80}}}}]}}]}}'

      - name: Cleanup blue deployment
        run: |
          export KUBECONFIG=kubeconfig
          helm uninstall cargoro-${{ needs.determine-environment.outputs.environment }}-blue \
            --namespace cargoro-${{ needs.determine-environment.outputs.environment }} || true

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-test, deploy-kubernetes, health-check]
    if: always()
    steps:
      - name: Set deployment status
        id: status
        run: |
          if [[ "${{ needs.health-check.result }}" == "success" ]]; then
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Get deployment URL
        id: url
        run: |
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            echo "url=https://api.cargoro.com" >> $GITHUB_OUTPUT
          else
            echo "url=https://api-${{ needs.determine-environment.outputs.environment }}.cargoro.com" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ steps.status.outputs.status }} CarGoro 배포 완료",
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.color }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ needs.determine-environment.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Deployment Type",
                      "value": "${{ inputs.deployment_type || 'rolling' }}",
                      "short": true
                    },
                    {
                      "title": "Image Tag",
                      "value": "${{ needs.build-and-test.outputs.image-tag }}",
                      "short": true
                    },
                    {
                      "title": "Deployed by",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "URL",
                      "value": "${{ steps.url.outputs.url }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
