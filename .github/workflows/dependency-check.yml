name: 의존성 보안 검사

on:
  schedule:
    - cron: '0 4 * * 1'  # 매주 월요일 04:00 UTC
  push:
    branches: [main]
    paths:
      - '**/package.json'
      - 'pnpm-lock.yaml'
      - '**/requirements.txt'
      - '**/pyproject.toml'
  pull_request:
    paths:
      - '**/package.json'
      - 'pnpm-lock.yaml'
      - '**/requirements.txt'
      - '**/pyproject.toml'
  workflow_dispatch:

jobs:
  npm-audit:
    name: JavaScript 의존성 검사
    runs-on: ubuntu-latest
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: pnpm 설정
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: 의존성 설치
        run: pnpm install

      - name: pnpm audit 실행
        run: pnpm audit --audit-level=high --format=json > js-audit-results.json || true

      - name: 결과 분석
        run: |
          if [ -s js-audit-results.json ]; then
            echo "JavaScript 의존성에 보안 취약점이 발견되었습니다:"
            cat js-audit-results.json | jq '.advisories | keys[] as $k | .[$k] | { "모듈": .module_name, "취약점": .title, "심각도": .severity, "버전": .findings[0].version, "패치 버전": .patched_versions }'
            echo "::warning::JavaScript 의존성에서 보안 취약점이 발견되었습니다. 결과를 확인하세요."
          else
            echo "JavaScript 의존성에 심각한 취약점이 없습니다."
          fi

      - name: 결과 업로드
        uses: actions/upload-artifact@v3
        with:
          name: js-audit-results
          path: js-audit-results.json
          retention-days: 30

  python-audit:
    name: Python 의존성 검사
    runs-on: ubuntu-latest
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Safety 설치
        run: pip install safety

      - name: backend 디렉토리 검사
        run: |
          if [ -f backend/requirements.txt ]; then
            safety check -r backend/requirements.txt --json > python-audit-results.json || true
          elif [ -f backend/pyproject.toml ]; then
            pip install -e backend
            safety check --json > python-audit-results.json || true
          else
            echo "Python 의존성 파일을 찾을 수 없습니다." 
            touch python-audit-results.json
          fi

      - name: 결과 분석
        run: |
          if [ -s python-audit-results.json ]; then
            cat python-audit-results.json | jq '.[].vulnerabilities[] | { "패키지": .package_name, "취약 버전": .vulnerable_spec, "설명": .advisory}'
            echo "::warning::Python 의존성에서 보안 취약점이 발견되었습니다. 결과를 확인하세요."
          else
            echo "Python 의존성에 심각한 취약점이 없습니다."
          fi

      - name: 결과 업로드
        uses: actions/upload-artifact@v3
        with:
          name: python-audit-results
          path: python-audit-results.json
          retention-days: 30

  docker-scan:
    name: 도커 이미지 취약점 검사
    runs-on: ubuntu-latest
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: Trivy 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: 도커 파일 검사
        run: |
          mkdir -p trivy-results
          
          # API Gateway Dockerfile 검사
          if [ -f ./infra/docker/api-gateway/Dockerfile ]; then
            trivy config --severity HIGH,CRITICAL --format json -o trivy-results/api-gateway.json ./infra/docker/api-gateway/Dockerfile
          fi
          
          # Worker Dockerfile 검사
          if [ -f ./infra/docker/worker/Dockerfile ]; then
            trivy config --severity HIGH,CRITICAL --format json -o trivy-results/worker.json ./infra/docker/worker/Dockerfile
          fi
          
          find trivy-results -type f -name "*.json" | xargs cat | jq '.' || echo "도커파일 검사 결과 없음" 

      - name: 결과 업로드
        uses: actions/upload-artifact@v3
        with:
          name: trivy-results
          path: trivy-results/
          retention-days: 30

  summary:
    name: 보안 취약점 요약
    needs: [npm-audit, python-audit, docker-scan]
    runs-on: ubuntu-latest
    steps:
      - name: 결과 다운로드
        uses: actions/download-artifact@v3
        with:
          path: audit-results

      - name: 보안 취약점 요약
        run: |
          echo "## 보안 취약점 검사 결과" > summary.md
          echo "" >> summary.md
          
          echo "### JavaScript 의존성" >> summary.md
          if [ -s audit-results/js-audit-results/js-audit-results.json ]; then
            echo "JavaScript 의존성에 취약점이 발견되었습니다." >> summary.md
            echo "자세한 결과는 첨부된 결과 파일을 확인하세요." >> summary.md
          else
            echo "JavaScript 의존성에 심각한 취약점이 없습니다. ✅" >> summary.md
          fi
          echo "" >> summary.md
          
          echo "### Python 의존성" >> summary.md
          if [ -s audit-results/python-audit-results/python-audit-results.json ]; then
            echo "Python 의존성에 취약점이 발견되었습니다." >> summary.md
            echo "자세한 결과는 첨부된 결과 파일을 확인하세요." >> summary.md
          else
            echo "Python 의존성에 심각한 취약점이 없습니다. ✅" >> summary.md
          fi
          echo "" >> summary.md
          
          echo "### Docker 이미지" >> summary.md
          if [ -d audit-results/trivy-results ] && [ "$(find audit-results/trivy-results -type f -name '*.json' | wc -l)" -gt 0 ]; then
            echo "Docker 이미지 설정에 취약점이 발견되었습니다." >> summary.md
            echo "자세한 결과는 첨부된 결과 파일을 확인하세요." >> summary.md
          else
            echo "Docker 이미지 설정에 심각한 취약점이 없습니다. ✅" >> summary.md
          fi
          
          cat summary.md

      - name: 보안 검사 요약 업로드
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: summary.md
          retention-days: 30 