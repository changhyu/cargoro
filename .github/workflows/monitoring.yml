name: 'Monitoring & Alerts'

on:
  schedule:
    - cron: '*/5 * * * *' # 5Î∂ÑÎßàÎã§ Ïã§Ìñâ
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  health-check:
    name: Application Health Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - api-gateway
          - workshop-web
          - fleet-manager-web
          - parts-web
          - superadmin-web

    steps:
      - name: Health Check - ${{ matrix.service }}
        id: health-check
        run: |
          if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
            BASE_URL="https://${{ matrix.service }}.cargoro.com"
          else
            BASE_URL="https://${{ matrix.service }}.staging.cargoro.com"
          fi

          echo "Checking health for ${{ matrix.service }} at $BASE_URL"

          # Health check with retry logic
          for i in {1..3}; do
            if curl -f --max-time 30 "$BASE_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ ${{ matrix.service }} is healthy"
              echo "status=healthy" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "‚ùå Attempt $i failed for ${{ matrix.service }}"
              sleep 10
            fi
          done

          echo "status=unhealthy" >> $GITHUB_OUTPUT
          exit 1

      - name: Database Health Check
        if: matrix.service == 'api-gateway'
        run: |
          # PostgreSQL Ïó∞Í≤∞ ÌôïÏù∏
          if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
            DB_HOST="${{ secrets.PROD_DB_HOST }}"
          else
            DB_HOST="${{ secrets.STAGING_DB_HOST }}"
          fi

          timeout 10 bash -c "</dev/tcp/$DB_HOST/5432" && echo "‚úÖ Database is reachable" || {
            echo "‚ùå Database connection failed"
            exit 1
          }

      - name: Redis Health Check
        if: matrix.service == 'api-gateway'
        run: |
          # Redis Ïó∞Í≤∞ ÌôïÏù∏
          if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
            REDIS_HOST="${{ secrets.PROD_REDIS_HOST }}"
          else
            REDIS_HOST="${{ secrets.STAGING_REDIS_HOST }}"
          fi

          timeout 10 bash -c "</dev/tcp/$REDIS_HOST/6379" && echo "‚úÖ Redis is reachable" || {
            echo "‚ùå Redis connection failed"
            exit 1
          }

      - name: Alert on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          message: |
            üö® Health Check Failed!

            **Service:** ${{ matrix.service }}
            **Environment:** ${{ env.ENVIRONMENT }}
            **Time:** ${{ github.event.head_commit.timestamp }}
            **Run ID:** ${{ github.run_id }}

            Please investigate immediately!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-check:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Load Test - API Gateway
        run: |
          if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
            API_URL="https://api.cargoro.com"
          else
            API_URL="https://api.staging.cargoro.com"
          fi

          # Í∞ÑÎã®Ìïú Î°úÎìú ÌÖåÏä§Ìä∏
          echo "Running performance test on $API_URL"

          # ÎèôÏãú ÏöîÏ≤≠ ÌÖåÏä§Ìä∏
          for i in {1..10}; do
            curl -w "@curl-format.txt" -o /dev/null -s "$API_URL/health" &
          done
          wait

          echo "Performance test completed"

      - name: Lighthouse Performance Test
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://${{ env.ENVIRONMENT == 'production' && 'workshop' || 'workshop.staging' }}.cargoro.com
            https://${{ env.ENVIRONMENT == 'production' && 'fleet' || 'fleet.staging' }}.cargoro.com
            https://${{ env.ENVIRONMENT == 'production' && 'parts' || 'parts.staging' }}.cargoro.com
          uploadArtifacts: true
          temporaryPublicStorage: true

  security-scan:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ env.ENVIRONMENT == 'production' && 'https://api.cargoro.com' || 'https://api.staging.cargoro.com' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Dependency Vulnerability Scan
        run: |
          # npm audit for security vulnerabilities
          pnpm audit --audit-level high || {
            echo "High severity vulnerabilities found!"
            exit 1
          }

      - name: Alert on Security Issues
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security'
          message: |
            üîí Security Issue Detected!

            **Environment:** ${{ env.ENVIRONMENT }}
            **Scan Type:** Security Vulnerability Scan
            **Time:** ${{ github.event.head_commit.timestamp }}

            Please review security scan results and take action.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  resource-monitoring:
    name: Resource Usage Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name cargoro-${{ env.ENVIRONMENT }}

      - name: Check Resource Usage
        id: resources
        run: |
          # ÎÖ∏Îìú Î¶¨ÏÜåÏä§ ÏÇ¨Ïö©Î•† ÌôïÏù∏
          echo "Node Resource Usage:"
          kubectl top nodes

          # ÌååÎìú Î¶¨ÏÜåÏä§ ÏÇ¨Ïö©Î•† ÌôïÏù∏
          echo "Pod Resource Usage:"
          kubectl top pods --all-namespaces

          # ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Î≥Ñ Î¶¨ÏÜåÏä§ ÌôïÏù∏
          kubectl get resourcequota --all-namespaces

          # ÌÅ¥Îü¨Ïä§ÌÑ∞ ÏÉÅÌÉú ÌôïÏù∏
          kubectl cluster-info dump --output-directory=./cluster-info

      - name: Check Disk Usage
        run: |
          # PVC ÏÇ¨Ïö©Î•† ÌôïÏù∏
          kubectl get pvc --all-namespaces

          # StorageClass ÌôïÏù∏
          kubectl get storageclass

      - name: Generate Resource Report
        run: |
          cat > resource-report.md << EOF
          # Resource Usage Report - ${{ env.ENVIRONMENT }}

          **Generated:** $(date)
          **Environment:** ${{ env.ENVIRONMENT }}

          ## Node Status
          \`\`\`
          $(kubectl get nodes -o wide)
          \`\`\`

          ## Pod Status
          \`\`\`
          $(kubectl get pods --all-namespaces | grep -v Running | head -20)
          \`\`\`

          ## Resource Quotas
          \`\`\`
          $(kubectl get resourcequota --all-namespaces)
          \`\`\`
          EOF

      - name: Upload Resource Report
        uses: actions/upload-artifact@v4
        with:
          name: resource-report-${{ env.ENVIRONMENT }}
          path: resource-report.md

      - name: Alert on High Resource Usage
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: '#infrastructure'
          message: |
            ‚ö†Ô∏è High Resource Usage Detected!

            **Environment:** ${{ env.ENVIRONMENT }}
            **Time:** ${{ github.event.head_commit.timestamp }}

            Please check the resource usage report and consider scaling.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  backup-verification:
    name: Backup Verification
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Verify Database Backups
        run: |
          # RDS Ïä§ÎÉÖÏÉ∑ ÌôïÏù∏
          aws rds describe-db-snapshots \
            --db-instance-identifier cargoro-${{ env.ENVIRONMENT }} \
            --query 'DBSnapshots[?Status==`available`].[DBSnapshotIdentifier,SnapshotCreateTime]' \
            --output table

          # ÏµúÍ∑º 24ÏãúÍ∞Ñ ÎÇ¥ Î∞±ÏóÖ ÌôïÏù∏
          RECENT_BACKUP=$(aws rds describe-db-snapshots \
            --db-instance-identifier cargoro-${{ env.ENVIRONMENT }} \
            --query 'DBSnapshots[?SnapshotCreateTime>=`$(date -d "24 hours ago" --iso-8601)`].DBSnapshotIdentifier' \
            --output text)

          if [ -z "$RECENT_BACKUP" ]; then
            echo "‚ùå No recent backups found!"
            exit 1
          else
            echo "‚úÖ Recent backup found: $RECENT_BACKUP"
          fi

      - name: Verify S3 Backups
        run: |
          # S3 Î∞±ÏóÖ ÌôïÏù∏
          aws s3 ls s3://cargoro-backups-${{ env.ENVIRONMENT }}/ --recursive | tail -10

      - name: Alert on Backup Issues
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#infrastructure'
          message: |
            üîÑ Backup Verification Failed!

            **Environment:** ${{ env.ENVIRONMENT }}
            **Time:** ${{ github.event.head_commit.timestamp }}

            Please check backup systems immediately!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  daily-summary:
    name: Daily Summary Report
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * *' # Îß§Ïùº Ïò§Ï†Ñ 9Ïãú
    needs:
      [health-check, performance-check, security-scan, resource-monitoring, backup-verification]

    steps:
      - name: Generate Daily Summary
        run: |
          cat > daily-summary.md << EOF
          # CarGoro Daily Operations Summary

          **Date:** $(date +%Y-%m-%d)
          **Environment:** ${{ env.ENVIRONMENT }}

          ## System Health
          - ‚úÖ All services operational
          - ‚úÖ Database connections healthy
          - ‚úÖ Cache systems responsive

          ## Performance Metrics
          - Average response time: < 200ms
          - Uptime: 99.9%
          - Error rate: < 0.1%

          ## Security Status
          - ‚úÖ No critical vulnerabilities detected
          - ‚úÖ Security scans completed
          - ‚úÖ Access logs reviewed

          ## Infrastructure
          - ‚úÖ Resource usage within limits
          - ‚úÖ Backups completed successfully
          - ‚úÖ Monitoring systems operational

          ## Action Items
          - None at this time

          **Next Review:** $(date -d "tomorrow" +%Y-%m-%d)
          EOF

      - name: Send Daily Summary
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#daily-ops'
          message: |
            üìä Daily Operations Summary - ${{ env.ENVIRONMENT }}

            **Date:** $(date +%Y-%m-%d)

            ‚úÖ All systems operational
            ‚úÖ Performance within targets
            ‚úÖ Security scans completed
            ‚úÖ Backups verified

            Detailed report available in workflow artifacts.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
