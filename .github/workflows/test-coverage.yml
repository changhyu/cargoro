name: ÌÖåÏä§Ìä∏ Ïª§Î≤ÑÎ¶¨ÏßÄ

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  test-coverage:
    name: ÌÖåÏä§Ìä∏ Î∞è Ïª§Î≤ÑÎ¶¨ÏßÄ Í≤ÄÏÇ¨
    runs-on: ubuntu-latest

    steps:
      - name: ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v3

      - name: Node.js ÏÑ§Ï†ï
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Enable Corepack
        run: corepack enable

      - name: pnpm ÏàòÎèô ÏÑ§Ïπò
        run: |
          npm install -g pnpm@8
          pnpm --version

      - name: ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥
        run: |
          echo "Current working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Looking for pnpm-lock.yaml:"
          find . -name "pnpm-lock.yaml" -type f 2>/dev/null || echo "No pnpm-lock.yaml found"

      - name: ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "Installing with frozen lockfile..."
            pnpm install --frozen-lockfile
          else
            echo "Warning: pnpm-lock.yaml not found, installing without frozen lockfile..."
            pnpm install
          fi

      - name: ÌÖåÏä§Ìä∏ Ïã§Ìñâ Î∞è Ïª§Î≤ÑÎ¶¨ÏßÄ ÏÉùÏÑ±
        run: |
          # Ïï±Î≥Ñ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
          cd apps/workshop-web && pnpm test:coverage
          cd ../fleet-manager-web && pnpm test:coverage
          cd ../delivery-driver && pnpm test:coverage
          cd ../smart-car-assistant && pnpm test:coverage
          cd ../parts-web && pnpm test:coverage
          cd ../superadmin-web && pnpm test:coverage
          cd ../workshop-mobile && pnpm test:coverage

          # Ìå®ÌÇ§ÏßÄÎ≥Ñ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
          cd ../../packages/ui && pnpm test:coverage
          cd ../utils && pnpm test:coverage
          cd ../analytics && pnpm test:coverage
          cd ../api-client && pnpm test:coverage
          cd ../auth && pnpm test:coverage
          cd ../types && pnpm test:coverage

          cd ../../

      - name: ÌÜµÌï© Ïª§Î≤ÑÎ¶¨ÏßÄ Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
        run: |
          mkdir -p coverage
          echo '{
            "total": {
              "lines": { "total": 0, "covered": 0, "skipped": 0, "pct": 0 },
              "statements": { "total": 0, "covered": 0, "skipped": 0, "pct": 0 },
              "functions": { "total": 0, "covered": 0, "skipped": 0, "pct": 0 },
              "branches": { "total": 0, "covered": 0, "skipped": 0, "pct": 0 }
            }
          }' > coverage/coverage-summary.json

          # Í∞Å Ïï±Í≥º Ìå®ÌÇ§ÏßÄÏùò Ïª§Î≤ÑÎ¶¨ÏßÄ Ï†ïÎ≥¥ ÏàòÏßë
          find apps packages -name "coverage-summary.json" -exec echo {} \; -exec cat {} \; | grep -v "filepath:" > coverage/all-summaries.txt

      - name: Ïª§Î≤ÑÎ¶¨ÏßÄ ÏûÑÍ≥ÑÍ∞í Í≤ÄÏÇ¨
        run: |
          # Í∞Å Ïï±Ïùò coverage-summary.json ÌååÏùºÏùÑ ÏùΩÏñ¥ÏÑú ÌèâÍ∑† Í≥ÑÏÇ∞
          TOTAL_LINES_COVERED=0
          TOTAL_LINES=0
          TOTAL_STATEMENTS_COVERED=0
          TOTAL_STATEMENTS=0
          TOTAL_FUNCTIONS_COVERED=0
          TOTAL_FUNCTIONS=0
          TOTAL_BRANCHES_COVERED=0
          TOTAL_BRANCHES=0

          for summary_file in $(find apps packages -name "coverage-summary.json"); do
            if [ -f "$summary_file" ]; then
              LINES_COVERED=$(jq -r '.total.lines.covered' "$summary_file")
              LINES_TOTAL=$(jq -r '.total.lines.total' "$summary_file")
              STATEMENTS_COVERED=$(jq -r '.total.statements.covered' "$summary_file")
              STATEMENTS_TOTAL=$(jq -r '.total.statements.total' "$summary_file")
              FUNCTIONS_COVERED=$(jq -r '.total.functions.covered' "$summary_file")
              FUNCTIONS_TOTAL=$(jq -r '.total.functions.total' "$summary_file")
              BRANCHES_COVERED=$(jq -r '.total.branches.covered' "$summary_file")
              BRANCHES_TOTAL=$(jq -r '.total.branches.total' "$summary_file")

              TOTAL_LINES_COVERED=$((TOTAL_LINES_COVERED + LINES_COVERED))
              TOTAL_LINES=$((TOTAL_LINES + LINES_TOTAL))
              TOTAL_STATEMENTS_COVERED=$((TOTAL_STATEMENTS_COVERED + STATEMENTS_COVERED))
              TOTAL_STATEMENTS=$((TOTAL_STATEMENTS + STATEMENTS_TOTAL))
              TOTAL_FUNCTIONS_COVERED=$((TOTAL_FUNCTIONS_COVERED + FUNCTIONS_COVERED))
              TOTAL_FUNCTIONS=$((TOTAL_FUNCTIONS + FUNCTIONS_TOTAL))
              TOTAL_BRANCHES_COVERED=$((TOTAL_BRANCHES_COVERED + BRANCHES_COVERED))
              TOTAL_BRANCHES=$((TOTAL_BRANCHES + BRANCHES_TOTAL))
            fi
          done

          # ÌçºÏÑºÌã∞ÏßÄ Í≥ÑÏÇ∞
          if [ $TOTAL_LINES -gt 0 ]; then
            LINES_PCT=$(echo "scale=2; 100 * $TOTAL_LINES_COVERED / $TOTAL_LINES" | bc)
          else
            LINES_PCT=0
          fi

          if [ $TOTAL_STATEMENTS -gt 0 ]; then
            STATEMENTS_PCT=$(echo "scale=2; 100 * $TOTAL_STATEMENTS_COVERED / $TOTAL_STATEMENTS" | bc)
          else
            STATEMENTS_PCT=0
          fi

          if [ $TOTAL_FUNCTIONS -gt 0 ]; then
            FUNCTIONS_PCT=$(echo "scale=2; 100 * $TOTAL_FUNCTIONS_COVERED / $TOTAL_FUNCTIONS" | bc)
          else
            FUNCTIONS_PCT=0
          fi

          if [ $TOTAL_BRANCHES -gt 0 ]; then
            BRANCHES_PCT=$(echo "scale=2; 100 * $TOTAL_BRANCHES_COVERED / $TOTAL_BRANCHES" | bc)
          else
            BRANCHES_PCT=0
          fi

          MIN_LINES_PCT=80
          MIN_STATEMENTS_PCT=80
          MIN_FUNCTIONS_PCT=80
          MIN_BRANCHES_PCT=70

          FAILED=false

          if (( $(echo "$LINES_PCT < $MIN_LINES_PCT" | bc -l) )); then
            echo "‚ùå ÎùºÏù∏ Ïª§Î≤ÑÎ¶¨ÏßÄ $LINES_PCT% < $MIN_LINES_PCT% (ÏµúÏÜå Í∏∞Ï§Ä)"
            FAILED=true
          else
            echo "‚úÖ ÎùºÏù∏ Ïª§Î≤ÑÎ¶¨ÏßÄ $LINES_PCT% >= $MIN_LINES_PCT% (ÏµúÏÜå Í∏∞Ï§Ä)"
          fi

          if (( $(echo "$STATEMENTS_PCT < $MIN_STATEMENTS_PCT" | bc -l) )); then
            echo "‚ùå Íµ¨Î¨∏ Ïª§Î≤ÑÎ¶¨ÏßÄ $STATEMENTS_PCT% < $MIN_STATEMENTS_PCT% (ÏµúÏÜå Í∏∞Ï§Ä)"
            FAILED=true
          else
            echo "‚úÖ Íµ¨Î¨∏ Ïª§Î≤ÑÎ¶¨ÏßÄ $STATEMENTS_PCT% >= $MIN_STATEMENTS_PCT% (ÏµúÏÜå Í∏∞Ï§Ä)"
          fi

          if (( $(echo "$FUNCTIONS_PCT < $MIN_FUNCTIONS_PCT" | bc -l) )); then
            echo "‚ùå Ìï®Ïàò Ïª§Î≤ÑÎ¶¨ÏßÄ $FUNCTIONS_PCT% < $MIN_FUNCTIONS_PCT% (ÏµúÏÜå Í∏∞Ï§Ä)"
            FAILED=true
          else
            echo "‚úÖ Ìï®Ïàò Ïª§Î≤ÑÎ¶¨ÏßÄ $FUNCTIONS_PCT% >= $MIN_FUNCTIONS_PCT% (ÏµúÏÜå Í∏∞Ï§Ä)"
          fi

          if (( $(echo "$BRANCHES_PCT < $MIN_BRANCHES_PCT" | bc -l) )); then
            echo "‚ùå Î∏åÎûúÏπò Ïª§Î≤ÑÎ¶¨ÏßÄ $BRANCHES_PCT% < $MIN_BRANCHES_PCT% (ÏµúÏÜå Í∏∞Ï§Ä)"
            FAILED=true
          else
            echo "‚úÖ Î∏åÎûúÏπò Ïª§Î≤ÑÎ¶¨ÏßÄ $BRANCHES_PCT% >= $MIN_BRANCHES_PCT% (ÏµúÏÜå Í∏∞Ï§Ä)"
          fi

          if [ "$FAILED" = true ]; then
            echo "::error::Ïª§Î≤ÑÎ¶¨ÏßÄÍ∞Ä ÏµúÏÜå Í∏∞Ï§ÄÏùÑ Ï∂©Ï°±ÌïòÏßÄ ÏïäÏäµÎãàÎã§."
            exit 1
          fi

      - name: PRÏóê Ïª§Î≤ÑÎ¶¨ÏßÄ ÎåìÍ∏Ä ÏûëÏÑ±
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: test-coverage
          message: |
            ## üìä ÌÖåÏä§Ìä∏ Ïª§Î≤ÑÎ¶¨ÏßÄ Î≥¥Í≥†ÏÑú

            | Ìï≠Î™© | Ïª§Î≤ÑÎ¶¨ÏßÄ | ÏµúÏÜå Í∏∞Ï§Ä | ÏÉÅÌÉú |
            | --- | --- | --- | --- |
            | ÎùºÏù∏ | ${{ env.LINES_PCT }}% | 80% | ${{ env.LINES_STATUS }} |
            | Íµ¨Î¨∏ | ${{ env.STATEMENTS_PCT }}% | 80% | ${{ env.STATEMENTS_STATUS }} |
            | Ìï®Ïàò | ${{ env.FUNCTIONS_PCT }}% | 80% | ${{ env.FUNCTIONS_STATUS }} |
            | Î∏åÎûúÏπò | ${{ env.BRANCHES_PCT }}% | 70% | ${{ env.BRANCHES_STATUS }} |

            ### üìà Ïª§Î≤ÑÎ¶¨ÏßÄÍ∞Ä ÎÇÆÏùÄ Ìå®ÌÇ§ÏßÄ
            ${{ env.LOW_COVERAGE_PACKAGES }}

            [Ï†ÑÏ≤¥ Ïª§Î≤ÑÎ¶¨ÏßÄ Î≥¥Í≥†ÏÑú Î≥¥Í∏∞](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          LINES_PCT: ${{ env.LINES_PCT }}
          STATEMENTS_PCT: ${{ env.STATEMENTS_PCT }}
          FUNCTIONS_PCT: ${{ env.FUNCTIONS_PCT }}
          BRANCHES_PCT: ${{ env.BRANCHES_PCT }}
          LINES_STATUS: ${{ env.LINES_PCT >= 80 && '‚úÖ' || '‚ùå' }}
          STATEMENTS_STATUS: ${{ env.STATEMENTS_PCT >= 80 && '‚úÖ' || '‚ùå' }}
          FUNCTIONS_STATUS: ${{ env.FUNCTIONS_PCT >= 80 && '‚úÖ' || '‚ùå' }}
          BRANCHES_STATUS: ${{ env.BRANCHES_PCT >= 70 && '‚úÖ' || '‚ùå' }}
          LOW_COVERAGE_PACKAGES: ${{ env.LOW_COVERAGE_PACKAGES }}

      - name: Ïª§Î≤ÑÎ¶¨ÏßÄ ÏïÑÌã∞Ìå©Ìä∏ ÏóÖÎ°úÎìú
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage
          retention-days: 14
