name: Terraform 인프라 관리

on:
  push:
    branches: [main]
    paths:
      - 'infra/terraform/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'infra/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: '인프라 환경'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      action:
        description: 'Terraform 작업'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra/terraform
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: Terraform 설정
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform 초기화
        run: |
          ENV=${{ github.event.inputs.environment || 'staging' }}
          terraform init -backend-config="key=cargoro-${ENV}.tfstate"

      - name: Terraform 포맷 검증
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform 검증
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event.inputs.action != 'destroy'
        run: |
          ENV=${{ github.event.inputs.environment || 'staging' }}
          terraform plan -var-file="${ENV}.tfvars" -out=tfplan
          terraform show -json tfplan > plan.json
        continue-on-error: true

      - name: Terraform Plan 요약
        if: github.event.inputs.action != 'destroy'
        run: |
          echo "Terraform Plan 요약:"
          terraform show -no-color tfplan | grep -E '^\s*[~+-]' | grep -v "# forces replacement" | sort

      - name: Terraform Plan 상태 확인
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: |
          ENV=${{ github.event.inputs.environment || 'staging' }}
          terraform apply -var-file="${ENV}.tfvars" -auto-approve

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: |
          ENV=${{ github.event.inputs.environment || 'staging' }}
          echo "인프라 삭제를 시작합니다. 환경: ${ENV}"
          terraform destroy -var-file="${ENV}.tfvars" -auto-approve 