from fastapi import APIRouter, Depends, HTTPException, Query, Path, status
from typing import List, Optional, Dict, Any
from prisma import Prisma
from datetime import date, datetime
from ..models import (
    VehicleCreate,
    VehicleUpdate,
    VehicleResponse,
    VehicleStatus,
    VehicleType,
)
from ..models.contract import ContractResponse, ContractType
from ..models.assignment import VehicleAssignmentResponse
from ..models.driver_performance_new import DrivingRecordResponse
from ..utils.response_utils import (
    ApiResponse,
    create_response,
    not_found_exception,
    validation_exception,
    server_error_exception,
    conflict_exception,
    bad_request_exception,
)
import logging

router = APIRouter(
    prefix="/vehicles",
    tags=["vehicles"],
    responses={404: {"description": "Not found"}},
)

logger = logging.getLogger("fleet-api:vehicles")

# 리소스 타입 상수
RESOURCE_TYPE = "차량"


# 차량 생성
@router.post("/", response_model=ApiResponse)
async def create_vehicle(vehicle: VehicleCreate, prisma: Prisma = Depends()):
    try:
        # 조직 확인
        organization = await prisma.organization.find_unique(
            where={"id": vehicle.organization_id}
        )

        if not organization:
            raise not_found_exception("조직", vehicle.organization_id)

        # 번호판 중복 확인
        existing_vehicle = await prisma.vehicle.find_first(
            where={"license_plate": vehicle.license_plate}
        )

        if existing_vehicle:
            raise conflict_exception(RESOURCE_TYPE, "license_plate")

        # 차대번호 중복 확인
        existing_vin = await prisma.vehicle.find_first(where={"vin": vehicle.vin})

        if existing_vin:
            raise conflict_exception(RESOURCE_TYPE, "vin")

        # 차량 생성
        new_vehicle = await prisma.vehicle.create(
            data={
                "make": vehicle.make,
                "model": vehicle.model,
                "year": vehicle.year,
                "vehicle_type": vehicle.vehicle_type,
                "license_plate": vehicle.license_plate,
                "vin": vehicle.vin,
                "organization_id": vehicle.organization_id,
                "color": vehicle.color,
                "mileage": vehicle.mileage,
                "status": "available",  # 기본 상태
                "fuel_type": vehicle.fuel_type,
                "transmission": vehicle.transmission,
                "engine": vehicle.engine,
                "features": vehicle.features,
                "notes": vehicle.notes,
            }
        )

        return create_response(data=VehicleResponse.model_validate(new_vehicle))
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"차량 생성 실패: {str(e)}")
        raise server_error_exception(f"차량 생성 중 오류가 발생했습니다: {str(e)}")


# 모든 차량 조회
@router.get("/", response_model=ApiResponse)
async def get_all_vehicles(
    organization_id: Optional[str] = None,
    status: Optional[VehicleStatus] = None,
    vehicle_type: Optional[VehicleType] = None,
    make: Optional[str] = None,
    model: Optional[str] = None,
    year: Optional[int] = None,
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=100),
    prisma: Prisma = Depends(),
):
    try:
        # 필터 조건 구성
        where = {}

        if organization_id:
            where["organization_id"] = organization_id

        if status:
            where["status"] = status

        if vehicle_type:
            where["vehicle_type"] = vehicle_type

        if make:
            where["make"] = {"contains": make, "mode": "insensitive"}

        if model:
            where["model"] = {"contains": model, "mode": "insensitive"}

        if year:
            where["year"] = year

        # 총 개수 조회
        total_items = await prisma.vehicle.count(where=where)
        total_pages = (total_items + limit - 1) // limit if limit > 0 else 0

        # 데이터 조회
        vehicles = await prisma.vehicle.find_many(
            where=where, skip=skip, take=limit, order={"created_at": "desc"}
        )

        # 응답 객체로 변환
        vehicle_responses = [
            VehicleResponse.model_validate(vehicle) for vehicle in vehicles
        ]

        return create_response(
            data=vehicle_responses,
            page=skip // limit + 1,
            per_page=limit,
            total_items=total_items,
            total_pages=total_pages,
        )
    except Exception as e:
        logger.error(f"차량 조회 실패: {str(e)}")
        raise server_error_exception(f"차량 조회 중 오류가 발생했습니다: {str(e)}")


# 특정 차량 조회
@router.get("/{vehicle_id}", response_model=ApiResponse)
async def get_vehicle(
    vehicle_id: str = Path(..., description="조회할 차량의 ID"),
    prisma: Prisma = Depends(),
):
    try:
        vehicle = await prisma.vehicle.find_unique(where={"id": vehicle_id})

        if not vehicle:
            raise not_found_exception(RESOURCE_TYPE, vehicle_id)

        return create_response(data=VehicleResponse.model_validate(vehicle))
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"차량 조회 실패: {str(e)}")
        raise server_error_exception(f"차량 조회 중 오류가 발생했습니다: {str(e)}")


# 차량 수정
@router.patch("/{vehicle_id}", response_model=ApiResponse)
async def update_vehicle(
    vehicle_update: VehicleUpdate,
    vehicle_id: str = Path(..., description="수정할 차량의 ID"),
    prisma: Prisma = Depends(),
):
    try:
        # 기존 차량 확인
        existing_vehicle = await prisma.vehicle.find_unique(where={"id": vehicle_id})

        if not existing_vehicle:
            raise not_found_exception(RESOURCE_TYPE, vehicle_id)

        # 번호판 중복 확인 (변경되는 경우)
        if (
            vehicle_update.license_plate
            and vehicle_update.license_plate != existing_vehicle.license_plate
        ):
            plate_check = await prisma.vehicle.find_first(
                where={
                    "license_plate": vehicle_update.license_plate,
                    "id": {"not": vehicle_id},
                }
            )

            if plate_check:
                raise conflict_exception(RESOURCE_TYPE, "license_plate")

        # 차대번호 중복 확인 (변경되는 경우)
        if vehicle_update.vin and vehicle_update.vin != existing_vehicle.vin:
            vin_check = await prisma.vehicle.find_first(
                where={"vin": vehicle_update.vin, "id": {"not": vehicle_id}}
            )

            if vin_check:
                raise conflict_exception(RESOURCE_TYPE, "vin")

        # 필드 업데이트
        update_data = vehicle_update.model_dump(exclude_unset=True)
        update_data["updated_at"] = datetime.now()

        # 차량 업데이트
        updated_vehicle = await prisma.vehicle.update(
            where={"id": vehicle_id}, data=update_data
        )

        return create_response(data=VehicleResponse.model_validate(updated_vehicle))
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"차량 수정 실패: {str(e)}")
        raise server_error_exception(f"차량 수정 중 오류가 발생했습니다: {str(e)}")


# 차량 상태 변경
@router.patch("/{vehicle_id}/status", response_model=VehicleResponse)
async def update_vehicle_status(
    status: VehicleStatus,
    vehicle_id: str = Path(..., description="상태를 변경할 차량의 ID"),
    prisma: Prisma = Depends(),
):
    try:
        # 기존 차량 확인
        existing_vehicle = await prisma.vehicle.find_unique(where={"id": vehicle_id})

        if not existing_vehicle:
            raise not_found_exception(RESOURCE_TYPE, vehicle_id)

        # 차량 상태 업데이트
        updated_vehicle = await prisma.vehicle.update(
            where={"id": vehicle_id},
            data={"status": status, "updated_at": datetime.now()},
        )

        return updated_vehicle
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"차량 상태 변경 실패: {str(e)}")
        raise server_error_exception(f"차량 상태 변경 중 오류가 발생했습니다: {str(e)}")


# 차량 삭제
@router.delete("/{vehicle_id}", response_model=ApiResponse)
async def delete_vehicle(
    vehicle_id: str = Path(..., description="삭제할 차량의 ID"),
    prisma: Prisma = Depends(),
):
    try:
        # 기존 차량 확인
        existing_vehicle = await prisma.vehicle.find_unique(where={"id": vehicle_id})

        if not existing_vehicle:
            raise not_found_exception(RESOURCE_TYPE, vehicle_id)

        # 관련 계약 확인
        active_contracts = await prisma.contract.find_first(
            where={"vehicle_id": vehicle_id, "status": "active"}
        )

        if active_contracts:
            raise validation_exception(
                {
                    "message": "이 차량에 활성 계약이 있어 삭제할 수 없습니다.",
                    "vehicle_id": vehicle_id,
                }
            )

        # 차량 삭제
        deleted_vehicle = await prisma.vehicle.delete(where={"id": vehicle_id})

        return create_response(data=VehicleResponse.model_validate(deleted_vehicle))
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"차량 삭제 실패: {str(e)}")
        raise server_error_exception(f"차량 삭제 중 오류가 발생했습니다: {str(e)}")


# 차량 통계 조회
@router.get("/stats", response_model=ApiResponse)
async def get_vehicle_stats(
    organization_id: Optional[str] = None, prisma: Prisma = Depends()
):
    try:
        # 필터 조건 구성
        where = {}
        if organization_id:
            where["organization_id"] = organization_id

        # 전체 차량 수 조회
        total_count = await prisma.vehicle.count(where=where)

        # 상태별 차량 수 통계
        status_stats = {}
        for status in ["available", "in_use", "maintenance", "out_of_service"]:
            status_count = await prisma.vehicle.count(where={**where, "status": status})
            status_stats[status] = status_count

        # 유형별 차량 수 통계
        type_stats = {}
        for vehicle_type in [
            "sedan",
            "suv",
            "truck",
            "van",
            "motorcycle",
            "bus",
            "other",
        ]:
            type_count = await prisma.vehicle.count(
                where={**where, "vehicle_type": vehicle_type}
            )
            type_stats[vehicle_type] = type_count

        # 브랜드별 차량 수 통계
        brand_counts = await prisma.vehicle.group_by(
            by=["make"],
            where=where,
            _count={"id": True},
            take=10,
            order={"_count": {"id": "desc"}},
        )

        brand_stats = {item["make"]: item["_count"]["id"] for item in brand_counts}

        # 평균 주행거리
        avg_mileage_result = await prisma.vehicle.aggregate(
            where=where, _avg={"mileage": True}
        )
        avg_mileage = avg_mileage_result["_avg"]["mileage"] or 0

        # 연식 통계
        year_counts = await prisma.vehicle.group_by(
            by=["year"],
            where=where,
            _count={"id": True},
            order={"year": "desc"},
            take=10,
        )

        year_stats = {str(item["year"]): item["_count"]["id"] for item in year_counts}

        stats_data = {
            "total_count": total_count,
            "status_stats": status_stats,
            "type_stats": type_stats,
            "brand_stats": brand_stats,
            "avg_mileage": avg_mileage,
            "year_stats": year_stats,
            "updated_at": datetime.now().isoformat(),
        }

        return create_response(data=stats_data)
    except Exception as e:
        logger.error(f"차량 통계 조회 실패: {str(e)}")
        raise server_error_exception(f"차량 통계 조회 중 오류가 발생했습니다: {str(e)}")


# 차량별 리스/렌탈 계약 조회
@router.get("/{vehicle_id}/leases", response_model=List[ContractResponse])
async def get_vehicle_leases(
    vehicle_id: str = Path(..., description="조회할 차량의 ID"),
    prisma: Prisma = Depends(),
):
    """특정 차량의 리스/렌탈 계약 조회 (clientName 포함)"""
    where = {"vehicle_id": vehicle_id, "contract_type": {"in": [ContractType.LEASE, ContractType.RENTAL]}}
    # organization을 포함하여 clientName 매핑
    contracts = await prisma.contract.find_many(where=where, include={"organization": True})
    results: List[ContractResponse] = []
    for c in contracts:
        resp = ContractResponse.model_validate(c)
        resp.client_name = c.organization.name if c.organization else None
        results.append(resp)
    return results


# 차량 배정 이력 조회
@router.get("/{vehicle_id}/assignments", response_model=List[VehicleAssignmentResponse])
async def get_vehicle_assignments(
    vehicle_id: str = Path(..., description="조회할 차량의 ID"),
    prisma: Prisma = Depends(),
):
    """특정 차량의 배정 이력 조회"""
    assignments = await prisma.vehicle_assignment.find_many(where={"vehicle_id": vehicle_id})
    return [VehicleAssignmentResponse.model_validate(a) for a in assignments]


# 배정 가능한 차량 목록 조회
@router.get("/available", response_model=List[VehicleResponse])
async def get_available_vehicles(prisma: Prisma = Depends()):
    """공급 가능한 차량(available) 목록 조회"""
    vehicles = await prisma.vehicle.find_many(where={"status": "available"})
    return [VehicleResponse.model_validate(v) for v in vehicles]


# 특정 차량 운행 이력 조회
@router.get("/{vehicle_id}/records", response_model=List[DrivingRecordResponse])
async def get_records_by_vehicle(
    vehicle_id: str = Path(..., description="조회할 차량의 ID"),
    prisma: Prisma = Depends(),
):
    """특정 차량의 운행 이력 목록 조회"""
    records = await prisma.drivingrecord.find_many(where={"vehicleId": vehicle_id})
    return [DrivingRecordResponse.model_validate(r) for r in records]
