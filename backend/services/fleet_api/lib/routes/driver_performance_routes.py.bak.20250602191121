from fastapi import APIRouter, Depends, HTTPException, Query, Path, status
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import math
import logging
from prisma.errors import PrismaError

from ..models.driver_performance_new import (
    DriverPerformanceCreate,
    DriverPerformanceUpdate,
    DriverPerformanceResponse,
    DriverPerformanceFilters,
    DriverPerformanceListResponse,
    PerformancePeriod,
    PerformanceSummary,
)
from ..utils.auth import get_current_user

# Prisma 클라이언트 초기화
from prisma import Prisma

db = Prisma()

router = APIRouter(tags=["driver-performance"])
logger = logging.getLogger(__name__)


@router.post(
    "/driver-performance",
    response_model=DriverPerformanceResponse,
    status_code=status.HTTP_201_CREATED,
)
async def create_driver_performance(
    performance_data: DriverPerformanceCreate,
    current_user: dict = Depends(get_current_user),
):
    """
    새로운 운전자 성능 데이터를 생성합니다.
    """
    try:
        # 인증된 사용자만 성능 데이터 생성 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 운전자 존재 여부 확인
        driver = await db.driver.find_unique(where={"id": performance_data.driverId})

        if not driver:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{performance_data.driverId}'인 운전자를 찾을 수 없습니다.",
            )

        # 같은 기간에 대한 기존 데이터 확인
        existing_data = await db.driverperformance.find_first(
            where={
                "driverId": performance_data.driverId,
                "periodStart": performance_data.periodStart,
                "periodEnd": performance_data.periodEnd,
            }
        )

        if existing_data:
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail="동일한 운전자와 기간에 대한 성능 데이터가 이미 존재합니다.",
            )

        # 성능 데이터 생성
        performance_data_dict = performance_data.model_dump()
        new_performance = await db.driverperformance.create(data=performance_data_dict)

        return new_performance

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운전자 성능 데이터 생성 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운전자 성능 데이터 생성 중 오류가 발생했습니다: {str(e)}",
        )


@router.get("/driver-performance", response_model=DriverPerformanceListResponse)
async def get_driver_performances(
    driver_id: Optional[str] = None,
    period_type: Optional[PerformancePeriod] = None,
    start_from: Optional[datetime] = None,
    start_to: Optional[datetime] = None,
    min_safety_score: Optional[int] = Query(None, ge=0, le=100),
    min_eco_score: Optional[int] = Query(None, ge=0, le=100),
    min_overall_score: Optional[int] = Query(None, ge=0, le=100),
    page: int = Query(1, ge=1, description="페이지 번호"),
    page_size: int = Query(10, ge=1, le=100, description="페이지 크기"),
    current_user: dict = Depends(get_current_user),
):
    """
    필터링 옵션을 사용하여 운전자 성능 데이터 목록을 조회합니다.
    """
    try:
        # 인증된 사용자만 운전자 성능 데이터 목록 조회 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 필터 조건 구성
        where_conditions = {}

        if driver_id:
            where_conditions["driverId"] = driver_id

        # 날짜 필터 구성
        if period_type:
            # 현재 날짜 기준 기간 설정
            now = datetime.now()
            if period_type == PerformancePeriod.DAILY:
                # 오늘
                where_conditions["periodStart"] = {
                    "gte": datetime(now.year, now.month, now.day, 0, 0, 0)
                }
                where_conditions["periodEnd"] = {
                    "lte": datetime(now.year, now.month, now.day, 23, 59, 59)
                }
            elif period_type == PerformancePeriod.WEEKLY:
                # 이번 주 (월요일부터 일요일까지)
                start_of_week = now - timedelta(days=now.weekday())
                start_of_week = datetime(
                    start_of_week.year, start_of_week.month, start_of_week.day, 0, 0, 0
                )
                end_of_week = start_of_week + timedelta(
                    days=6, hours=23, minutes=59, seconds=59
                )
                where_conditions["periodStart"] = {"gte": start_of_week}
                where_conditions["periodEnd"] = {"lte": end_of_week}
            elif period_type == PerformancePeriod.MONTHLY:
                # 이번 달
                where_conditions["periodStart"] = {
                    "gte": datetime(now.year, now.month, 1, 0, 0, 0)
                }
                # 다음 달의 첫날 - 1초
                if now.month == 12:
                    next_month = datetime(now.year + 1, 1, 1, 0, 0, 0) - timedelta(
                        seconds=1
                    )
                else:
                    next_month = datetime(
                        now.year, now.month + 1, 1, 0, 0, 0
                    ) - timedelta(seconds=1)
                where_conditions["periodEnd"] = {"lte": next_month}
            elif period_type == PerformancePeriod.QUARTERLY:
                # 이번 분기
                quarter = (now.month - 1) // 3 + 1
                start_month = (quarter - 1) * 3 + 1
                where_conditions["periodStart"] = {
                    "gte": datetime(now.year, start_month, 1, 0, 0, 0)
                }
                if start_month + 3 > 12:
                    next_quarter = datetime(
                        now.year + 1, (start_month + 3) - 12, 1, 0, 0, 0
                    ) - timedelta(seconds=1)
                else:
                    next_quarter = datetime(
                        now.year, start_month + 3, 1, 0, 0, 0
                    ) - timedelta(seconds=1)
                where_conditions["periodEnd"] = {"lte": next_quarter}
            elif period_type == PerformancePeriod.YEARLY:
                # 올해
                where_conditions["periodStart"] = {
                    "gte": datetime(now.year, 1, 1, 0, 0, 0)
                }
                where_conditions["periodEnd"] = {
                    "lte": datetime(now.year, 12, 31, 23, 59, 59)
                }
        else:
            # 커스텀 날짜 범위 필터
            if start_from or start_to:
                where_conditions["periodStart"] = {}

                if start_from:
                    where_conditions["periodStart"]["gte"] = start_from

                if start_to:
                    where_conditions["periodStart"]["lte"] = start_to

        # 점수 필터 적용
        if min_safety_score is not None:
            where_conditions["safetyScore"] = {"gte": min_safety_score}

        if min_eco_score is not None:
            where_conditions["ecoScore"] = {"gte": min_eco_score}

        if min_overall_score is not None:
            where_conditions["overallScore"] = {"gte": min_overall_score}

        # 전체 레코드 수 조회
        total_records = await db.driverperformance.count(where=where_conditions)

        # 페이지네이션 계산
        skip = (page - 1) * page_size
        total_pages = math.ceil(total_records / page_size)

        # 운전자 성능 데이터 목록 조회
        performances = await db.driverperformance.find_many(
            where=where_conditions,
            skip=skip,
            take=page_size,
            order={"periodStart": "desc"},
        )

        # 응답 구성
        return {
            "items": performances,
            "total": total_records,
            "page": page,
            "pageSize": page_size,
            "totalPages": total_pages,
        }

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운전자 성능 데이터 목록 조회 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운전자 성능 데이터 목록 조회 중 오류가 발생했습니다: {str(e)}",
        )


@router.get(
    "/driver-performance/{performance_id}", response_model=DriverPerformanceResponse
)
async def get_driver_performance_by_id(
    performance_id: str = Path(..., description="조회할 운전자 성능 데이터 ID"),
    current_user: dict = Depends(get_current_user),
):
    """
    ID로 특정 운전자 성능 데이터를 조회합니다.
    """
    try:
        # 인증된 사용자만 운전자 성능 데이터 조회 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 운전자 성능 데이터 조회
        performance = await db.driverperformance.find_unique(
            where={"id": performance_id}
        )

        if not performance:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{performance_id}'인 운전자 성능 데이터를 찾을 수 없습니다.",
            )

        return performance

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운전자 성능 데이터 조회 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운전자 성능 데이터 조회 중 오류가 발생했습니다: {str(e)}",
        )


@router.put(
    "/driver-performance/{performance_id}", response_model=DriverPerformanceResponse
)
async def update_driver_performance(
    performance_id: str = Path(..., description="수정할 운전자 성능 데이터 ID"),
    performance_data: DriverPerformanceUpdate = None,
    current_user: dict = Depends(get_current_user),
):
    """
    특정 운전자 성능 데이터를 업데이트합니다.
    """
    try:
        # 인증된 사용자만 운전자 성능 데이터 수정 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 운전자 성능 데이터 존재 여부 확인
        existing_performance = await db.driverperformance.find_unique(
            where={"id": performance_id}
        )

        if not existing_performance:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{performance_id}'인 운전자 성능 데이터를 찾을 수 없습니다.",
            )

        # 업데이트할 데이터 준비
        update_data = performance_data.model_dump(exclude_unset=True)

        # 기간 변경 시 기존 데이터와 중복 여부 확인
        if "periodStart" in update_data or "periodEnd" in update_data:
            period_start = update_data.get(
                "periodStart", existing_performance.periodStart
            )
            period_end = update_data.get("periodEnd", existing_performance.periodEnd)

            existing_data = await db.driverperformance.find_first(
                where={
                    "driverId": existing_performance.driverId,
                    "periodStart": period_start,
                    "periodEnd": period_end,
                    "id": {"not": performance_id},
                }
            )

            if existing_data:
                raise HTTPException(
                    status_code=status.HTTP_409_CONFLICT,
                    detail="동일한 운전자와 기간에 대한 성능 데이터가 이미 존재합니다.",
                )

        # 운전자 ID 변경 시 운전자 존재 여부 확인
        if "driverId" in update_data:
            driver = await db.driver.find_unique(where={"id": update_data["driverId"]})

            if not driver:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail=f"ID가 '{update_data['driverId']}'인 운전자를 찾을 수 없습니다.",
                )

        # 데이터 업데이트
        updated_performance = await db.driverperformance.update(
            where={"id": performance_id}, data=update_data
        )

        return updated_performance

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운전자 성능 데이터 업데이트 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운전자 성능 데이터 업데이트 중 오류가 발생했습니다: {str(e)}",
        )


@router.delete(
    "/driver-performance/{performance_id}", status_code=status.HTTP_204_NO_CONTENT
)
async def delete_driver_performance(
    performance_id: str = Path(..., description="삭제할 운전자 성능 데이터 ID"),
    current_user: dict = Depends(get_current_user),
):
    """
    특정 운전자 성능 데이터를 삭제합니다.
    """
    try:
        # 인증된 사용자만 운전자 성능 데이터 삭제 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 운전자 성능 데이터 존재 여부 확인
        existing_performance = await db.driverperformance.find_unique(
            where={"id": performance_id}
        )

        if not existing_performance:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{performance_id}'인 운전자 성능 데이터를 찾을 수 없습니다.",
            )

        # 운전자 성능 데이터 삭제
        await db.driverperformance.delete(where={"id": performance_id})

        return None

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운전자 성능 데이터 삭제 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운전자 성능 데이터 삭제 중 오류가 발생했습니다: {str(e)}",
        )


@router.get(
    "/driver/{driver_id}/performance", response_model=DriverPerformanceListResponse
)
async def get_driver_performance_history(
    driver_id: str = Path(..., description="운전자 ID"),
    period_type: Optional[PerformancePeriod] = None,
    page: int = Query(1, ge=1, description="페이지 번호"),
    page_size: int = Query(10, ge=1, le=100, description="페이지 크기"),
    current_user: dict = Depends(get_current_user),
):
    """
    특정 운전자의 성능 기록 내역을 조회합니다.
    """
    try:
        # 인증된 사용자만 운전자 성능 기록 조회 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 운전자 존재 여부 확인
        driver = await db.driver.find_unique(where={"id": driver_id})

        if not driver:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{driver_id}'인 운전자를 찾을 수 없습니다.",
            )

        # 필터 조건 구성
        where_conditions = {"driverId": driver_id}

        # 날짜 필터 구성
        if period_type:
            # 현재 날짜 기준 기간 설정
            now = datetime.now()
            if period_type == PerformancePeriod.DAILY:
                # 오늘
                where_conditions["periodStart"] = {
                    "gte": datetime(now.year, now.month, now.day, 0, 0, 0)
                }
                where_conditions["periodEnd"] = {
                    "lte": datetime(now.year, now.month, now.day, 23, 59, 59)
                }
            elif period_type == PerformancePeriod.WEEKLY:
                # 이번 주 (월요일부터 일요일까지)
                start_of_week = now - timedelta(days=now.weekday())
                start_of_week = datetime(
                    start_of_week.year, start_of_week.month, start_of_week.day, 0, 0, 0
                )
                end_of_week = start_of_week + timedelta(
                    days=6, hours=23, minutes=59, seconds=59
                )
                where_conditions["periodStart"] = {"gte": start_of_week}
                where_conditions["periodEnd"] = {"lte": end_of_week}
            elif period_type == PerformancePeriod.MONTHLY:
                # 이번 달
                where_conditions["periodStart"] = {
                    "gte": datetime(now.year, now.month, 1, 0, 0, 0)
                }
                # 다음 달의 첫날 - 1초
                if now.month == 12:
                    next_month = datetime(now.year + 1, 1, 1, 0, 0, 0) - timedelta(
                        seconds=1
                    )
                else:
                    next_month = datetime(
                        now.year, now.month + 1, 1, 0, 0, 0
                    ) - timedelta(seconds=1)
                where_conditions["periodEnd"] = {"lte": next_month}
            elif period_type == PerformancePeriod.QUARTERLY:
                # 이번 분기
                quarter = (now.month - 1) // 3 + 1
                start_month = (quarter - 1) * 3 + 1
                where_conditions["periodStart"] = {
                    "gte": datetime(now.year, start_month, 1, 0, 0, 0)
                }
                if start_month + 3 > 12:
                    next_quarter = datetime(
                        now.year + 1, (start_month + 3) - 12, 1, 0, 0, 0
                    ) - timedelta(seconds=1)
                else:
                    next_quarter = datetime(
                        now.year, start_month + 3, 1, 0, 0, 0
                    ) - timedelta(seconds=1)
                where_conditions["periodEnd"] = {"lte": next_quarter}
            elif period_type == PerformancePeriod.YEARLY:
                # 올해
                where_conditions["periodStart"] = {
                    "gte": datetime(now.year, 1, 1, 0, 0, 0)
                }
                where_conditions["periodEnd"] = {
                    "lte": datetime(now.year, 12, 31, 23, 59, 59)
                }

        # 전체 레코드 수 조회
        total_records = await db.driverperformance.count(where=where_conditions)

        # 페이지네이션 계산
        skip = (page - 1) * page_size
        total_pages = math.ceil(total_records / page_size)

        # 성능 데이터 조회
        performances = await db.driverperformance.find_many(
            where=where_conditions,
            skip=skip,
            take=page_size,
            order={"periodStart": "desc"},
        )

        # 응답 구성
        return {
            "items": performances,
            "total": total_records,
            "page": page,
            "pageSize": page_size,
            "totalPages": total_pages,
        }

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운전자 성능 기록 조회 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운전자 성능 기록 조회 중 오류가 발생했습니다: {str(e)}",
        )


# 백엔드 성능 개선 - 운전자 성능 API 최적화
@router.get("/driver-performance-summary", response_model=PerformanceSummary)
async def get_performance_summary(
    organization_id: Optional[str] = None,
    period_type: Optional[PerformancePeriod] = PerformancePeriod.MONTHLY,
    current_user: dict = Depends(get_current_user),
):
    """
    운전자 성능 요약 정보를 조회합니다. (성능 최적화 적용)
    """
    # Redis 캐싱 추가
    cache_key = f"performance_summary:{organization_id}:{period_type}:{datetime.now().strftime('%Y%m%d%H')}"
    cached_result = await redis_client.get(cache_key)

    if cached_result:
        return json.loads(cached_result)

    # 배치 쿼리로 N+1 문제 해결
    driver_performances = await db.driverperformance.find_many(
        where=build_performance_filter(organization_id, period_type),
        include={
            "driver": {"select": {"id": True, "name": True, "organizationId": True}}
        },
        order={"overallScore": "desc"},
    )

    # 결과 캐싱 (1시간)
    result = calculate_performance_summary(driver_performances)
    await redis_client.setex(cache_key, 3600, json.dumps(result, default=str))

    return result


# 인덱스 최적화를 위한 마이그레이션
"""
-- 성능 최적화 인덱스 추가
CREATE INDEX CONCURRENTLY idx_driver_performance_driver_period
ON "DriverPerformance" ("driverId", "periodStart", "periodEnd");

CREATE INDEX CONCURRENTLY idx_driver_performance_org_score
ON "DriverPerformance" ("organizationId", "overallScore" DESC);

CREATE INDEX CONCURRENTLY idx_driver_performance_period_type
ON "DriverPerformance" ("periodStart", "periodEnd")
WHERE "overallScore" IS NOT NULL;
"""
