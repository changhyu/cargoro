# filepath: backend/services/fleet_api/lib/routes/lease_routes.py
"""
리스/렌탈 계약 조회 라우터
"""
from fastapi import APIRouter, Depends, Query, HTTPException, status, Path, Body
from typing import List, Optional
from datetime import date
from prisma import Prisma

from ..models.contract import ContractResponse, ContractType, ContractStatus
from ..models.notification import NotificationCreate, NotificationResponse, NotificationType, NotificationSeverity
from ..utils.response_utils import create_response, not_found_exception, server_error_exception

router = APIRouter(
    prefix="/leases",
    tags=["leases"],
)

@router.get("", response_model=List[ContractResponse])
async def get_leases(
    type: Optional[ContractType] = Query(None, alias="type"),
    status: Optional[ContractStatus] = Query(None),
    vehicle_id: Optional[str] = Query(None, alias="vehicleId"),
    client_id: Optional[str] = Query(None, alias="clientId"),
    start_date: Optional[date] = Query(None, alias="startDate"),
    end_date: Optional[date] = Query(None, alias="endDate"),
    prisma: Prisma = Depends(),
):
    """리스/렌탈 계약 목록 조회"""
    # 기본 필터: 리스 또는 렌탈 타입
    where: dict = {"contract_type": {"in": [ContractType.LEASE, ContractType.RENTAL]}}
    if type:
        where["contract_type"] = type
    if status:
        where["status"] = status
    if vehicle_id:
        where["vehicle_id"] = vehicle_id
    if client_id:
        where["organization_id"] = client_id
    if start_date:
        where.setdefault("start_date", {})["gte"] = start_date
    if end_date:
        where.setdefault("end_date", {})["lte"] = end_date

    # 조직명(clientName) 매핑을 위해 organization 포함
    contracts = await prisma.contract.find_many(where=where, include={"organization": True})
    results: List[ContractResponse] = []
    for c in contracts:
        resp = ContractResponse.model_validate(c)
        # organization 객체에서 이름 필드 추출 (가정: organization.name)
        resp.client_name = c.organization.name if c.organization else None
        results.append(resp)
    return results

# 알림 목록 조회
@router.get("/notifications", response_model=List[NotificationResponse])
async def get_notifications(
    target_type: Optional[str] = Query(None),
    target_id: Optional[str] = Query(None),
    type: Optional[NotificationType] = Query(None),
    is_read: Optional[bool] = Query(None),
    severity: Optional[NotificationSeverity] = Query(None),
    page: int = Query(1),
    page_size: int = Query(20),
    prisma: Prisma = Depends(),
):
    try:
        where = {}
        if target_type:
            where["target_type"] = target_type
        if target_id:
            where["target_id"] = target_id
        if type:
            where["type"] = type
        if severity:
            where["severity"] = severity
        if is_read is not None:
            where["is_read"] = is_read

        notifications = await prisma.notification.find_many(where=where, skip=(page-1)*page_size, take=page_size)
        return [NotificationResponse.model_validate(n) for n in notifications]

    except Exception as e:
        raise server_error_exception(f"알림 목록 조회 중 오류가 발생했습니다: {str(e)}")

# 특정 알림 조회
@router.get("/notifications/{notification_id}", response_model=NotificationResponse)
async def get_notification_by_id(
    notification_id: str = Path(...),
    prisma: Prisma = Depends(),
):
    notification = await prisma.notification.find_unique(where={"id": notification_id})
    if not notification:
        raise not_found_exception("Notification", notification_id)
    return NotificationResponse.model_validate(notification)

# 알림 생성
@router.post("/notifications", response_model=NotificationResponse, status_code=status.HTTP_201_CREATED)
async def create_notification(
    notification: NotificationCreate,
    prisma: Prisma = Depends(),
):
    try:
        new_notification = await prisma.notification.create(data=notification.model_dump())
        return NotificationResponse.model_validate(new_notification)
    except Exception as e:
        raise server_error_exception(f"알림 생성 중 오류가 발생했습니다: {str(e)}")

# 알림 읽음 처리
@router.patch("/notifications/{notification_id}/read", response_model=NotificationResponse)
async def mark_as_read(
    notification_id: str = Path(...),
    prisma: Prisma = Depends(),
):
    notification = await prisma.notification.find_unique(where={"id": notification_id})
    if not notification:
        raise not_found_exception("Notification", notification_id)
    updated_notification = await prisma.notification.update(
        where={"id": notification_id}, data={"is_read": True}
    )
    return NotificationResponse.model_validate(updated_notification)

# 모든 알림 읽음 처리
@router.post("/notifications/mark-all-read", response_model=List[NotificationResponse])
async def mark_all_as_read(
    target_id: Optional[str] = Body(None),
    prisma: Prisma = Depends(),
):
    where = {"is_read": False}
    if target_id:
        where["target_id"] = target_id
    updated = await prisma.notification.update_many(where=where, data={"is_read": True})
    # update_many는 count 반환하므로 읽어온 후 다시 조회
    notifications = await prisma.notification.find_many(where={"is_read": True, **({"target_id": target_id} if target_id else {})})
    return [NotificationResponse.model_validate(n) for n in notifications]

# 알림 삭제
@router.delete("/notifications/{notification_id}")
async def delete_notification(
    notification_id: str = Path(...),
    prisma: Prisma = Depends(),
):
    deleted = await prisma.notification.delete(where={"id": notification_id})
    return create_response(data={"id": deleted.id}, message="알림이 성공적으로 삭제되었습니다")

# 읽지 않은 알림 수 조회
@router.get("/notifications/unread-count")
async def get_unread_count(
    target_id: Optional[str] = Query(None),
    prisma: Prisma = Depends(),
):
    where = {"is_read": False}
    if target_id:
        where["target_id"] = target_id
    count = await prisma.notification.count(where=where)
    return {"count": count}
