from fastapi import APIRouter, Depends, HTTPException, Query, Path, status
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import math
import logging
from prisma.errors import PrismaError

from ..models.driver_performance_new import (
    DrivingRecordCreate,
    DrivingRecordUpdate,
    DrivingRecordResponse,
    DrivingRecordFilters,
    DrivingRecordListResponse,
)
from ..utils.auth import get_current_user

# Prisma 클라이언트 초기화
from prisma import Prisma

db = Prisma()

router = APIRouter(tags=["driving-records"])
logger = logging.getLogger(__name__)


@router.post(
    "/driving-records",
    response_model=DrivingRecordResponse,
    status_code=status.HTTP_201_CREATED,
)
async def create_driving_record(
    record_data: DrivingRecordCreate,
    current_user: dict = Depends(get_current_user),
):
    """
    새로운 운행 기록을 생성합니다.
    """
    try:
        # 인증된 사용자만 운행 기록 생성 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 운전자 존재 여부 확인
        driver = await db.driver.find_unique(where={"id": record_data.driverId})

        if not driver:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{record_data.driverId}'인 운전자를 찾을 수 없습니다.",
            )

        # 차량 존재 여부 확인
        vehicle = await db.vehicle.find_unique(where={"id": record_data.vehicleId})

        if not vehicle:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{record_data.vehicleId}'인 차량을 찾을 수 없습니다.",
            )

        # 운행 기록 생성
        record_data_dict = record_data.model_dump()
        new_record = await db.drivingrecord.create(data=record_data_dict)

        # 차량 상태 및 주행거리 업데이트
        await db.vehicle.update(
            where={"id": record_data.vehicleId},
            data={"mileage": vehicle.mileage + int(record_data.distance)},
        )

        return new_record

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운행 기록 생성 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운행 기록 생성 중 오류가 발생했습니다: {str(e)}",
        )


@router.get("/driving-records", response_model=DrivingRecordListResponse)
async def get_driving_records(
    driver_id: Optional[str] = None,
    vehicle_id: Optional[str] = None,
    start_time_from: Optional[datetime] = None,
    start_time_to: Optional[datetime] = None,
    min_distance: Optional[float] = Query(None, ge=0),
    max_distance: Optional[float] = Query(None, ge=0),
    page: int = Query(1, ge=1, description="페이지 번호"),
    page_size: int = Query(10, ge=1, le=100, description="페이지 크기"),
    current_user: dict = Depends(get_current_user),
):
    """
    필터링 옵션을 사용하여 운행 기록 목록을 조회합니다.
    """
    try:
        # 인증된 사용자만 운행 기록 목록 조회 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 필터 조건 구성
        where_conditions = {}

        if driver_id:
            where_conditions["driverId"] = driver_id

        if vehicle_id:
            where_conditions["vehicleId"] = vehicle_id

        # 날짜 필터
        if start_time_from or start_time_to:
            where_conditions["startTime"] = {}

            if start_time_from:
                where_conditions["startTime"]["gte"] = start_time_from

            if start_time_to:
                where_conditions["startTime"]["lte"] = start_time_to

        # 거리 필터
        if min_distance is not None or max_distance is not None:
            where_conditions["distance"] = {}

            if min_distance is not None:
                where_conditions["distance"]["gte"] = min_distance

            if max_distance is not None:
                where_conditions["distance"]["lte"] = max_distance

        # 전체 레코드 수 조회
        total_records = await db.drivingrecord.count(where=where_conditions)

        # 페이지네이션 계산
        skip = (page - 1) * page_size
        total_pages = math.ceil(total_records / page_size)

        # 운행 기록 목록 조회
        records = await db.drivingrecord.find_many(
            where=where_conditions,
            skip=skip,
            take=page_size,
            order={"startTime": "desc"},
        )

        # 응답 구성
        return {
            "items": records,
            "total": total_records,
            "page": page,
            "pageSize": page_size,
            "totalPages": total_pages,
        }

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운행 기록 목록 조회 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운행 기록 목록 조회 중 오류가 발생했습니다: {str(e)}",
        )


@router.get("/driving-records/{record_id}", response_model=DrivingRecordResponse)
async def get_driving_record_by_id(
    record_id: str = Path(..., description="조회할 운행 기록 ID"),
    current_user: dict = Depends(get_current_user),
):
    """
    ID로 특정 운행 기록을 조회합니다.
    """
    try:
        # 인증된 사용자만 운행 기록 조회 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 운행 기록 조회
        record = await db.drivingrecord.find_unique(where={"id": record_id})

        if not record:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{record_id}'인 운행 기록을 찾을 수 없습니다.",
            )

        return record

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운행 기록 조회 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운행 기록 조회 중 오류가 발생했습니다: {str(e)}",
        )


@router.put("/driving-records/{record_id}", response_model=DrivingRecordResponse)
async def update_driving_record(
    record_id: str = Path(..., description="수정할 운행 기록 ID"),
    record_data: DrivingRecordUpdate = None,
    current_user: dict = Depends(get_current_user),
):
    """
    특정 운행 기록을 업데이트합니다.
    """
    try:
        # 인증된 사용자만 운행 기록 수정 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 운행 기록 존재 여부 확인
        existing_record = await db.drivingrecord.find_unique(where={"id": record_id})

        if not existing_record:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{record_id}'인 운행 기록을 찾을 수 없습니다.",
            )

        # 업데이트할 데이터 준비
        update_data = record_data.model_dump(exclude_unset=True)

        # 주행거리 변경 시 차량 주행거리 업데이트
        if "distance" in update_data:
            # 차량 조회
            vehicle = await db.vehicle.find_unique(
                where={"id": existing_record.vehicleId}
            )

            if vehicle:
                distance_diff = update_data["distance"] - existing_record.distance
                await db.vehicle.update(
                    where={"id": existing_record.vehicleId},
                    data={"mileage": vehicle.mileage + int(distance_diff)},
                )

        # 데이터 업데이트
        updated_record = await db.drivingrecord.update(
            where={"id": record_id}, data=update_data
        )

        return updated_record

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운행 기록 업데이트 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운행 기록 업데이트 중 오류가 발생했습니다: {str(e)}",
        )


@router.delete("/driving-records/{record_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_driving_record(
    record_id: str = Path(..., description="삭제할 운행 기록 ID"),
    current_user: dict = Depends(get_current_user),
):
    """
    특정 운행 기록을 삭제합니다.
    """
    try:
        # 인증된 사용자만 운행 기록 삭제 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 운행 기록 존재 여부 확인
        existing_record = await db.drivingrecord.find_unique(where={"id": record_id})

        if not existing_record:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{record_id}'인 운행 기록을 찾을 수 없습니다.",
            )

        # 차량 조회 및 주행거리 업데이트
        vehicle = await db.vehicle.find_unique(where={"id": existing_record.vehicleId})

        if vehicle:
            # 삭제되는 기록의 주행거리만큼 차량 주행거리 감소
            new_mileage = max(0, vehicle.mileage - int(existing_record.distance))
            await db.vehicle.update(
                where={"id": existing_record.vehicleId},
                data={"mileage": new_mileage},
            )

        # 운행 기록 삭제
        await db.drivingrecord.delete(where={"id": record_id})

        return None

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운행 기록 삭제 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운행 기록 삭제 중 오류가 발생했습니다: {str(e)}",
        )


@router.get(
    "/driver/{driver_id}/driving-records", response_model=DrivingRecordListResponse
)
async def get_driver_driving_records(
    driver_id: str = Path(..., description="운전자 ID"),
    start_time_from: Optional[datetime] = None,
    start_time_to: Optional[datetime] = None,
    page: int = Query(1, ge=1, description="페이지 번호"),
    page_size: int = Query(10, ge=1, le=100, description="페이지 크기"),
    current_user: dict = Depends(get_current_user),
):
    """
    특정 운전자의 운행 기록 목록을 조회합니다.
    """
    try:
        # 인증된 사용자만 운전자 운행 기록 조회 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 운전자 존재 여부 확인
        driver = await db.driver.find_unique(where={"id": driver_id})

        if not driver:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{driver_id}'인 운전자를 찾을 수 없습니다.",
            )

        # 필터 조건 구성
        where_conditions = {"driverId": driver_id}

        # 날짜 필터
        if start_time_from or start_time_to:
            where_conditions["startTime"] = {}

            if start_time_from:
                where_conditions["startTime"]["gte"] = start_time_from

            if start_time_to:
                where_conditions["startTime"]["lte"] = start_time_to

        # 전체 레코드 수 조회
        total_records = await db.drivingrecord.count(where=where_conditions)

        # 페이지네이션 계산
        skip = (page - 1) * page_size
        total_pages = math.ceil(total_records / page_size)

        # 운행 기록 목록 조회
        records = await db.drivingrecord.find_many(
            where=where_conditions,
            skip=skip,
            take=page_size,
            order={"startTime": "desc"},
        )

        # 응답 구성
        return {
            "items": records,
            "total": total_records,
            "page": page,
            "pageSize": page_size,
            "totalPages": total_pages,
        }

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="운전자 운행 기록 목록 조회 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"운전자 운행 기록 목록 조회 중 오류가 발생했습니다: {str(e)}",
        )


@router.get(
    "/vehicle/{vehicle_id}/driving-records", response_model=DrivingRecordListResponse
)
async def get_vehicle_driving_records(
    vehicle_id: str = Path(..., description="차량 ID"),
    start_time_from: Optional[datetime] = None,
    start_time_to: Optional[datetime] = None,
    page: int = Query(1, ge=1, description="페이지 번호"),
    page_size: int = Query(10, ge=1, le=100, description="페이지 크기"),
    current_user: dict = Depends(get_current_user),
):
    """
    특정 차량의 운행 기록 목록을 조회합니다.
    """
    try:
        # 인증된 사용자만 차량 운행 기록 조회 가능
        if not current_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="인증되지 않은 사용자입니다.",
            )

        # 차량 존재 여부 확인
        vehicle = await db.vehicle.find_unique(where={"id": vehicle_id})

        if not vehicle:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"ID가 '{vehicle_id}'인 차량을 찾을 수 없습니다.",
            )

        # 필터 조건 구성
        where_conditions = {"vehicleId": vehicle_id}

        # 날짜 필터
        if start_time_from or start_time_to:
            where_conditions["startTime"] = {}

            if start_time_from:
                where_conditions["startTime"]["gte"] = start_time_from

            if start_time_to:
                where_conditions["startTime"]["lte"] = start_time_to

        # 전체 레코드 수 조회
        total_records = await db.drivingrecord.count(where=where_conditions)

        # 페이지네이션 계산
        skip = (page - 1) * page_size
        total_pages = math.ceil(total_records / page_size)

        # 운행 기록 목록 조회
        records = await db.drivingrecord.find_many(
            where=where_conditions,
            skip=skip,
            take=page_size,
            order={"startTime": "desc"},
        )

        # 응답 구성
        return {
            "items": records,
            "total": total_records,
            "page": page,
            "pageSize": page_size,
            "totalPages": total_pages,
        }

    except PrismaError as e:
        logger.error(f"Prisma 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="차량 운행 기록 목록 조회 중 데이터베이스 오류가 발생했습니다.",
        )
    except Exception as e:
        logger.error(f"예상치 못한 오류: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"차량 운행 기록 목록 조회 중 오류가 발생했습니다: {str(e)}",
        )
