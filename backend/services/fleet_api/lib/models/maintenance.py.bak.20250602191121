from pydantic import BaseModel, Field, validator
from typing import Optional, List, Dict, Any
from datetime import datetime
from enum import Enum


class MaintenanceStatus(str, Enum):
    """유지보수 상태 열거형"""

    SCHEDULED = "SCHEDULED"  # 예정됨
    IN_PROGRESS = "IN_PROGRESS"  # 진행중
    COMPLETED = "COMPLETED"  # 완료됨
    CANCELLED = "CANCELLED"  # 취소됨


class MaintenanceType(str, Enum):
    """유지보수 유형 열거형"""

    REGULAR = "REGULAR"  # 정기점검
    REPAIR = "REPAIR"  # 수리
    INSPECTION = "INSPECTION"  # 검사
    TIRE_CHANGE = "TIRE_CHANGE"  # 타이어 교체
    OIL_CHANGE = "OIL_CHANGE"  # 오일 교체
    EMERGENCY = "EMERGENCY"  # 긴급 수리
    OTHER = "OTHER"  # 기타


class MaintenancePartBase(BaseModel):
    """유지보수 부품 기본 모델"""

    name: str = Field(..., description="부품 이름")
    partNumber: Optional[str] = Field(None, description="부품 번호")
    quantity: int = Field(..., description="수량", gt=0)
    unitPrice: Optional[float] = Field(None, description="단가", ge=0)
    totalPrice: Optional[float] = Field(None, description="총 금액", ge=0)

    @validator("totalPrice", pre=True, always=False)
    def calculate_total_price(cls, v, values):
        """단가와 수량으로 총 금액 계산"""
        if v is not None:
            return v

        unit_price = values.get("unitPrice")
        quantity = values.get("quantity")

        if unit_price is not None and quantity is not None:
            return unit_price * quantity

        return None


class MaintenancePartCreate(MaintenancePartBase):
    """유지보수 부품 생성 모델"""

    pass


class MaintenancePartUpdate(BaseModel):
    """유지보수 부품 업데이트 모델"""

    name: Optional[str] = None
    partNumber: Optional[str] = None
    quantity: Optional[int] = Field(None, gt=0)
    unitPrice: Optional[float] = Field(None, ge=0)
    totalPrice: Optional[float] = Field(None, ge=0)


class MaintenancePartResponse(MaintenancePartBase):
    """유지보수 부품 응답 모델"""

    id: str
    maintenanceId: str
    createdAt: datetime
    updatedAt: datetime

    model_config = {"from_attributes": True}  # Pydantic v2 형식


class MaintenanceBase(BaseModel):
    """유지보수 기본 모델"""

    title: str = Field(..., description="유지보수 제목")
    description: Optional[str] = Field(None, description="상세 설명")
    maintenanceType: MaintenanceType = Field(..., description="유지보수 유형")
    status: MaintenanceStatus = Field(MaintenanceStatus.SCHEDULED, description="상태")
    startDate: datetime = Field(..., description="시작 일자")
    endDate: Optional[datetime] = Field(None, description="종료 일자")
    mileageAtService: Optional[int] = Field(
        None, description="서비스 시점 주행거리", ge=0
    )
    cost: Optional[float] = Field(None, description="비용", ge=0)
    provider: Optional[str] = Field(None, description="서비스 제공자 (정비소)")
    providerContact: Optional[str] = Field(None, description="서비스 제공자 연락처")
    documents: List[str] = Field([], description="관련 문서 URL")
    notes: Optional[str] = Field(None, description="메모")
    vehicleId: str = Field(..., description="차량 ID")

    @validator("endDate")
    def end_date_after_start_date(cls, v, values):
        """종료일이 시작일 이후인지 확인"""
        if v is not None and "startDate" in values and v < values["startDate"]:
            raise ValueError("종료일은 시작일 이후여야 합니다")
        return v


class MaintenanceCreate(MaintenanceBase):
    """유지보수 생성 모델"""

    organizationId: str = Field(..., description="조직 ID")
    parts: Optional[List[MaintenancePartCreate]] = Field([], description="사용된 부품")


class MaintenanceUpdate(BaseModel):
    """유지보수 업데이트 모델"""

    title: Optional[str] = None
    description: Optional[str] = None
    maintenanceType: Optional[MaintenanceType] = None
    status: Optional[MaintenanceStatus] = None
    startDate: Optional[datetime] = None
    endDate: Optional[datetime] = None
    mileageAtService: Optional[int] = Field(None, ge=0)
    cost: Optional[float] = Field(None, ge=0)
    provider: Optional[str] = None
    providerContact: Optional[str] = None
    documents: Optional[List[str]] = None
    notes: Optional[str] = None
    vehicleId: Optional[str] = None
    organizationId: Optional[str] = None

    @validator("endDate")
    def end_date_after_start_date(cls, v, values):
        """종료일이 시작일 이후인지 확인"""
        if (
            v is not None
            and "startDate" in values
            and values["startDate"] is not None
            and v < values["startDate"]
        ):
            raise ValueError("종료일은 시작일 이후여야 합니다")
        return v


class MaintenanceResponse(MaintenanceBase):
    """유지보수 응답 모델"""

    id: str
    organizationId: str
    parts: List[MaintenancePartResponse]
    createdAt: datetime
    updatedAt: datetime

    model_config = {"from_attributes": True}  # Pydantic v2 형식


class MaintenanceFilters(BaseModel):
    """유지보수 필터링 옵션"""

    vehicleId: Optional[str] = None
    organizationId: Optional[str] = None
    maintenanceType: Optional[MaintenanceType] = None
    status: Optional[MaintenanceStatus] = None
    startDateFrom: Optional[datetime] = None
    startDateTo: Optional[datetime] = None
    title: Optional[str] = None
    page: int = Field(1, ge=1, description="페이지 번호")
    pageSize: int = Field(10, ge=1, le=100, description="페이지 크기")


class MaintenanceListResponse(BaseModel):
    """유지보수 목록 응답"""

    items: List[MaintenanceResponse]
    total: int
    page: int
    pageSize: int
    totalPages: int
