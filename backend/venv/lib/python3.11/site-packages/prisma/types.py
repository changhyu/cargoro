# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _UserRoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.UserRole']]


class _UserRoleListFilterHasInput(TypedDict):
    has: 'enums.UserRole'


class _UserRoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.UserRole']


class _UserRoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.UserRole']


class _UserRoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


UserRoleListFilter = Union[
    _UserRoleListFilterHasInput,
    _UserRoleListFilterEqualsInput,
    _UserRoleListFilterHasSomeInput,
    _UserRoleListFilterIsEmptyInput,
    _UserRoleListFilterHasEveryInput,
]


class _UserRoleListUpdateSet(TypedDict):
    set: List['enums.UserRole']


class _UserRoleListUpdatePush(TypedDict):
    push: List['enums.UserRole']


UserRoleListUpdate = Union[
    List['enums.UserRole'],
    _UserRoleListUpdateSet,
    _UserRoleListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    phone: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    permissions: 'UserPermissionCreateManyNestedWithoutRelationsInput'
    organizations: 'OrganizationMemberCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    phone: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'
    phone: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    permissions: 'UserPermissionUpdateManyWithoutRelationsInput'
    organizations: 'OrganizationMemberUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'
    phone: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_passwordHash_OrderByInput = TypedDict(
    '_User_passwordHash_OrderByInput',
    {
        'passwordHash': 'SortOrder',
    },
    total=True
)

_User_fullName_OrderByInput = TypedDict(
    '_User_fullName_OrderByInput',
    {
        'fullName': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_phone_OrderByInput = TypedDict(
    '_User_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_User_isActive_OrderByInput = TypedDict(
    '_User_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_passwordHash_OrderByInput',
    '_User_fullName_OrderByInput',
    '_User_role_OrderByInput',
    '_User_phone_OrderByInput',
    '_User_isActive_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUser']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserRecursive1']


class PermissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserRecursive2']


class PermissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserRecursive3']


class PermissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserRecursive4']


class PermissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserRecursive1']


class UserPermissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserRecursive2']


class UserPermissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserRecursive3']


class UserPermissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserRecursive4']


class UserPermissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    permission: Union[bool, 'PermissionArgsFromUserRecursive1']


class RolePermissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    permission: Union[bool, 'PermissionArgsFromUserRecursive2']


class RolePermissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    permission: Union[bool, 'PermissionArgsFromUserRecursive3']


class RolePermissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    permission: Union[bool, 'PermissionArgsFromUserRecursive4']


class RolePermissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class RolePermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyRolePermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive1']


class OrganizationIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive2']


class OrganizationIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive3']


class OrganizationIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive4']


class OrganizationIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class OrganizationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyOrganizationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive1']


class OrganizationMemberIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive2']


class OrganizationMemberIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive3']


class OrganizationMemberIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive4']


class OrganizationMemberIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class OrganizationMemberArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyOrganizationMemberArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    fullName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    phone: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    permissions: 'UserPermissionListRelationFilter'
    organizations: 'OrganizationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    fullName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    phone: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    permissions: 'UserPermissionListRelationFilter'
    organizations: 'OrganizationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    fullName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    phone: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    permissions: 'UserPermissionListRelationFilter'
    organizations: 'OrganizationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    fullName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    phone: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    permissions: 'UserPermissionListRelationFilter'
    organizations: 'OrganizationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    fullName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    phone: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    permissions: 'UserPermissionListRelationFilter'
    organizations: 'OrganizationMemberListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    fullName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    fullName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    fullName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    fullName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    fullName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'
    phone: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'
    phone: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    passwordHash: bool
    fullName: bool
    role: bool
    phone: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    passwordHash: bool
    fullName: bool
    role: bool
    phone: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'passwordHash': bool,
        'fullName': bool,
        'role': bool,
        'phone': bool,
        'isActive': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'passwordHash': int,
        'fullName': int,
        'role': int,
        'phone': int,
        'isActive': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'passwordHash',
    'fullName',
    'role',
    'phone',
    'isActive',
    'createdAt',
    'updatedAt',
    'permissions',
    'organizations',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'passwordHash',
    'fullName',
    'role',
    'phone',
    'isActive',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'permissions',
        'organizations',
    ]

# Permission types

class PermissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Permission create method"""
    id: _str
    description: Optional[_str]
    isActive: _bool
    userPermissions: 'UserPermissionCreateManyNestedWithoutRelationsInput'
    rolePermissions: 'RolePermissionCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PermissionCreateInput(PermissionOptionalCreateInput):
    """Required arguments to the Permission create method"""
    code: _str
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PermissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Permission create method, without relations"""
    id: _str
    description: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PermissionCreateWithoutRelationsInput(PermissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Permission create method, without relations"""
    code: _str
    name: _str

class PermissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PermissionCreateWithoutRelationsInput'
    where: 'PermissionWhereUniqueInput'

class PermissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PermissionCreateWithoutRelationsInput'
    connect: 'PermissionWhereUniqueInput'
    connect_or_create: 'PermissionConnectOrCreateWithoutRelationsInput'


class PermissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PermissionCreateWithoutRelationsInput', List['PermissionCreateWithoutRelationsInput']]
    connect: Union['PermissionWhereUniqueInput', List['PermissionWhereUniqueInput']]
    connect_or_create: Union['PermissionConnectOrCreateWithoutRelationsInput', List['PermissionConnectOrCreateWithoutRelationsInput']]

_PermissionWhereUnique_id_Input = TypedDict(
    '_PermissionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PermissionWhereUnique_code_Input = TypedDict(
    '_PermissionWhereUnique_code_Input',
    {
        'code': '_str',
    },
    total=True
)

PermissionWhereUniqueInput = Union[
    '_PermissionWhereUnique_id_Input',
    '_PermissionWhereUnique_code_Input',
]


class PermissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    code: _str
    name: _str
    description: Optional[_str]
    isActive: _bool
    userPermissions: 'UserPermissionUpdateManyWithoutRelationsInput'
    rolePermissions: 'RolePermissionUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PermissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    code: _str
    name: _str
    description: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PermissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PermissionCreateWithoutRelationsInput']
    connect: List['PermissionWhereUniqueInput']
    connect_or_create: List['PermissionConnectOrCreateWithoutRelationsInput']
    set: List['PermissionWhereUniqueInput']
    disconnect: List['PermissionWhereUniqueInput']
    delete: List['PermissionWhereUniqueInput']

    # TODO
    # update: List['PermissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PermissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PermissionScalarWhereInput']
    # upsert: List['PermissionUpserteWithWhereUniqueWithoutRelationsInput']


class PermissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PermissionCreateWithoutRelationsInput'
    connect: 'PermissionWhereUniqueInput'
    connect_or_create: 'PermissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PermissionUpdateInput'
    # upsert: 'PermissionUpsertWithoutRelationsInput'


class PermissionUpsertInput(TypedDict):
    create: 'PermissionCreateInput'
    update: 'PermissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Permission_id_OrderByInput = TypedDict(
    '_Permission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Permission_code_OrderByInput = TypedDict(
    '_Permission_code_OrderByInput',
    {
        'code': 'SortOrder',
    },
    total=True
)

_Permission_name_OrderByInput = TypedDict(
    '_Permission_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Permission_description_OrderByInput = TypedDict(
    '_Permission_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Permission_isActive_OrderByInput = TypedDict(
    '_Permission_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_Permission_createdAt_OrderByInput = TypedDict(
    '_Permission_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Permission_updatedAt_OrderByInput = TypedDict(
    '_Permission_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Permission_RelevanceInner = TypedDict(
    '_Permission_RelevanceInner',
    {
        'fields': 'List[PermissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Permission_RelevanceOrderByInput = TypedDict(
    '_Permission_RelevanceOrderByInput',
    {
        '_relevance': '_Permission_RelevanceInner',
    },
    total=True
)

PermissionOrderByInput = Union[
    '_Permission_id_OrderByInput',
    '_Permission_code_OrderByInput',
    '_Permission_name_OrderByInput',
    '_Permission_description_OrderByInput',
    '_Permission_isActive_OrderByInput',
    '_Permission_createdAt_OrderByInput',
    '_Permission_updatedAt_OrderByInput',
    '_Permission_RelevanceOrderByInput',
]



# recursive Permission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PermissionRelationFilter = TypedDict(
    'PermissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PermissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PermissionInclude(TypedDict, total=False):
    """Permission relational arguments"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromPermission']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromPermission']


    

class UserIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive1']


class UserIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive2']


class UserIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive3']


class UserIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive4']


class UserIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class UserArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyUserArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromPermissionRecursive1']


class PermissionIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromPermissionRecursive2']


class PermissionIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromPermissionRecursive3']


class PermissionIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromPermissionRecursive4']


class PermissionIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class PermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive1']


class UserPermissionIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive2']


class UserPermissionIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive3']


class UserPermissionIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive4']


class UserPermissionIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class UserPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyUserPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive1']


class RolePermissionIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive2']


class RolePermissionIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive3']


class RolePermissionIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive4']


class RolePermissionIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class RolePermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyRolePermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive1']


class OrganizationIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive2']


class OrganizationIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive3']


class OrganizationIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive4']


class OrganizationIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class OrganizationArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyOrganizationArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive1']


class OrganizationMemberIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive2']


class OrganizationMemberIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive3']


class OrganizationMemberIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive4']


class OrganizationMemberIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class OrganizationMemberArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyOrganizationMemberArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    


FindManyPermissionArgs = FindManyPermissionArgsFromPermission
FindFirstPermissionArgs = FindManyPermissionArgsFromPermission


    

class PermissionWhereInput(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    userPermissions: 'UserPermissionListRelationFilter'
    rolePermissions: 'RolePermissionListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive1', List['PermissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive1']
    OR: List['PermissionWhereInputRecursive1']
    NOT: List['PermissionWhereInputRecursive1']


class PermissionWhereInputRecursive1(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    userPermissions: 'UserPermissionListRelationFilter'
    rolePermissions: 'RolePermissionListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive2', List['PermissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive2']
    OR: List['PermissionWhereInputRecursive2']
    NOT: List['PermissionWhereInputRecursive2']


class PermissionWhereInputRecursive2(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    userPermissions: 'UserPermissionListRelationFilter'
    rolePermissions: 'RolePermissionListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive3', List['PermissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive3']
    OR: List['PermissionWhereInputRecursive3']
    NOT: List['PermissionWhereInputRecursive3']


class PermissionWhereInputRecursive3(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    userPermissions: 'UserPermissionListRelationFilter'
    rolePermissions: 'RolePermissionListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive4', List['PermissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive4']
    OR: List['PermissionWhereInputRecursive4']
    NOT: List['PermissionWhereInputRecursive4']


class PermissionWhereInputRecursive4(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    userPermissions: 'UserPermissionListRelationFilter'
    rolePermissions: 'RolePermissionListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Permission types


    

class PermissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive1']


class PermissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive2']


class PermissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive3']


class PermissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive4']


class PermissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PermissionGroupByOutput(TypedDict, total=False):
    id: _str
    code: _str
    name: _str
    description: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PermissionSumAggregateOutput'
    _avg: 'PermissionAvgAggregateOutput'
    _min: 'PermissionMinAggregateOutput'
    _max: 'PermissionMaxAggregateOutput'
    _count: 'PermissionCountAggregateOutput'


class PermissionAvgAggregateOutput(TypedDict, total=False):
    """Permission output for aggregating averages"""


class PermissionSumAggregateOutput(TypedDict, total=False):
    """Permission output for aggregating sums"""


class PermissionScalarAggregateOutput(TypedDict, total=False):
    """Permission output including scalar fields"""
    id: _str
    code: _str
    name: _str
    description: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PermissionMinAggregateOutput = PermissionScalarAggregateOutput
PermissionMaxAggregateOutput = PermissionScalarAggregateOutput


class PermissionMaxAggregateInput(TypedDict, total=False):
    """Permission input for aggregating by max"""
    id: bool
    code: bool
    name: bool
    description: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class PermissionMinAggregateInput(TypedDict, total=False):
    """Permission input for aggregating by min"""
    id: bool
    code: bool
    name: bool
    description: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class PermissionNumberAggregateInput(TypedDict, total=False):
    """Permission input for aggregating numbers"""


PermissionAvgAggregateInput = PermissionNumberAggregateInput
PermissionSumAggregateInput = PermissionNumberAggregateInput


PermissionCountAggregateInput = TypedDict(
    'PermissionCountAggregateInput',
    {
        'id': bool,
        'code': bool,
        'name': bool,
        'description': bool,
        'isActive': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PermissionCountAggregateOutput = TypedDict(
    'PermissionCountAggregateOutput',
    {
        'id': int,
        'code': int,
        'name': int,
        'description': int,
        'isActive': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PermissionKeys = Literal[
    'id',
    'code',
    'name',
    'description',
    'isActive',
    'userPermissions',
    'rolePermissions',
    'createdAt',
    'updatedAt',
]
PermissionScalarFieldKeys = Literal[
    'id',
    'code',
    'name',
    'description',
    'isActive',
    'createdAt',
    'updatedAt',
]
PermissionScalarFieldKeysT = TypeVar('PermissionScalarFieldKeysT', bound=PermissionScalarFieldKeys)

PermissionRelationalFieldKeys = Literal[
        'userPermissions',
        'rolePermissions',
    ]

# UserPermission types

class UserPermissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserPermission create method"""
    id: _str
    userId: _str
    permissionId: _str
    granted: _bool
    user: 'UserCreateNestedWithoutRelationsInput'
    permission: 'PermissionCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserPermissionCreateInput(UserPermissionOptionalCreateInput):
    """Required arguments to the UserPermission create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserPermissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserPermission create method, without relations"""
    id: _str
    userId: _str
    permissionId: _str
    granted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserPermissionCreateWithoutRelationsInput(UserPermissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserPermission create method, without relations"""

class UserPermissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserPermissionCreateWithoutRelationsInput'
    where: 'UserPermissionWhereUniqueInput'

class UserPermissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserPermissionCreateWithoutRelationsInput'
    connect: 'UserPermissionWhereUniqueInput'
    connect_or_create: 'UserPermissionConnectOrCreateWithoutRelationsInput'


class UserPermissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserPermissionCreateWithoutRelationsInput', List['UserPermissionCreateWithoutRelationsInput']]
    connect: Union['UserPermissionWhereUniqueInput', List['UserPermissionWhereUniqueInput']]
    connect_or_create: Union['UserPermissionConnectOrCreateWithoutRelationsInput', List['UserPermissionConnectOrCreateWithoutRelationsInput']]

_UserPermissionWhereUnique_id_Input = TypedDict(
    '_UserPermissionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserPermissionCompounduserId_permissionIdKeyInner = TypedDict(
    '_UserPermissionCompounduserId_permissionIdKeyInner',
    {
        'userId': '_str',
        'permissionId': '_str',
    },
    total=True
)

_UserPermissionCompounduserId_permissionIdKey = TypedDict(
    '_UserPermissionCompounduserId_permissionIdKey',
    {
        'userId_permissionId': '_UserPermissionCompounduserId_permissionIdKeyInner',
    },
    total=True
)

UserPermissionWhereUniqueInput = Union[
    '_UserPermissionWhereUnique_id_Input',
    '_UserPermissionCompounduserId_permissionIdKey',
]


class UserPermissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    granted: _bool
    user: 'UserUpdateOneWithoutRelationsInput'
    permission: 'PermissionUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserPermissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    granted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserPermissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserPermissionCreateWithoutRelationsInput']
    connect: List['UserPermissionWhereUniqueInput']
    connect_or_create: List['UserPermissionConnectOrCreateWithoutRelationsInput']
    set: List['UserPermissionWhereUniqueInput']
    disconnect: List['UserPermissionWhereUniqueInput']
    delete: List['UserPermissionWhereUniqueInput']

    # TODO
    # update: List['UserPermissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserPermissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserPermissionScalarWhereInput']
    # upsert: List['UserPermissionUpserteWithWhereUniqueWithoutRelationsInput']


class UserPermissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserPermissionCreateWithoutRelationsInput'
    connect: 'UserPermissionWhereUniqueInput'
    connect_or_create: 'UserPermissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserPermissionUpdateInput'
    # upsert: 'UserPermissionUpsertWithoutRelationsInput'


class UserPermissionUpsertInput(TypedDict):
    create: 'UserPermissionCreateInput'
    update: 'UserPermissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserPermission_id_OrderByInput = TypedDict(
    '_UserPermission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserPermission_userId_OrderByInput = TypedDict(
    '_UserPermission_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserPermission_permissionId_OrderByInput = TypedDict(
    '_UserPermission_permissionId_OrderByInput',
    {
        'permissionId': 'SortOrder',
    },
    total=True
)

_UserPermission_granted_OrderByInput = TypedDict(
    '_UserPermission_granted_OrderByInput',
    {
        'granted': 'SortOrder',
    },
    total=True
)

_UserPermission_createdAt_OrderByInput = TypedDict(
    '_UserPermission_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_UserPermission_updatedAt_OrderByInput = TypedDict(
    '_UserPermission_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_UserPermission_RelevanceInner = TypedDict(
    '_UserPermission_RelevanceInner',
    {
        'fields': 'List[UserPermissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserPermission_RelevanceOrderByInput = TypedDict(
    '_UserPermission_RelevanceOrderByInput',
    {
        '_relevance': '_UserPermission_RelevanceInner',
    },
    total=True
)

UserPermissionOrderByInput = Union[
    '_UserPermission_id_OrderByInput',
    '_UserPermission_userId_OrderByInput',
    '_UserPermission_permissionId_OrderByInput',
    '_UserPermission_granted_OrderByInput',
    '_UserPermission_createdAt_OrderByInput',
    '_UserPermission_updatedAt_OrderByInput',
    '_UserPermission_RelevanceOrderByInput',
]



# recursive UserPermission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserPermissionRelationFilter = TypedDict(
    'UserPermissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserPermissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserPermissionInclude(TypedDict, total=False):
    """UserPermission relational arguments"""
    user: Union[bool, 'UserArgsFromUserPermission']
    permission: Union[bool, 'PermissionArgsFromUserPermission']


    

class UserIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive1']


class UserIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive2']


class UserIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive3']


class UserIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive4']


class UserIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class UserArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyUserArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserPermissionRecursive1']


class PermissionIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserPermissionRecursive2']


class PermissionIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserPermissionRecursive3']


class PermissionIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserPermissionRecursive4']


class PermissionIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class PermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive1']


class UserPermissionIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive2']


class UserPermissionIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive3']


class UserPermissionIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive4']


class UserPermissionIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class UserPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyUserPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive1']


class RolePermissionIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive2']


class RolePermissionIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive3']


class RolePermissionIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive4']


class RolePermissionIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class RolePermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyRolePermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive1']


class OrganizationIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive2']


class OrganizationIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive3']


class OrganizationIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive4']


class OrganizationIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class OrganizationArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyOrganizationArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive1']


class OrganizationMemberIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive2']


class OrganizationMemberIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive3']


class OrganizationMemberIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive4']


class OrganizationMemberIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class OrganizationMemberArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyOrganizationMemberArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    


FindManyUserPermissionArgs = FindManyUserPermissionArgsFromUserPermission
FindFirstUserPermissionArgs = FindManyUserPermissionArgsFromUserPermission


    

class UserPermissionWhereInput(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    permissionId: Union[_str, 'types.StringFilter']
    granted: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive1', List['UserPermissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive1']
    OR: List['UserPermissionWhereInputRecursive1']
    NOT: List['UserPermissionWhereInputRecursive1']


class UserPermissionWhereInputRecursive1(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    permissionId: Union[_str, 'types.StringFilter']
    granted: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive2', List['UserPermissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive2']
    OR: List['UserPermissionWhereInputRecursive2']
    NOT: List['UserPermissionWhereInputRecursive2']


class UserPermissionWhereInputRecursive2(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    permissionId: Union[_str, 'types.StringFilter']
    granted: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive3', List['UserPermissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive3']
    OR: List['UserPermissionWhereInputRecursive3']
    NOT: List['UserPermissionWhereInputRecursive3']


class UserPermissionWhereInputRecursive3(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    permissionId: Union[_str, 'types.StringFilter']
    granted: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive4', List['UserPermissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive4']
    OR: List['UserPermissionWhereInputRecursive4']
    NOT: List['UserPermissionWhereInputRecursive4']


class UserPermissionWhereInputRecursive4(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    permissionId: Union[_str, 'types.StringFilter']
    granted: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate UserPermission types


    

class UserPermissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    granted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive1']


class UserPermissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    granted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive2']


class UserPermissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    granted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive3']


class UserPermissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    granted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive4']


class UserPermissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    granted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserPermissionGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    permissionId: _str
    granted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserPermissionSumAggregateOutput'
    _avg: 'UserPermissionAvgAggregateOutput'
    _min: 'UserPermissionMinAggregateOutput'
    _max: 'UserPermissionMaxAggregateOutput'
    _count: 'UserPermissionCountAggregateOutput'


class UserPermissionAvgAggregateOutput(TypedDict, total=False):
    """UserPermission output for aggregating averages"""


class UserPermissionSumAggregateOutput(TypedDict, total=False):
    """UserPermission output for aggregating sums"""


class UserPermissionScalarAggregateOutput(TypedDict, total=False):
    """UserPermission output including scalar fields"""
    id: _str
    userId: _str
    permissionId: _str
    granted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserPermissionMinAggregateOutput = UserPermissionScalarAggregateOutput
UserPermissionMaxAggregateOutput = UserPermissionScalarAggregateOutput


class UserPermissionMaxAggregateInput(TypedDict, total=False):
    """UserPermission input for aggregating by max"""
    id: bool
    userId: bool
    permissionId: bool
    granted: bool
    createdAt: bool
    updatedAt: bool


class UserPermissionMinAggregateInput(TypedDict, total=False):
    """UserPermission input for aggregating by min"""
    id: bool
    userId: bool
    permissionId: bool
    granted: bool
    createdAt: bool
    updatedAt: bool


class UserPermissionNumberAggregateInput(TypedDict, total=False):
    """UserPermission input for aggregating numbers"""


UserPermissionAvgAggregateInput = UserPermissionNumberAggregateInput
UserPermissionSumAggregateInput = UserPermissionNumberAggregateInput


UserPermissionCountAggregateInput = TypedDict(
    'UserPermissionCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'permissionId': bool,
        'granted': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserPermissionCountAggregateOutput = TypedDict(
    'UserPermissionCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'permissionId': int,
        'granted': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserPermissionKeys = Literal[
    'id',
    'userId',
    'permissionId',
    'granted',
    'user',
    'permission',
    'createdAt',
    'updatedAt',
]
UserPermissionScalarFieldKeys = Literal[
    'id',
    'userId',
    'permissionId',
    'granted',
    'createdAt',
    'updatedAt',
]
UserPermissionScalarFieldKeysT = TypeVar('UserPermissionScalarFieldKeysT', bound=UserPermissionScalarFieldKeys)

UserPermissionRelationalFieldKeys = Literal[
        'user',
        'permission',
    ]

# RolePermission types

class RolePermissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the RolePermission create method"""
    id: _str
    permissionId: _str
    permission: 'PermissionCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class RolePermissionCreateInput(RolePermissionOptionalCreateInput):
    """Required arguments to the RolePermission create method"""
    role: 'enums.UserRole'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RolePermissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the RolePermission create method, without relations"""
    id: _str
    permissionId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class RolePermissionCreateWithoutRelationsInput(RolePermissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the RolePermission create method, without relations"""
    role: 'enums.UserRole'

class RolePermissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'RolePermissionCreateWithoutRelationsInput'
    where: 'RolePermissionWhereUniqueInput'

class RolePermissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RolePermissionCreateWithoutRelationsInput'
    connect: 'RolePermissionWhereUniqueInput'
    connect_or_create: 'RolePermissionConnectOrCreateWithoutRelationsInput'


class RolePermissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RolePermissionCreateWithoutRelationsInput', List['RolePermissionCreateWithoutRelationsInput']]
    connect: Union['RolePermissionWhereUniqueInput', List['RolePermissionWhereUniqueInput']]
    connect_or_create: Union['RolePermissionConnectOrCreateWithoutRelationsInput', List['RolePermissionConnectOrCreateWithoutRelationsInput']]

_RolePermissionWhereUnique_id_Input = TypedDict(
    '_RolePermissionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_RolePermissionCompoundrole_permissionIdKeyInner = TypedDict(
    '_RolePermissionCompoundrole_permissionIdKeyInner',
    {
        'role': 'enums.UserRole',
        'permissionId': '_str',
    },
    total=True
)

_RolePermissionCompoundrole_permissionIdKey = TypedDict(
    '_RolePermissionCompoundrole_permissionIdKey',
    {
        'role_permissionId': '_RolePermissionCompoundrole_permissionIdKeyInner',
    },
    total=True
)

RolePermissionWhereUniqueInput = Union[
    '_RolePermissionWhereUnique_id_Input',
    '_RolePermissionCompoundrole_permissionIdKey',
]


class RolePermissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    role: 'enums.UserRole'
    permission: 'PermissionUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class RolePermissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    role: 'enums.UserRole'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class RolePermissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RolePermissionCreateWithoutRelationsInput']
    connect: List['RolePermissionWhereUniqueInput']
    connect_or_create: List['RolePermissionConnectOrCreateWithoutRelationsInput']
    set: List['RolePermissionWhereUniqueInput']
    disconnect: List['RolePermissionWhereUniqueInput']
    delete: List['RolePermissionWhereUniqueInput']

    # TODO
    # update: List['RolePermissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RolePermissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RolePermissionScalarWhereInput']
    # upsert: List['RolePermissionUpserteWithWhereUniqueWithoutRelationsInput']


class RolePermissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RolePermissionCreateWithoutRelationsInput'
    connect: 'RolePermissionWhereUniqueInput'
    connect_or_create: 'RolePermissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RolePermissionUpdateInput'
    # upsert: 'RolePermissionUpsertWithoutRelationsInput'


class RolePermissionUpsertInput(TypedDict):
    create: 'RolePermissionCreateInput'
    update: 'RolePermissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_RolePermission_id_OrderByInput = TypedDict(
    '_RolePermission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_RolePermission_role_OrderByInput = TypedDict(
    '_RolePermission_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_RolePermission_permissionId_OrderByInput = TypedDict(
    '_RolePermission_permissionId_OrderByInput',
    {
        'permissionId': 'SortOrder',
    },
    total=True
)

_RolePermission_createdAt_OrderByInput = TypedDict(
    '_RolePermission_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_RolePermission_updatedAt_OrderByInput = TypedDict(
    '_RolePermission_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_RolePermission_RelevanceInner = TypedDict(
    '_RolePermission_RelevanceInner',
    {
        'fields': 'List[RolePermissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_RolePermission_RelevanceOrderByInput = TypedDict(
    '_RolePermission_RelevanceOrderByInput',
    {
        '_relevance': '_RolePermission_RelevanceInner',
    },
    total=True
)

RolePermissionOrderByInput = Union[
    '_RolePermission_id_OrderByInput',
    '_RolePermission_role_OrderByInput',
    '_RolePermission_permissionId_OrderByInput',
    '_RolePermission_createdAt_OrderByInput',
    '_RolePermission_updatedAt_OrderByInput',
    '_RolePermission_RelevanceOrderByInput',
]



# recursive RolePermission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RolePermissionRelationFilter = TypedDict(
    'RolePermissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RolePermissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RolePermissionInclude(TypedDict, total=False):
    """RolePermission relational arguments"""
    permission: Union[bool, 'PermissionArgsFromRolePermission']


    

class UserIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive1']


class UserIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive2']


class UserIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive3']


class UserIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive4']


class UserIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class UserArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyUserArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRolePermissionRecursive1']


class PermissionIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRolePermissionRecursive2']


class PermissionIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRolePermissionRecursive3']


class PermissionIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRolePermissionRecursive4']


class PermissionIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class PermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyPermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive1']


class UserPermissionIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive2']


class UserPermissionIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive3']


class UserPermissionIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive4']


class UserPermissionIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class UserPermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyUserPermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive1']


class RolePermissionIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive2']


class RolePermissionIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive3']


class RolePermissionIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive4']


class RolePermissionIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class RolePermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyRolePermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive1']


class OrganizationIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive2']


class OrganizationIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive3']


class OrganizationIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive4']


class OrganizationIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class OrganizationArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyOrganizationArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive1']


class OrganizationMemberIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive2']


class OrganizationMemberIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive3']


class OrganizationMemberIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive4']


class OrganizationMemberIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class OrganizationMemberArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyOrganizationMemberArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    


FindManyRolePermissionArgs = FindManyRolePermissionArgsFromRolePermission
FindFirstRolePermissionArgs = FindManyRolePermissionArgsFromRolePermission


    

class RolePermissionWhereInput(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringFilter']
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RolePermissionWhereInputRecursive1', List['RolePermissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RolePermissionWhereInputRecursive1']
    OR: List['RolePermissionWhereInputRecursive1']
    NOT: List['RolePermissionWhereInputRecursive1']


class RolePermissionWhereInputRecursive1(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringFilter']
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RolePermissionWhereInputRecursive2', List['RolePermissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RolePermissionWhereInputRecursive2']
    OR: List['RolePermissionWhereInputRecursive2']
    NOT: List['RolePermissionWhereInputRecursive2']


class RolePermissionWhereInputRecursive2(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringFilter']
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RolePermissionWhereInputRecursive3', List['RolePermissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RolePermissionWhereInputRecursive3']
    OR: List['RolePermissionWhereInputRecursive3']
    NOT: List['RolePermissionWhereInputRecursive3']


class RolePermissionWhereInputRecursive3(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringFilter']
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RolePermissionWhereInputRecursive4', List['RolePermissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RolePermissionWhereInputRecursive4']
    OR: List['RolePermissionWhereInputRecursive4']
    NOT: List['RolePermissionWhereInputRecursive4']


class RolePermissionWhereInputRecursive4(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringFilter']
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate RolePermission types


    

class RolePermissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RolePermissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['RolePermissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RolePermissionScalarWhereWithAggregatesInputRecursive1']


class RolePermissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RolePermissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['RolePermissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RolePermissionScalarWhereWithAggregatesInputRecursive2']


class RolePermissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RolePermissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['RolePermissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RolePermissionScalarWhereWithAggregatesInputRecursive3']


class RolePermissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RolePermissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['RolePermissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RolePermissionScalarWhereWithAggregatesInputRecursive4']


class RolePermissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class RolePermissionGroupByOutput(TypedDict, total=False):
    id: _str
    role: 'enums.UserRole'
    permissionId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'RolePermissionSumAggregateOutput'
    _avg: 'RolePermissionAvgAggregateOutput'
    _min: 'RolePermissionMinAggregateOutput'
    _max: 'RolePermissionMaxAggregateOutput'
    _count: 'RolePermissionCountAggregateOutput'


class RolePermissionAvgAggregateOutput(TypedDict, total=False):
    """RolePermission output for aggregating averages"""


class RolePermissionSumAggregateOutput(TypedDict, total=False):
    """RolePermission output for aggregating sums"""


class RolePermissionScalarAggregateOutput(TypedDict, total=False):
    """RolePermission output including scalar fields"""
    id: _str
    role: 'enums.UserRole'
    permissionId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


RolePermissionMinAggregateOutput = RolePermissionScalarAggregateOutput
RolePermissionMaxAggregateOutput = RolePermissionScalarAggregateOutput


class RolePermissionMaxAggregateInput(TypedDict, total=False):
    """RolePermission input for aggregating by max"""
    id: bool
    role: bool
    permissionId: bool
    createdAt: bool
    updatedAt: bool


class RolePermissionMinAggregateInput(TypedDict, total=False):
    """RolePermission input for aggregating by min"""
    id: bool
    role: bool
    permissionId: bool
    createdAt: bool
    updatedAt: bool


class RolePermissionNumberAggregateInput(TypedDict, total=False):
    """RolePermission input for aggregating numbers"""


RolePermissionAvgAggregateInput = RolePermissionNumberAggregateInput
RolePermissionSumAggregateInput = RolePermissionNumberAggregateInput


RolePermissionCountAggregateInput = TypedDict(
    'RolePermissionCountAggregateInput',
    {
        'id': bool,
        'role': bool,
        'permissionId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

RolePermissionCountAggregateOutput = TypedDict(
    'RolePermissionCountAggregateOutput',
    {
        'id': int,
        'role': int,
        'permissionId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


RolePermissionKeys = Literal[
    'id',
    'role',
    'permissionId',
    'permission',
    'createdAt',
    'updatedAt',
]
RolePermissionScalarFieldKeys = Literal[
    'id',
    'role',
    'permissionId',
    'createdAt',
    'updatedAt',
]
RolePermissionScalarFieldKeysT = TypeVar('RolePermissionScalarFieldKeysT', bound=RolePermissionScalarFieldKeys)

RolePermissionRelationalFieldKeys = Literal[
        'permission',
    ]

# Organization types

class OrganizationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Organization create method"""
    id: _str
    description: Optional[_str]
    businessNumber: Optional[_str]
    address: Optional[_str]
    phone: Optional[_str]
    email: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    members: 'OrganizationMemberCreateManyNestedWithoutRelationsInput'


class OrganizationCreateInput(OrganizationOptionalCreateInput):
    """Required arguments to the Organization create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class OrganizationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Organization create method, without relations"""
    id: _str
    description: Optional[_str]
    businessNumber: Optional[_str]
    address: Optional[_str]
    phone: Optional[_str]
    email: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class OrganizationCreateWithoutRelationsInput(OrganizationOptionalCreateWithoutRelationsInput):
    """Required arguments to the Organization create method, without relations"""
    name: _str

class OrganizationConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'OrganizationCreateWithoutRelationsInput'
    where: 'OrganizationWhereUniqueInput'

class OrganizationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'OrganizationCreateWithoutRelationsInput'
    connect: 'OrganizationWhereUniqueInput'
    connect_or_create: 'OrganizationConnectOrCreateWithoutRelationsInput'


class OrganizationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['OrganizationCreateWithoutRelationsInput', List['OrganizationCreateWithoutRelationsInput']]
    connect: Union['OrganizationWhereUniqueInput', List['OrganizationWhereUniqueInput']]
    connect_or_create: Union['OrganizationConnectOrCreateWithoutRelationsInput', List['OrganizationConnectOrCreateWithoutRelationsInput']]

_OrganizationWhereUnique_id_Input = TypedDict(
    '_OrganizationWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_OrganizationWhereUnique_businessNumber_Input = TypedDict(
    '_OrganizationWhereUnique_businessNumber_Input',
    {
        'businessNumber': '_str',
    },
    total=True
)

OrganizationWhereUniqueInput = Union[
    '_OrganizationWhereUnique_id_Input',
    '_OrganizationWhereUnique_businessNumber_Input',
]


class OrganizationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]
    businessNumber: Optional[_str]
    address: Optional[_str]
    phone: Optional[_str]
    email: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    members: 'OrganizationMemberUpdateManyWithoutRelationsInput'


class OrganizationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]
    businessNumber: Optional[_str]
    address: Optional[_str]
    phone: Optional[_str]
    email: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class OrganizationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['OrganizationCreateWithoutRelationsInput']
    connect: List['OrganizationWhereUniqueInput']
    connect_or_create: List['OrganizationConnectOrCreateWithoutRelationsInput']
    set: List['OrganizationWhereUniqueInput']
    disconnect: List['OrganizationWhereUniqueInput']
    delete: List['OrganizationWhereUniqueInput']

    # TODO
    # update: List['OrganizationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['OrganizationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['OrganizationScalarWhereInput']
    # upsert: List['OrganizationUpserteWithWhereUniqueWithoutRelationsInput']


class OrganizationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'OrganizationCreateWithoutRelationsInput'
    connect: 'OrganizationWhereUniqueInput'
    connect_or_create: 'OrganizationConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'OrganizationUpdateInput'
    # upsert: 'OrganizationUpsertWithoutRelationsInput'


class OrganizationUpsertInput(TypedDict):
    create: 'OrganizationCreateInput'
    update: 'OrganizationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Organization_id_OrderByInput = TypedDict(
    '_Organization_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Organization_name_OrderByInput = TypedDict(
    '_Organization_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Organization_description_OrderByInput = TypedDict(
    '_Organization_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Organization_businessNumber_OrderByInput = TypedDict(
    '_Organization_businessNumber_OrderByInput',
    {
        'businessNumber': 'SortOrder',
    },
    total=True
)

_Organization_address_OrderByInput = TypedDict(
    '_Organization_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_Organization_phone_OrderByInput = TypedDict(
    '_Organization_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_Organization_email_OrderByInput = TypedDict(
    '_Organization_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Organization_isActive_OrderByInput = TypedDict(
    '_Organization_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_Organization_createdAt_OrderByInput = TypedDict(
    '_Organization_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Organization_updatedAt_OrderByInput = TypedDict(
    '_Organization_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Organization_RelevanceInner = TypedDict(
    '_Organization_RelevanceInner',
    {
        'fields': 'List[OrganizationScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Organization_RelevanceOrderByInput = TypedDict(
    '_Organization_RelevanceOrderByInput',
    {
        '_relevance': '_Organization_RelevanceInner',
    },
    total=True
)

OrganizationOrderByInput = Union[
    '_Organization_id_OrderByInput',
    '_Organization_name_OrderByInput',
    '_Organization_description_OrderByInput',
    '_Organization_businessNumber_OrderByInput',
    '_Organization_address_OrderByInput',
    '_Organization_phone_OrderByInput',
    '_Organization_email_OrderByInput',
    '_Organization_isActive_OrderByInput',
    '_Organization_createdAt_OrderByInput',
    '_Organization_updatedAt_OrderByInput',
    '_Organization_RelevanceOrderByInput',
]



# recursive Organization types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

OrganizationRelationFilter = TypedDict(
    'OrganizationRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class OrganizationListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class OrganizationInclude(TypedDict, total=False):
    """Organization relational arguments"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganization']


    

class UserIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive1']


class UserIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive2']


class UserIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive3']


class UserIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive4']


class UserIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class UserArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyUserArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationRecursive1']


class PermissionIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationRecursive2']


class PermissionIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationRecursive3']


class PermissionIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationRecursive4']


class PermissionIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class PermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyPermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive1']
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive1']


class UserPermissionIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive2']
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive2']


class UserPermissionIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive3']
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive3']


class UserPermissionIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive4']
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive4']


class UserPermissionIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class UserPermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyUserPermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive1']


class RolePermissionIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive2']


class RolePermissionIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive3']


class RolePermissionIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive4']


class RolePermissionIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class RolePermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyRolePermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive1']


class OrganizationIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive2']


class OrganizationIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive3']


class OrganizationIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive4']


class OrganizationIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class OrganizationArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyOrganizationArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive1']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive1']


class OrganizationMemberIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive2']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive2']


class OrganizationMemberIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive3']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive3']


class OrganizationMemberIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive4']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive4']


class OrganizationMemberIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class OrganizationMemberArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyOrganizationMemberArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    


FindManyOrganizationArgs = FindManyOrganizationArgsFromOrganization
FindFirstOrganizationArgs = FindManyOrganizationArgsFromOrganization


    

class OrganizationWhereInput(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    businessNumber: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    members: 'OrganizationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationWhereInputRecursive1', List['OrganizationWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['OrganizationWhereInputRecursive1']
    OR: List['OrganizationWhereInputRecursive1']
    NOT: List['OrganizationWhereInputRecursive1']


class OrganizationWhereInputRecursive1(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    businessNumber: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    members: 'OrganizationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationWhereInputRecursive2', List['OrganizationWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['OrganizationWhereInputRecursive2']
    OR: List['OrganizationWhereInputRecursive2']
    NOT: List['OrganizationWhereInputRecursive2']


class OrganizationWhereInputRecursive2(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    businessNumber: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    members: 'OrganizationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationWhereInputRecursive3', List['OrganizationWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['OrganizationWhereInputRecursive3']
    OR: List['OrganizationWhereInputRecursive3']
    NOT: List['OrganizationWhereInputRecursive3']


class OrganizationWhereInputRecursive3(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    businessNumber: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    members: 'OrganizationMemberListRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationWhereInputRecursive4', List['OrganizationWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['OrganizationWhereInputRecursive4']
    OR: List['OrganizationWhereInputRecursive4']
    NOT: List['OrganizationWhereInputRecursive4']


class OrganizationWhereInputRecursive4(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    businessNumber: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    members: 'OrganizationMemberListRelationFilter'



# aggregate Organization types


    

class OrganizationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    businessNumber: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationScalarWhereWithAggregatesInputRecursive1']
    OR: List['OrganizationScalarWhereWithAggregatesInputRecursive1']
    NOT: List['OrganizationScalarWhereWithAggregatesInputRecursive1']


class OrganizationScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    businessNumber: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationScalarWhereWithAggregatesInputRecursive2']
    OR: List['OrganizationScalarWhereWithAggregatesInputRecursive2']
    NOT: List['OrganizationScalarWhereWithAggregatesInputRecursive2']


class OrganizationScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    businessNumber: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationScalarWhereWithAggregatesInputRecursive3']
    OR: List['OrganizationScalarWhereWithAggregatesInputRecursive3']
    NOT: List['OrganizationScalarWhereWithAggregatesInputRecursive3']


class OrganizationScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    businessNumber: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationScalarWhereWithAggregatesInputRecursive4']
    OR: List['OrganizationScalarWhereWithAggregatesInputRecursive4']
    NOT: List['OrganizationScalarWhereWithAggregatesInputRecursive4']


class OrganizationScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    businessNumber: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class OrganizationGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    businessNumber: _str
    address: _str
    phone: _str
    email: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'OrganizationSumAggregateOutput'
    _avg: 'OrganizationAvgAggregateOutput'
    _min: 'OrganizationMinAggregateOutput'
    _max: 'OrganizationMaxAggregateOutput'
    _count: 'OrganizationCountAggregateOutput'


class OrganizationAvgAggregateOutput(TypedDict, total=False):
    """Organization output for aggregating averages"""


class OrganizationSumAggregateOutput(TypedDict, total=False):
    """Organization output for aggregating sums"""


class OrganizationScalarAggregateOutput(TypedDict, total=False):
    """Organization output including scalar fields"""
    id: _str
    name: _str
    description: _str
    businessNumber: _str
    address: _str
    phone: _str
    email: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


OrganizationMinAggregateOutput = OrganizationScalarAggregateOutput
OrganizationMaxAggregateOutput = OrganizationScalarAggregateOutput


class OrganizationMaxAggregateInput(TypedDict, total=False):
    """Organization input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    businessNumber: bool
    address: bool
    phone: bool
    email: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class OrganizationMinAggregateInput(TypedDict, total=False):
    """Organization input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    businessNumber: bool
    address: bool
    phone: bool
    email: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class OrganizationNumberAggregateInput(TypedDict, total=False):
    """Organization input for aggregating numbers"""


OrganizationAvgAggregateInput = OrganizationNumberAggregateInput
OrganizationSumAggregateInput = OrganizationNumberAggregateInput


OrganizationCountAggregateInput = TypedDict(
    'OrganizationCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'businessNumber': bool,
        'address': bool,
        'phone': bool,
        'email': bool,
        'isActive': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

OrganizationCountAggregateOutput = TypedDict(
    'OrganizationCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'businessNumber': int,
        'address': int,
        'phone': int,
        'email': int,
        'isActive': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


OrganizationKeys = Literal[
    'id',
    'name',
    'description',
    'businessNumber',
    'address',
    'phone',
    'email',
    'isActive',
    'createdAt',
    'updatedAt',
    'members',
]
OrganizationScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'businessNumber',
    'address',
    'phone',
    'email',
    'isActive',
    'createdAt',
    'updatedAt',
]
OrganizationScalarFieldKeysT = TypeVar('OrganizationScalarFieldKeysT', bound=OrganizationScalarFieldKeys)

OrganizationRelationalFieldKeys = Literal[
        'members',
    ]

# OrganizationMember types

class OrganizationMemberOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the OrganizationMember create method"""
    id: _str
    userId: _str
    organizationId: _str
    isActive: _bool
    joinedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    organization: 'OrganizationCreateNestedWithoutRelationsInput'


class OrganizationMemberCreateInput(OrganizationMemberOptionalCreateInput):
    """Required arguments to the OrganizationMember create method"""
    role: 'enums.UserRole'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class OrganizationMemberOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the OrganizationMember create method, without relations"""
    id: _str
    userId: _str
    organizationId: _str
    isActive: _bool
    joinedAt: datetime.datetime


class OrganizationMemberCreateWithoutRelationsInput(OrganizationMemberOptionalCreateWithoutRelationsInput):
    """Required arguments to the OrganizationMember create method, without relations"""
    role: 'enums.UserRole'

class OrganizationMemberConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'OrganizationMemberCreateWithoutRelationsInput'
    where: 'OrganizationMemberWhereUniqueInput'

class OrganizationMemberCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'OrganizationMemberCreateWithoutRelationsInput'
    connect: 'OrganizationMemberWhereUniqueInput'
    connect_or_create: 'OrganizationMemberConnectOrCreateWithoutRelationsInput'


class OrganizationMemberCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['OrganizationMemberCreateWithoutRelationsInput', List['OrganizationMemberCreateWithoutRelationsInput']]
    connect: Union['OrganizationMemberWhereUniqueInput', List['OrganizationMemberWhereUniqueInput']]
    connect_or_create: Union['OrganizationMemberConnectOrCreateWithoutRelationsInput', List['OrganizationMemberConnectOrCreateWithoutRelationsInput']]

_OrganizationMemberWhereUnique_id_Input = TypedDict(
    '_OrganizationMemberWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_OrganizationMemberCompounduserId_organizationIdKeyInner = TypedDict(
    '_OrganizationMemberCompounduserId_organizationIdKeyInner',
    {
        'userId': '_str',
        'organizationId': '_str',
    },
    total=True
)

_OrganizationMemberCompounduserId_organizationIdKey = TypedDict(
    '_OrganizationMemberCompounduserId_organizationIdKey',
    {
        'userId_organizationId': '_OrganizationMemberCompounduserId_organizationIdKeyInner',
    },
    total=True
)

OrganizationMemberWhereUniqueInput = Union[
    '_OrganizationMemberWhereUnique_id_Input',
    '_OrganizationMemberCompounduserId_organizationIdKey',
]


class OrganizationMemberUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    role: 'enums.UserRole'
    isActive: _bool
    joinedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    organization: 'OrganizationUpdateOneWithoutRelationsInput'


class OrganizationMemberUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    role: 'enums.UserRole'
    isActive: _bool
    joinedAt: datetime.datetime


class OrganizationMemberUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['OrganizationMemberCreateWithoutRelationsInput']
    connect: List['OrganizationMemberWhereUniqueInput']
    connect_or_create: List['OrganizationMemberConnectOrCreateWithoutRelationsInput']
    set: List['OrganizationMemberWhereUniqueInput']
    disconnect: List['OrganizationMemberWhereUniqueInput']
    delete: List['OrganizationMemberWhereUniqueInput']

    # TODO
    # update: List['OrganizationMemberUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['OrganizationMemberUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['OrganizationMemberScalarWhereInput']
    # upsert: List['OrganizationMemberUpserteWithWhereUniqueWithoutRelationsInput']


class OrganizationMemberUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'OrganizationMemberCreateWithoutRelationsInput'
    connect: 'OrganizationMemberWhereUniqueInput'
    connect_or_create: 'OrganizationMemberConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'OrganizationMemberUpdateInput'
    # upsert: 'OrganizationMemberUpsertWithoutRelationsInput'


class OrganizationMemberUpsertInput(TypedDict):
    create: 'OrganizationMemberCreateInput'
    update: 'OrganizationMemberUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_OrganizationMember_id_OrderByInput = TypedDict(
    '_OrganizationMember_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_OrganizationMember_userId_OrderByInput = TypedDict(
    '_OrganizationMember_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_OrganizationMember_organizationId_OrderByInput = TypedDict(
    '_OrganizationMember_organizationId_OrderByInput',
    {
        'organizationId': 'SortOrder',
    },
    total=True
)

_OrganizationMember_role_OrderByInput = TypedDict(
    '_OrganizationMember_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_OrganizationMember_isActive_OrderByInput = TypedDict(
    '_OrganizationMember_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_OrganizationMember_joinedAt_OrderByInput = TypedDict(
    '_OrganizationMember_joinedAt_OrderByInput',
    {
        'joinedAt': 'SortOrder',
    },
    total=True
)

_OrganizationMember_RelevanceInner = TypedDict(
    '_OrganizationMember_RelevanceInner',
    {
        'fields': 'List[OrganizationMemberScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_OrganizationMember_RelevanceOrderByInput = TypedDict(
    '_OrganizationMember_RelevanceOrderByInput',
    {
        '_relevance': '_OrganizationMember_RelevanceInner',
    },
    total=True
)

OrganizationMemberOrderByInput = Union[
    '_OrganizationMember_id_OrderByInput',
    '_OrganizationMember_userId_OrderByInput',
    '_OrganizationMember_organizationId_OrderByInput',
    '_OrganizationMember_role_OrderByInput',
    '_OrganizationMember_isActive_OrderByInput',
    '_OrganizationMember_joinedAt_OrderByInput',
    '_OrganizationMember_RelevanceOrderByInput',
]



# recursive OrganizationMember types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

OrganizationMemberRelationFilter = TypedDict(
    'OrganizationMemberRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class OrganizationMemberListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class OrganizationMemberInclude(TypedDict, total=False):
    """OrganizationMember relational arguments"""
    user: Union[bool, 'UserArgsFromOrganizationMember']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMember']


    

class UserIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive1']


class UserIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive2']


class UserIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive3']


class UserIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive4']


class UserIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class UserArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyUserArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationMemberRecursive1']


class PermissionIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationMemberRecursive2']


class PermissionIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationMemberRecursive3']


class PermissionIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationMemberRecursive4']


class PermissionIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class PermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyPermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive1']
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive1']


class UserPermissionIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive2']
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive2']


class UserPermissionIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive3']
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive3']


class UserPermissionIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive4']
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive4']


class UserPermissionIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class UserPermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyUserPermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive1']


class RolePermissionIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive2']


class RolePermissionIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive3']


class RolePermissionIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive4']


class RolePermissionIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class RolePermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyRolePermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive1']


class OrganizationIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive2']


class OrganizationIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive3']


class OrganizationIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive4']


class OrganizationIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class OrganizationArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyOrganizationArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive1']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive1']


class OrganizationMemberIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive2']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive2']


class OrganizationMemberIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive3']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive3']


class OrganizationMemberIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive4']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive4']


class OrganizationMemberIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class OrganizationMemberArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyOrganizationMemberArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    


FindManyOrganizationMemberArgs = FindManyOrganizationMemberArgsFromOrganizationMember
FindFirstOrganizationMemberArgs = FindManyOrganizationMemberArgsFromOrganizationMember


    

class OrganizationMemberWhereInput(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    organization: 'OrganizationRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationMemberWhereInputRecursive1', List['OrganizationMemberWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['OrganizationMemberWhereInputRecursive1']
    OR: List['OrganizationMemberWhereInputRecursive1']
    NOT: List['OrganizationMemberWhereInputRecursive1']


class OrganizationMemberWhereInputRecursive1(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    organization: 'OrganizationRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationMemberWhereInputRecursive2', List['OrganizationMemberWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['OrganizationMemberWhereInputRecursive2']
    OR: List['OrganizationMemberWhereInputRecursive2']
    NOT: List['OrganizationMemberWhereInputRecursive2']


class OrganizationMemberWhereInputRecursive2(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    organization: 'OrganizationRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationMemberWhereInputRecursive3', List['OrganizationMemberWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['OrganizationMemberWhereInputRecursive3']
    OR: List['OrganizationMemberWhereInputRecursive3']
    NOT: List['OrganizationMemberWhereInputRecursive3']


class OrganizationMemberWhereInputRecursive3(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    organization: 'OrganizationRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationMemberWhereInputRecursive4', List['OrganizationMemberWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['OrganizationMemberWhereInputRecursive4']
    OR: List['OrganizationMemberWhereInputRecursive4']
    NOT: List['OrganizationMemberWhereInputRecursive4']


class OrganizationMemberWhereInputRecursive4(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    organization: 'OrganizationRelationFilter'



# aggregate OrganizationMember types


    

class OrganizationMemberScalarWhereWithAggregatesInput(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive1']
    OR: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive1']
    NOT: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive1']


class OrganizationMemberScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive2']
    OR: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive2']
    NOT: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive2']


class OrganizationMemberScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive3']
    OR: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive3']
    NOT: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive3']


class OrganizationMemberScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive4']
    OR: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive4']
    NOT: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive4']


class OrganizationMemberScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class OrganizationMemberGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    organizationId: _str
    role: 'enums.UserRole'
    isActive: _bool
    joinedAt: datetime.datetime
    _sum: 'OrganizationMemberSumAggregateOutput'
    _avg: 'OrganizationMemberAvgAggregateOutput'
    _min: 'OrganizationMemberMinAggregateOutput'
    _max: 'OrganizationMemberMaxAggregateOutput'
    _count: 'OrganizationMemberCountAggregateOutput'


class OrganizationMemberAvgAggregateOutput(TypedDict, total=False):
    """OrganizationMember output for aggregating averages"""


class OrganizationMemberSumAggregateOutput(TypedDict, total=False):
    """OrganizationMember output for aggregating sums"""


class OrganizationMemberScalarAggregateOutput(TypedDict, total=False):
    """OrganizationMember output including scalar fields"""
    id: _str
    userId: _str
    organizationId: _str
    role: 'enums.UserRole'
    isActive: _bool
    joinedAt: datetime.datetime


OrganizationMemberMinAggregateOutput = OrganizationMemberScalarAggregateOutput
OrganizationMemberMaxAggregateOutput = OrganizationMemberScalarAggregateOutput


class OrganizationMemberMaxAggregateInput(TypedDict, total=False):
    """OrganizationMember input for aggregating by max"""
    id: bool
    userId: bool
    organizationId: bool
    role: bool
    isActive: bool
    joinedAt: bool


class OrganizationMemberMinAggregateInput(TypedDict, total=False):
    """OrganizationMember input for aggregating by min"""
    id: bool
    userId: bool
    organizationId: bool
    role: bool
    isActive: bool
    joinedAt: bool


class OrganizationMemberNumberAggregateInput(TypedDict, total=False):
    """OrganizationMember input for aggregating numbers"""


OrganizationMemberAvgAggregateInput = OrganizationMemberNumberAggregateInput
OrganizationMemberSumAggregateInput = OrganizationMemberNumberAggregateInput


OrganizationMemberCountAggregateInput = TypedDict(
    'OrganizationMemberCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'organizationId': bool,
        'role': bool,
        'isActive': bool,
        'joinedAt': bool,
        '_all': bool,
    },
    total=False,
)

OrganizationMemberCountAggregateOutput = TypedDict(
    'OrganizationMemberCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'organizationId': int,
        'role': int,
        'isActive': int,
        'joinedAt': int,
        '_all': int,
    },
    total=False,
)


OrganizationMemberKeys = Literal[
    'id',
    'userId',
    'organizationId',
    'role',
    'isActive',
    'joinedAt',
    'user',
    'organization',
]
OrganizationMemberScalarFieldKeys = Literal[
    'id',
    'userId',
    'organizationId',
    'role',
    'isActive',
    'joinedAt',
]
OrganizationMemberScalarFieldKeysT = TypeVar('OrganizationMemberScalarFieldKeysT', bound=OrganizationMemberScalarFieldKeys)

OrganizationMemberRelationalFieldKeys = Literal[
        'user',
        'organization',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields