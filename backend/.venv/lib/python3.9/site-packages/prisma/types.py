# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _UserRoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.UserRole']]


class _UserRoleListFilterHasInput(TypedDict):
    has: 'enums.UserRole'


class _UserRoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.UserRole']


class _UserRoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.UserRole']


class _UserRoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


UserRoleListFilter = Union[
    _UserRoleListFilterHasInput,
    _UserRoleListFilterEqualsInput,
    _UserRoleListFilterHasSomeInput,
    _UserRoleListFilterIsEmptyInput,
    _UserRoleListFilterHasEveryInput,
]


class _UserRoleListUpdateSet(TypedDict):
    set: List['enums.UserRole']


class _UserRoleListUpdatePush(TypedDict):
    push: List['enums.UserRole']


UserRoleListUpdate = Union[
    List['enums.UserRole'],
    _UserRoleListUpdateSet,
    _UserRoleListUpdatePush,
]

class _MaintenanceStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.MaintenanceStatus']]


class _MaintenanceStatusListFilterHasInput(TypedDict):
    has: 'enums.MaintenanceStatus'


class _MaintenanceStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.MaintenanceStatus']


class _MaintenanceStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.MaintenanceStatus']


class _MaintenanceStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


MaintenanceStatusListFilter = Union[
    _MaintenanceStatusListFilterHasInput,
    _MaintenanceStatusListFilterEqualsInput,
    _MaintenanceStatusListFilterHasSomeInput,
    _MaintenanceStatusListFilterIsEmptyInput,
    _MaintenanceStatusListFilterHasEveryInput,
]


class _MaintenanceStatusListUpdateSet(TypedDict):
    set: List['enums.MaintenanceStatus']


class _MaintenanceStatusListUpdatePush(TypedDict):
    push: List['enums.MaintenanceStatus']


MaintenanceStatusListUpdate = Union[
    List['enums.MaintenanceStatus'],
    _MaintenanceStatusListUpdateSet,
    _MaintenanceStatusListUpdatePush,
]

class _MaintenanceTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.MaintenanceType']]


class _MaintenanceTypeListFilterHasInput(TypedDict):
    has: 'enums.MaintenanceType'


class _MaintenanceTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.MaintenanceType']


class _MaintenanceTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.MaintenanceType']


class _MaintenanceTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


MaintenanceTypeListFilter = Union[
    _MaintenanceTypeListFilterHasInput,
    _MaintenanceTypeListFilterEqualsInput,
    _MaintenanceTypeListFilterHasSomeInput,
    _MaintenanceTypeListFilterIsEmptyInput,
    _MaintenanceTypeListFilterHasEveryInput,
]


class _MaintenanceTypeListUpdateSet(TypedDict):
    set: List['enums.MaintenanceType']


class _MaintenanceTypeListUpdatePush(TypedDict):
    push: List['enums.MaintenanceType']


MaintenanceTypeListUpdate = Union[
    List['enums.MaintenanceType'],
    _MaintenanceTypeListUpdateSet,
    _MaintenanceTypeListUpdatePush,
]

class _ERPSystemTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.ERPSystemType']]


class _ERPSystemTypeListFilterHasInput(TypedDict):
    has: 'enums.ERPSystemType'


class _ERPSystemTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.ERPSystemType']


class _ERPSystemTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.ERPSystemType']


class _ERPSystemTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


ERPSystemTypeListFilter = Union[
    _ERPSystemTypeListFilterHasInput,
    _ERPSystemTypeListFilterEqualsInput,
    _ERPSystemTypeListFilterHasSomeInput,
    _ERPSystemTypeListFilterIsEmptyInput,
    _ERPSystemTypeListFilterHasEveryInput,
]


class _ERPSystemTypeListUpdateSet(TypedDict):
    set: List['enums.ERPSystemType']


class _ERPSystemTypeListUpdatePush(TypedDict):
    push: List['enums.ERPSystemType']


ERPSystemTypeListUpdate = Union[
    List['enums.ERPSystemType'],
    _ERPSystemTypeListUpdateSet,
    _ERPSystemTypeListUpdatePush,
]

class _SyncDirectionTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.SyncDirectionType']]


class _SyncDirectionTypeListFilterHasInput(TypedDict):
    has: 'enums.SyncDirectionType'


class _SyncDirectionTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.SyncDirectionType']


class _SyncDirectionTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.SyncDirectionType']


class _SyncDirectionTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


SyncDirectionTypeListFilter = Union[
    _SyncDirectionTypeListFilterHasInput,
    _SyncDirectionTypeListFilterEqualsInput,
    _SyncDirectionTypeListFilterHasSomeInput,
    _SyncDirectionTypeListFilterIsEmptyInput,
    _SyncDirectionTypeListFilterHasEveryInput,
]


class _SyncDirectionTypeListUpdateSet(TypedDict):
    set: List['enums.SyncDirectionType']


class _SyncDirectionTypeListUpdatePush(TypedDict):
    push: List['enums.SyncDirectionType']


SyncDirectionTypeListUpdate = Union[
    List['enums.SyncDirectionType'],
    _SyncDirectionTypeListUpdateSet,
    _SyncDirectionTypeListUpdatePush,
]

class _SyncStatusTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.SyncStatusType']]


class _SyncStatusTypeListFilterHasInput(TypedDict):
    has: 'enums.SyncStatusType'


class _SyncStatusTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.SyncStatusType']


class _SyncStatusTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.SyncStatusType']


class _SyncStatusTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


SyncStatusTypeListFilter = Union[
    _SyncStatusTypeListFilterHasInput,
    _SyncStatusTypeListFilterEqualsInput,
    _SyncStatusTypeListFilterHasSomeInput,
    _SyncStatusTypeListFilterIsEmptyInput,
    _SyncStatusTypeListFilterHasEveryInput,
]


class _SyncStatusTypeListUpdateSet(TypedDict):
    set: List['enums.SyncStatusType']


class _SyncStatusTypeListUpdatePush(TypedDict):
    push: List['enums.SyncStatusType']


SyncStatusTypeListUpdate = Union[
    List['enums.SyncStatusType'],
    _SyncStatusTypeListUpdateSet,
    _SyncStatusTypeListUpdatePush,
]

class _RepairStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.RepairStatus']]


class _RepairStatusListFilterHasInput(TypedDict):
    has: 'enums.RepairStatus'


class _RepairStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.RepairStatus']


class _RepairStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.RepairStatus']


class _RepairStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RepairStatusListFilter = Union[
    _RepairStatusListFilterHasInput,
    _RepairStatusListFilterEqualsInput,
    _RepairStatusListFilterHasSomeInput,
    _RepairStatusListFilterIsEmptyInput,
    _RepairStatusListFilterHasEveryInput,
]


class _RepairStatusListUpdateSet(TypedDict):
    set: List['enums.RepairStatus']


class _RepairStatusListUpdatePush(TypedDict):
    push: List['enums.RepairStatus']


RepairStatusListUpdate = Union[
    List['enums.RepairStatus'],
    _RepairStatusListUpdateSet,
    _RepairStatusListUpdatePush,
]

class _RepairTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.RepairType']]


class _RepairTypeListFilterHasInput(TypedDict):
    has: 'enums.RepairType'


class _RepairTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.RepairType']


class _RepairTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.RepairType']


class _RepairTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RepairTypeListFilter = Union[
    _RepairTypeListFilterHasInput,
    _RepairTypeListFilterEqualsInput,
    _RepairTypeListFilterHasSomeInput,
    _RepairTypeListFilterIsEmptyInput,
    _RepairTypeListFilterHasEveryInput,
]


class _RepairTypeListUpdateSet(TypedDict):
    set: List['enums.RepairType']


class _RepairTypeListUpdatePush(TypedDict):
    push: List['enums.RepairType']


RepairTypeListUpdate = Union[
    List['enums.RepairType'],
    _RepairTypeListUpdateSet,
    _RepairTypeListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    phone: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    permissions: 'UserPermissionCreateManyNestedWithoutRelationsInput'
    organizations: 'OrganizationMemberCreateManyNestedWithoutRelationsInput'
    Repair: 'RepairCreateManyNestedWithoutRelationsInput'
    StatusHistory: 'StatusHistoryCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    phone: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'
    phone: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    permissions: 'UserPermissionUpdateManyWithoutRelationsInput'
    organizations: 'OrganizationMemberUpdateManyWithoutRelationsInput'
    Repair: 'RepairUpdateManyWithoutRelationsInput'
    StatusHistory: 'StatusHistoryUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'
    phone: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_passwordHash_OrderByInput = TypedDict(
    '_User_passwordHash_OrderByInput',
    {
        'passwordHash': 'SortOrder',
    },
    total=True
)

_User_fullName_OrderByInput = TypedDict(
    '_User_fullName_OrderByInput',
    {
        'fullName': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_phone_OrderByInput = TypedDict(
    '_User_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_User_isActive_OrderByInput = TypedDict(
    '_User_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_passwordHash_OrderByInput',
    '_User_fullName_OrderByInput',
    '_User_role_OrderByInput',
    '_User_phone_OrderByInput',
    '_User_isActive_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUser']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUser']
    Repair: Union[bool, 'FindManyRepairArgsFromUser']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromUserRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromUserRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromUserRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromUserRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserRecursive1']


class PermissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserRecursive2']


class PermissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserRecursive3']


class PermissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserRecursive4']


class PermissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserRecursive1']


class UserPermissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserRecursive2']


class UserPermissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserRecursive3']


class UserPermissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserRecursive4']


class UserPermissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    permission: Union[bool, 'PermissionArgsFromUserRecursive1']


class RolePermissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    permission: Union[bool, 'PermissionArgsFromUserRecursive2']


class RolePermissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    permission: Union[bool, 'PermissionArgsFromUserRecursive3']


class RolePermissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    permission: Union[bool, 'PermissionArgsFromUserRecursive4']


class RolePermissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class RolePermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyRolePermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromUserRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromUserRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromUserRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserRecursive1']


class OrganizationIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromUserRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromUserRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromUserRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserRecursive2']


class OrganizationIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromUserRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromUserRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromUserRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserRecursive3']


class OrganizationIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromUserRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromUserRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromUserRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserRecursive4']


class OrganizationIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class OrganizationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyOrganizationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive1']


class OrganizationMemberIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive2']


class OrganizationMemberIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive3']


class OrganizationMemberIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive4']


class OrganizationMemberIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class OrganizationMemberArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyOrganizationMemberArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromUserRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserRecursive1']


class DriverIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromUserRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserRecursive2']


class DriverIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromUserRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserRecursive3']


class DriverIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromUserRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserRecursive4']


class DriverIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class DriverArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyDriverArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserRecursive1']


class VehicleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserRecursive2']


class VehicleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserRecursive3']


class VehicleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserRecursive4']


class VehicleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class VehicleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyVehicleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    vehicle: Union[bool, 'VehicleArgsFromUserRecursive1']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromUserRecursive1']


class MaintenanceIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    vehicle: Union[bool, 'VehicleArgsFromUserRecursive2']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromUserRecursive2']


class MaintenanceIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    vehicle: Union[bool, 'VehicleArgsFromUserRecursive3']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromUserRecursive3']


class MaintenanceIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    vehicle: Union[bool, 'VehicleArgsFromUserRecursive4']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromUserRecursive4']


class MaintenanceIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MaintenanceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMaintenanceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    maintenance: Union[bool, 'MaintenanceArgsFromUserRecursive1']


class MaintenancePartIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    maintenance: Union[bool, 'MaintenanceArgsFromUserRecursive2']


class MaintenancePartIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    maintenance: Union[bool, 'MaintenanceArgsFromUserRecursive3']


class MaintenancePartIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    maintenance: Union[bool, 'MaintenanceArgsFromUserRecursive4']


class MaintenancePartIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MaintenancePartArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMaintenancePartArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    driver: Union[bool, 'DriverArgsFromUserRecursive1']


class DriverPerformanceIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    driver: Union[bool, 'DriverArgsFromUserRecursive2']


class DriverPerformanceIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    driver: Union[bool, 'DriverArgsFromUserRecursive3']


class DriverPerformanceIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    driver: Union[bool, 'DriverArgsFromUserRecursive4']


class DriverPerformanceIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class DriverPerformanceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyDriverPerformanceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    driver: Union[bool, 'DriverArgsFromUserRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromUserRecursive1']


class DrivingRecordIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    driver: Union[bool, 'DriverArgsFromUserRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromUserRecursive2']


class DrivingRecordIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    driver: Union[bool, 'DriverArgsFromUserRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromUserRecursive3']


class DrivingRecordIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    driver: Union[bool, 'DriverArgsFromUserRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromUserRecursive4']


class DrivingRecordIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class DrivingRecordArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyDrivingRecordArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserRecursive1']


class ERPSyncConfigIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserRecursive2']


class ERPSyncConfigIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserRecursive3']


class ERPSyncConfigIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    organization: Union[bool, 'OrganizationArgsFromUserRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserRecursive4']


class ERPSyncConfigIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ERPSyncConfigArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyERPSyncConfigArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    config: Union[bool, 'ERPSyncConfigArgsFromUserRecursive1']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive1']


class ERPSyncLogIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    config: Union[bool, 'ERPSyncConfigArgsFromUserRecursive2']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive2']


class ERPSyncLogIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    config: Union[bool, 'ERPSyncConfigArgsFromUserRecursive3']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive3']


class ERPSyncLogIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    config: Union[bool, 'ERPSyncConfigArgsFromUserRecursive4']
    organization: Union[bool, 'OrganizationArgsFromUserRecursive4']


class ERPSyncLogIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ERPSyncLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyERPSyncLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    technician: Union[bool, 'UserArgsFromUserRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromUserRecursive1']


class RepairIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    technician: Union[bool, 'UserArgsFromUserRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromUserRecursive2']


class RepairIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    technician: Union[bool, 'UserArgsFromUserRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromUserRecursive3']


class RepairIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    technician: Union[bool, 'UserArgsFromUserRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromUserRecursive4']


class RepairIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class RepairArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyRepairArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    repair: Union[bool, 'RepairArgsFromUserRecursive1']
    technician: Union[bool, 'UserArgsFromUserRecursive1']


class StatusHistoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    repair: Union[bool, 'RepairArgsFromUserRecursive2']
    technician: Union[bool, 'UserArgsFromUserRecursive2']


class StatusHistoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    repair: Union[bool, 'RepairArgsFromUserRecursive3']
    technician: Union[bool, 'UserArgsFromUserRecursive3']


class StatusHistoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    repair: Union[bool, 'RepairArgsFromUserRecursive4']
    technician: Union[bool, 'UserArgsFromUserRecursive4']


class StatusHistoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class StatusHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyStatusHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    fullName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    phone: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    permissions: 'UserPermissionListRelationFilter'
    organizations: 'OrganizationMemberListRelationFilter'
    Repair: 'RepairListRelationFilter'
    StatusHistory: 'StatusHistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    fullName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    phone: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    permissions: 'UserPermissionListRelationFilter'
    organizations: 'OrganizationMemberListRelationFilter'
    Repair: 'RepairListRelationFilter'
    StatusHistory: 'StatusHistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    fullName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    phone: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    permissions: 'UserPermissionListRelationFilter'
    organizations: 'OrganizationMemberListRelationFilter'
    Repair: 'RepairListRelationFilter'
    StatusHistory: 'StatusHistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    fullName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    phone: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    permissions: 'UserPermissionListRelationFilter'
    organizations: 'OrganizationMemberListRelationFilter'
    Repair: 'RepairListRelationFilter'
    StatusHistory: 'StatusHistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    fullName: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    phone: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    permissions: 'UserPermissionListRelationFilter'
    organizations: 'OrganizationMemberListRelationFilter'
    Repair: 'RepairListRelationFilter'
    StatusHistory: 'StatusHistoryListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    fullName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    fullName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    fullName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    fullName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    fullName: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'
    phone: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    passwordHash: _str
    fullName: _str
    role: 'enums.UserRole'
    phone: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    passwordHash: bool
    fullName: bool
    role: bool
    phone: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    passwordHash: bool
    fullName: bool
    role: bool
    phone: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'passwordHash': bool,
        'fullName': bool,
        'role': bool,
        'phone': bool,
        'isActive': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'passwordHash': int,
        'fullName': int,
        'role': int,
        'phone': int,
        'isActive': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'passwordHash',
    'fullName',
    'role',
    'phone',
    'isActive',
    'createdAt',
    'updatedAt',
    'permissions',
    'organizations',
    'Repair',
    'StatusHistory',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'passwordHash',
    'fullName',
    'role',
    'phone',
    'isActive',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'permissions',
        'organizations',
        'Repair',
        'StatusHistory',
    ]

# Permission types

class PermissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Permission create method"""
    id: _str
    description: Optional[_str]
    isActive: _bool
    userPermissions: 'UserPermissionCreateManyNestedWithoutRelationsInput'
    rolePermissions: 'RolePermissionCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PermissionCreateInput(PermissionOptionalCreateInput):
    """Required arguments to the Permission create method"""
    code: _str
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PermissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Permission create method, without relations"""
    id: _str
    description: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PermissionCreateWithoutRelationsInput(PermissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Permission create method, without relations"""
    code: _str
    name: _str

class PermissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PermissionCreateWithoutRelationsInput'
    where: 'PermissionWhereUniqueInput'

class PermissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PermissionCreateWithoutRelationsInput'
    connect: 'PermissionWhereUniqueInput'
    connect_or_create: 'PermissionConnectOrCreateWithoutRelationsInput'


class PermissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PermissionCreateWithoutRelationsInput', List['PermissionCreateWithoutRelationsInput']]
    connect: Union['PermissionWhereUniqueInput', List['PermissionWhereUniqueInput']]
    connect_or_create: Union['PermissionConnectOrCreateWithoutRelationsInput', List['PermissionConnectOrCreateWithoutRelationsInput']]

_PermissionWhereUnique_id_Input = TypedDict(
    '_PermissionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PermissionWhereUnique_code_Input = TypedDict(
    '_PermissionWhereUnique_code_Input',
    {
        'code': '_str',
    },
    total=True
)

PermissionWhereUniqueInput = Union[
    '_PermissionWhereUnique_id_Input',
    '_PermissionWhereUnique_code_Input',
]


class PermissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    code: _str
    name: _str
    description: Optional[_str]
    isActive: _bool
    userPermissions: 'UserPermissionUpdateManyWithoutRelationsInput'
    rolePermissions: 'RolePermissionUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PermissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    code: _str
    name: _str
    description: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PermissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PermissionCreateWithoutRelationsInput']
    connect: List['PermissionWhereUniqueInput']
    connect_or_create: List['PermissionConnectOrCreateWithoutRelationsInput']
    set: List['PermissionWhereUniqueInput']
    disconnect: List['PermissionWhereUniqueInput']
    delete: List['PermissionWhereUniqueInput']

    # TODO
    # update: List['PermissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PermissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PermissionScalarWhereInput']
    # upsert: List['PermissionUpserteWithWhereUniqueWithoutRelationsInput']


class PermissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PermissionCreateWithoutRelationsInput'
    connect: 'PermissionWhereUniqueInput'
    connect_or_create: 'PermissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PermissionUpdateInput'
    # upsert: 'PermissionUpsertWithoutRelationsInput'


class PermissionUpsertInput(TypedDict):
    create: 'PermissionCreateInput'
    update: 'PermissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Permission_id_OrderByInput = TypedDict(
    '_Permission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Permission_code_OrderByInput = TypedDict(
    '_Permission_code_OrderByInput',
    {
        'code': 'SortOrder',
    },
    total=True
)

_Permission_name_OrderByInput = TypedDict(
    '_Permission_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Permission_description_OrderByInput = TypedDict(
    '_Permission_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Permission_isActive_OrderByInput = TypedDict(
    '_Permission_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_Permission_createdAt_OrderByInput = TypedDict(
    '_Permission_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Permission_updatedAt_OrderByInput = TypedDict(
    '_Permission_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Permission_RelevanceInner = TypedDict(
    '_Permission_RelevanceInner',
    {
        'fields': 'List[PermissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Permission_RelevanceOrderByInput = TypedDict(
    '_Permission_RelevanceOrderByInput',
    {
        '_relevance': '_Permission_RelevanceInner',
    },
    total=True
)

PermissionOrderByInput = Union[
    '_Permission_id_OrderByInput',
    '_Permission_code_OrderByInput',
    '_Permission_name_OrderByInput',
    '_Permission_description_OrderByInput',
    '_Permission_isActive_OrderByInput',
    '_Permission_createdAt_OrderByInput',
    '_Permission_updatedAt_OrderByInput',
    '_Permission_RelevanceOrderByInput',
]



# recursive Permission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PermissionRelationFilter = TypedDict(
    'PermissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PermissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PermissionInclude(TypedDict, total=False):
    """Permission relational arguments"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromPermission']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromPermission']


    

class UserIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromPermissionRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromPermissionRecursive1']


class UserIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromPermissionRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromPermissionRecursive2']


class UserIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromPermissionRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromPermissionRecursive3']


class UserIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromPermissionRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromPermissionRecursive4']


class UserIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class UserArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyUserArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromPermissionRecursive1']


class PermissionIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromPermissionRecursive2']


class PermissionIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromPermissionRecursive3']


class PermissionIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromPermissionRecursive4']


class PermissionIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class PermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive1']


class UserPermissionIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive2']


class UserPermissionIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive3']


class UserPermissionIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive4']


class UserPermissionIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class UserPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyUserPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive1']


class RolePermissionIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive2']


class RolePermissionIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive3']


class RolePermissionIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive4']


class RolePermissionIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class RolePermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyRolePermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromPermissionRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromPermissionRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromPermissionRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromPermissionRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromPermissionRecursive1']


class OrganizationIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromPermissionRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromPermissionRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromPermissionRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromPermissionRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromPermissionRecursive2']


class OrganizationIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromPermissionRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromPermissionRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromPermissionRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromPermissionRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromPermissionRecursive3']


class OrganizationIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromPermissionRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromPermissionRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromPermissionRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromPermissionRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromPermissionRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromPermissionRecursive4']


class OrganizationIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class OrganizationArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyOrganizationArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive1']


class OrganizationMemberIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive2']


class OrganizationMemberIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive3']


class OrganizationMemberIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive4']


class OrganizationMemberIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class OrganizationMemberArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyOrganizationMemberArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromPermissionRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromPermissionRecursive1']


class DriverIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromPermissionRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromPermissionRecursive2']


class DriverIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromPermissionRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromPermissionRecursive3']


class DriverIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromPermissionRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromPermissionRecursive4']


class DriverIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class DriverArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyDriverArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromPermissionRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromPermissionRecursive1']


class VehicleIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromPermissionRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromPermissionRecursive2']


class VehicleIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromPermissionRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromPermissionRecursive3']


class VehicleIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromPermissionRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromPermissionRecursive4']


class VehicleIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class VehicleArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyVehicleArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    vehicle: Union[bool, 'VehicleArgsFromPermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromPermissionRecursive1']


class MaintenanceIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    vehicle: Union[bool, 'VehicleArgsFromPermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromPermissionRecursive2']


class MaintenanceIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    vehicle: Union[bool, 'VehicleArgsFromPermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromPermissionRecursive3']


class MaintenanceIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    vehicle: Union[bool, 'VehicleArgsFromPermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromPermissionRecursive4']


class MaintenanceIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class MaintenanceArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyMaintenanceArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    maintenance: Union[bool, 'MaintenanceArgsFromPermissionRecursive1']


class MaintenancePartIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    maintenance: Union[bool, 'MaintenanceArgsFromPermissionRecursive2']


class MaintenancePartIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    maintenance: Union[bool, 'MaintenanceArgsFromPermissionRecursive3']


class MaintenancePartIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    maintenance: Union[bool, 'MaintenanceArgsFromPermissionRecursive4']


class MaintenancePartIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class MaintenancePartArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyMaintenancePartArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    driver: Union[bool, 'DriverArgsFromPermissionRecursive1']


class DriverPerformanceIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    driver: Union[bool, 'DriverArgsFromPermissionRecursive2']


class DriverPerformanceIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    driver: Union[bool, 'DriverArgsFromPermissionRecursive3']


class DriverPerformanceIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    driver: Union[bool, 'DriverArgsFromPermissionRecursive4']


class DriverPerformanceIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class DriverPerformanceArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyDriverPerformanceArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    driver: Union[bool, 'DriverArgsFromPermissionRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromPermissionRecursive1']


class DrivingRecordIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    driver: Union[bool, 'DriverArgsFromPermissionRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromPermissionRecursive2']


class DrivingRecordIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    driver: Union[bool, 'DriverArgsFromPermissionRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromPermissionRecursive3']


class DrivingRecordIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    driver: Union[bool, 'DriverArgsFromPermissionRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromPermissionRecursive4']


class DrivingRecordIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class DrivingRecordArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyDrivingRecordArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromPermissionRecursive1']


class ERPSyncConfigIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromPermissionRecursive2']


class ERPSyncConfigIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromPermissionRecursive3']


class ERPSyncConfigIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromPermissionRecursive4']


class ERPSyncConfigIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class ERPSyncConfigArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyERPSyncConfigArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    config: Union[bool, 'ERPSyncConfigArgsFromPermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive1']


class ERPSyncLogIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    config: Union[bool, 'ERPSyncConfigArgsFromPermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive2']


class ERPSyncLogIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    config: Union[bool, 'ERPSyncConfigArgsFromPermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive3']


class ERPSyncLogIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    config: Union[bool, 'ERPSyncConfigArgsFromPermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromPermissionRecursive4']


class ERPSyncLogIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class ERPSyncLogArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyERPSyncLogArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    technician: Union[bool, 'UserArgsFromPermissionRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromPermissionRecursive1']


class RepairIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    technician: Union[bool, 'UserArgsFromPermissionRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromPermissionRecursive2']


class RepairIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    technician: Union[bool, 'UserArgsFromPermissionRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromPermissionRecursive3']


class RepairIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    technician: Union[bool, 'UserArgsFromPermissionRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromPermissionRecursive4']


class RepairIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class RepairArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyRepairArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    repair: Union[bool, 'RepairArgsFromPermissionRecursive1']
    technician: Union[bool, 'UserArgsFromPermissionRecursive1']


class StatusHistoryIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    repair: Union[bool, 'RepairArgsFromPermissionRecursive2']
    technician: Union[bool, 'UserArgsFromPermissionRecursive2']


class StatusHistoryIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    repair: Union[bool, 'RepairArgsFromPermissionRecursive3']
    technician: Union[bool, 'UserArgsFromPermissionRecursive3']


class StatusHistoryIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    repair: Union[bool, 'RepairArgsFromPermissionRecursive4']
    technician: Union[bool, 'UserArgsFromPermissionRecursive4']


class StatusHistoryIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class StatusHistoryArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyStatusHistoryArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyPermissionArgs = FindManyPermissionArgsFromPermission
FindFirstPermissionArgs = FindManyPermissionArgsFromPermission


    

class PermissionWhereInput(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    userPermissions: 'UserPermissionListRelationFilter'
    rolePermissions: 'RolePermissionListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive1', List['PermissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive1']
    OR: List['PermissionWhereInputRecursive1']
    NOT: List['PermissionWhereInputRecursive1']


class PermissionWhereInputRecursive1(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    userPermissions: 'UserPermissionListRelationFilter'
    rolePermissions: 'RolePermissionListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive2', List['PermissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive2']
    OR: List['PermissionWhereInputRecursive2']
    NOT: List['PermissionWhereInputRecursive2']


class PermissionWhereInputRecursive2(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    userPermissions: 'UserPermissionListRelationFilter'
    rolePermissions: 'RolePermissionListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive3', List['PermissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive3']
    OR: List['PermissionWhereInputRecursive3']
    NOT: List['PermissionWhereInputRecursive3']


class PermissionWhereInputRecursive3(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    userPermissions: 'UserPermissionListRelationFilter'
    rolePermissions: 'RolePermissionListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive4', List['PermissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive4']
    OR: List['PermissionWhereInputRecursive4']
    NOT: List['PermissionWhereInputRecursive4']


class PermissionWhereInputRecursive4(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    userPermissions: 'UserPermissionListRelationFilter'
    rolePermissions: 'RolePermissionListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Permission types


    

class PermissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive1']


class PermissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive2']


class PermissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive3']


class PermissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive4']


class PermissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PermissionGroupByOutput(TypedDict, total=False):
    id: _str
    code: _str
    name: _str
    description: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PermissionSumAggregateOutput'
    _avg: 'PermissionAvgAggregateOutput'
    _min: 'PermissionMinAggregateOutput'
    _max: 'PermissionMaxAggregateOutput'
    _count: 'PermissionCountAggregateOutput'


class PermissionAvgAggregateOutput(TypedDict, total=False):
    """Permission output for aggregating averages"""


class PermissionSumAggregateOutput(TypedDict, total=False):
    """Permission output for aggregating sums"""


class PermissionScalarAggregateOutput(TypedDict, total=False):
    """Permission output including scalar fields"""
    id: _str
    code: _str
    name: _str
    description: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PermissionMinAggregateOutput = PermissionScalarAggregateOutput
PermissionMaxAggregateOutput = PermissionScalarAggregateOutput


class PermissionMaxAggregateInput(TypedDict, total=False):
    """Permission input for aggregating by max"""
    id: bool
    code: bool
    name: bool
    description: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class PermissionMinAggregateInput(TypedDict, total=False):
    """Permission input for aggregating by min"""
    id: bool
    code: bool
    name: bool
    description: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class PermissionNumberAggregateInput(TypedDict, total=False):
    """Permission input for aggregating numbers"""


PermissionAvgAggregateInput = PermissionNumberAggregateInput
PermissionSumAggregateInput = PermissionNumberAggregateInput


PermissionCountAggregateInput = TypedDict(
    'PermissionCountAggregateInput',
    {
        'id': bool,
        'code': bool,
        'name': bool,
        'description': bool,
        'isActive': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PermissionCountAggregateOutput = TypedDict(
    'PermissionCountAggregateOutput',
    {
        'id': int,
        'code': int,
        'name': int,
        'description': int,
        'isActive': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PermissionKeys = Literal[
    'id',
    'code',
    'name',
    'description',
    'isActive',
    'userPermissions',
    'rolePermissions',
    'createdAt',
    'updatedAt',
]
PermissionScalarFieldKeys = Literal[
    'id',
    'code',
    'name',
    'description',
    'isActive',
    'createdAt',
    'updatedAt',
]
PermissionScalarFieldKeysT = TypeVar('PermissionScalarFieldKeysT', bound=PermissionScalarFieldKeys)

PermissionRelationalFieldKeys = Literal[
        'userPermissions',
        'rolePermissions',
    ]

# UserPermission types

class UserPermissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserPermission create method"""
    id: _str
    userId: _str
    permissionId: _str
    granted: _bool
    user: 'UserCreateNestedWithoutRelationsInput'
    permission: 'PermissionCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserPermissionCreateInput(UserPermissionOptionalCreateInput):
    """Required arguments to the UserPermission create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserPermissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserPermission create method, without relations"""
    id: _str
    userId: _str
    permissionId: _str
    granted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserPermissionCreateWithoutRelationsInput(UserPermissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserPermission create method, without relations"""

class UserPermissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserPermissionCreateWithoutRelationsInput'
    where: 'UserPermissionWhereUniqueInput'

class UserPermissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserPermissionCreateWithoutRelationsInput'
    connect: 'UserPermissionWhereUniqueInput'
    connect_or_create: 'UserPermissionConnectOrCreateWithoutRelationsInput'


class UserPermissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserPermissionCreateWithoutRelationsInput', List['UserPermissionCreateWithoutRelationsInput']]
    connect: Union['UserPermissionWhereUniqueInput', List['UserPermissionWhereUniqueInput']]
    connect_or_create: Union['UserPermissionConnectOrCreateWithoutRelationsInput', List['UserPermissionConnectOrCreateWithoutRelationsInput']]

_UserPermissionWhereUnique_id_Input = TypedDict(
    '_UserPermissionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserPermissionCompounduserId_permissionIdKeyInner = TypedDict(
    '_UserPermissionCompounduserId_permissionIdKeyInner',
    {
        'userId': '_str',
        'permissionId': '_str',
    },
    total=True
)

_UserPermissionCompounduserId_permissionIdKey = TypedDict(
    '_UserPermissionCompounduserId_permissionIdKey',
    {
        'userId_permissionId': '_UserPermissionCompounduserId_permissionIdKeyInner',
    },
    total=True
)

UserPermissionWhereUniqueInput = Union[
    '_UserPermissionWhereUnique_id_Input',
    '_UserPermissionCompounduserId_permissionIdKey',
]


class UserPermissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    granted: _bool
    user: 'UserUpdateOneWithoutRelationsInput'
    permission: 'PermissionUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserPermissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    granted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserPermissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserPermissionCreateWithoutRelationsInput']
    connect: List['UserPermissionWhereUniqueInput']
    connect_or_create: List['UserPermissionConnectOrCreateWithoutRelationsInput']
    set: List['UserPermissionWhereUniqueInput']
    disconnect: List['UserPermissionWhereUniqueInput']
    delete: List['UserPermissionWhereUniqueInput']

    # TODO
    # update: List['UserPermissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserPermissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserPermissionScalarWhereInput']
    # upsert: List['UserPermissionUpserteWithWhereUniqueWithoutRelationsInput']


class UserPermissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserPermissionCreateWithoutRelationsInput'
    connect: 'UserPermissionWhereUniqueInput'
    connect_or_create: 'UserPermissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserPermissionUpdateInput'
    # upsert: 'UserPermissionUpsertWithoutRelationsInput'


class UserPermissionUpsertInput(TypedDict):
    create: 'UserPermissionCreateInput'
    update: 'UserPermissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserPermission_id_OrderByInput = TypedDict(
    '_UserPermission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserPermission_userId_OrderByInput = TypedDict(
    '_UserPermission_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserPermission_permissionId_OrderByInput = TypedDict(
    '_UserPermission_permissionId_OrderByInput',
    {
        'permissionId': 'SortOrder',
    },
    total=True
)

_UserPermission_granted_OrderByInput = TypedDict(
    '_UserPermission_granted_OrderByInput',
    {
        'granted': 'SortOrder',
    },
    total=True
)

_UserPermission_createdAt_OrderByInput = TypedDict(
    '_UserPermission_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_UserPermission_updatedAt_OrderByInput = TypedDict(
    '_UserPermission_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_UserPermission_RelevanceInner = TypedDict(
    '_UserPermission_RelevanceInner',
    {
        'fields': 'List[UserPermissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserPermission_RelevanceOrderByInput = TypedDict(
    '_UserPermission_RelevanceOrderByInput',
    {
        '_relevance': '_UserPermission_RelevanceInner',
    },
    total=True
)

UserPermissionOrderByInput = Union[
    '_UserPermission_id_OrderByInput',
    '_UserPermission_userId_OrderByInput',
    '_UserPermission_permissionId_OrderByInput',
    '_UserPermission_granted_OrderByInput',
    '_UserPermission_createdAt_OrderByInput',
    '_UserPermission_updatedAt_OrderByInput',
    '_UserPermission_RelevanceOrderByInput',
]



# recursive UserPermission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserPermissionRelationFilter = TypedDict(
    'UserPermissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserPermissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserPermissionInclude(TypedDict, total=False):
    """UserPermission relational arguments"""
    user: Union[bool, 'UserArgsFromUserPermission']
    permission: Union[bool, 'PermissionArgsFromUserPermission']


    

class UserIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromUserPermissionRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromUserPermissionRecursive1']


class UserIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromUserPermissionRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromUserPermissionRecursive2']


class UserIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromUserPermissionRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromUserPermissionRecursive3']


class UserIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromUserPermissionRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromUserPermissionRecursive4']


class UserIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class UserArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyUserArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserPermissionRecursive1']


class PermissionIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserPermissionRecursive2']


class PermissionIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserPermissionRecursive3']


class PermissionIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromUserPermissionRecursive4']


class PermissionIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class PermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive1']


class UserPermissionIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive2']


class UserPermissionIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive3']


class UserPermissionIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive4']


class UserPermissionIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class UserPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyUserPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive1']


class RolePermissionIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive2']


class RolePermissionIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive3']


class RolePermissionIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive4']


class RolePermissionIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class RolePermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyRolePermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromUserPermissionRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromUserPermissionRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserPermissionRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromUserPermissionRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserPermissionRecursive1']


class OrganizationIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromUserPermissionRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromUserPermissionRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserPermissionRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromUserPermissionRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserPermissionRecursive2']


class OrganizationIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromUserPermissionRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromUserPermissionRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserPermissionRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromUserPermissionRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserPermissionRecursive3']


class OrganizationIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromUserPermissionRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromUserPermissionRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromUserPermissionRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserPermissionRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromUserPermissionRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserPermissionRecursive4']


class OrganizationIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class OrganizationArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyOrganizationArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive1']


class OrganizationMemberIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive2']


class OrganizationMemberIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive3']


class OrganizationMemberIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive4']


class OrganizationMemberIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class OrganizationMemberArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyOrganizationMemberArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromUserPermissionRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserPermissionRecursive1']


class DriverIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromUserPermissionRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserPermissionRecursive2']


class DriverIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromUserPermissionRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserPermissionRecursive3']


class DriverIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromUserPermissionRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserPermissionRecursive4']


class DriverIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class DriverArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyDriverArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserPermissionRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserPermissionRecursive1']


class VehicleIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserPermissionRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserPermissionRecursive2']


class VehicleIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserPermissionRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserPermissionRecursive3']


class VehicleIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromUserPermissionRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromUserPermissionRecursive4']


class VehicleIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class VehicleArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyVehicleArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    vehicle: Union[bool, 'VehicleArgsFromUserPermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromUserPermissionRecursive1']


class MaintenanceIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    vehicle: Union[bool, 'VehicleArgsFromUserPermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromUserPermissionRecursive2']


class MaintenanceIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    vehicle: Union[bool, 'VehicleArgsFromUserPermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromUserPermissionRecursive3']


class MaintenanceIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    vehicle: Union[bool, 'VehicleArgsFromUserPermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromUserPermissionRecursive4']


class MaintenanceIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class MaintenanceArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyMaintenanceArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    maintenance: Union[bool, 'MaintenanceArgsFromUserPermissionRecursive1']


class MaintenancePartIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    maintenance: Union[bool, 'MaintenanceArgsFromUserPermissionRecursive2']


class MaintenancePartIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    maintenance: Union[bool, 'MaintenanceArgsFromUserPermissionRecursive3']


class MaintenancePartIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    maintenance: Union[bool, 'MaintenanceArgsFromUserPermissionRecursive4']


class MaintenancePartIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class MaintenancePartArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyMaintenancePartArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    driver: Union[bool, 'DriverArgsFromUserPermissionRecursive1']


class DriverPerformanceIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    driver: Union[bool, 'DriverArgsFromUserPermissionRecursive2']


class DriverPerformanceIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    driver: Union[bool, 'DriverArgsFromUserPermissionRecursive3']


class DriverPerformanceIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    driver: Union[bool, 'DriverArgsFromUserPermissionRecursive4']


class DriverPerformanceIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class DriverPerformanceArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyDriverPerformanceArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    driver: Union[bool, 'DriverArgsFromUserPermissionRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromUserPermissionRecursive1']


class DrivingRecordIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    driver: Union[bool, 'DriverArgsFromUserPermissionRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromUserPermissionRecursive2']


class DrivingRecordIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    driver: Union[bool, 'DriverArgsFromUserPermissionRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromUserPermissionRecursive3']


class DrivingRecordIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    driver: Union[bool, 'DriverArgsFromUserPermissionRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromUserPermissionRecursive4']


class DrivingRecordIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class DrivingRecordArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyDrivingRecordArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserPermissionRecursive1']


class ERPSyncConfigIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserPermissionRecursive2']


class ERPSyncConfigIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserPermissionRecursive3']


class ERPSyncConfigIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromUserPermissionRecursive4']


class ERPSyncConfigIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class ERPSyncConfigArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyERPSyncConfigArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    config: Union[bool, 'ERPSyncConfigArgsFromUserPermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive1']


class ERPSyncLogIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    config: Union[bool, 'ERPSyncConfigArgsFromUserPermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive2']


class ERPSyncLogIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    config: Union[bool, 'ERPSyncConfigArgsFromUserPermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive3']


class ERPSyncLogIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    config: Union[bool, 'ERPSyncConfigArgsFromUserPermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromUserPermissionRecursive4']


class ERPSyncLogIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class ERPSyncLogArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyERPSyncLogArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    technician: Union[bool, 'UserArgsFromUserPermissionRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromUserPermissionRecursive1']


class RepairIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    technician: Union[bool, 'UserArgsFromUserPermissionRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromUserPermissionRecursive2']


class RepairIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    technician: Union[bool, 'UserArgsFromUserPermissionRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromUserPermissionRecursive3']


class RepairIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    technician: Union[bool, 'UserArgsFromUserPermissionRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromUserPermissionRecursive4']


class RepairIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class RepairArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyRepairArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    repair: Union[bool, 'RepairArgsFromUserPermissionRecursive1']
    technician: Union[bool, 'UserArgsFromUserPermissionRecursive1']


class StatusHistoryIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    repair: Union[bool, 'RepairArgsFromUserPermissionRecursive2']
    technician: Union[bool, 'UserArgsFromUserPermissionRecursive2']


class StatusHistoryIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    repair: Union[bool, 'RepairArgsFromUserPermissionRecursive3']
    technician: Union[bool, 'UserArgsFromUserPermissionRecursive3']


class StatusHistoryIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    repair: Union[bool, 'RepairArgsFromUserPermissionRecursive4']
    technician: Union[bool, 'UserArgsFromUserPermissionRecursive4']


class StatusHistoryIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class StatusHistoryArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyStatusHistoryArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyUserPermissionArgs = FindManyUserPermissionArgsFromUserPermission
FindFirstUserPermissionArgs = FindManyUserPermissionArgsFromUserPermission


    

class UserPermissionWhereInput(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    permissionId: Union[_str, 'types.StringFilter']
    granted: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive1', List['UserPermissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive1']
    OR: List['UserPermissionWhereInputRecursive1']
    NOT: List['UserPermissionWhereInputRecursive1']


class UserPermissionWhereInputRecursive1(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    permissionId: Union[_str, 'types.StringFilter']
    granted: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive2', List['UserPermissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive2']
    OR: List['UserPermissionWhereInputRecursive2']
    NOT: List['UserPermissionWhereInputRecursive2']


class UserPermissionWhereInputRecursive2(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    permissionId: Union[_str, 'types.StringFilter']
    granted: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive3', List['UserPermissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive3']
    OR: List['UserPermissionWhereInputRecursive3']
    NOT: List['UserPermissionWhereInputRecursive3']


class UserPermissionWhereInputRecursive3(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    permissionId: Union[_str, 'types.StringFilter']
    granted: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive4', List['UserPermissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive4']
    OR: List['UserPermissionWhereInputRecursive4']
    NOT: List['UserPermissionWhereInputRecursive4']


class UserPermissionWhereInputRecursive4(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    permissionId: Union[_str, 'types.StringFilter']
    granted: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate UserPermission types


    

class UserPermissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    granted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive1']


class UserPermissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    granted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive2']


class UserPermissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    granted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive3']


class UserPermissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    granted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive4']


class UserPermissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    granted: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserPermissionGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    permissionId: _str
    granted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserPermissionSumAggregateOutput'
    _avg: 'UserPermissionAvgAggregateOutput'
    _min: 'UserPermissionMinAggregateOutput'
    _max: 'UserPermissionMaxAggregateOutput'
    _count: 'UserPermissionCountAggregateOutput'


class UserPermissionAvgAggregateOutput(TypedDict, total=False):
    """UserPermission output for aggregating averages"""


class UserPermissionSumAggregateOutput(TypedDict, total=False):
    """UserPermission output for aggregating sums"""


class UserPermissionScalarAggregateOutput(TypedDict, total=False):
    """UserPermission output including scalar fields"""
    id: _str
    userId: _str
    permissionId: _str
    granted: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserPermissionMinAggregateOutput = UserPermissionScalarAggregateOutput
UserPermissionMaxAggregateOutput = UserPermissionScalarAggregateOutput


class UserPermissionMaxAggregateInput(TypedDict, total=False):
    """UserPermission input for aggregating by max"""
    id: bool
    userId: bool
    permissionId: bool
    granted: bool
    createdAt: bool
    updatedAt: bool


class UserPermissionMinAggregateInput(TypedDict, total=False):
    """UserPermission input for aggregating by min"""
    id: bool
    userId: bool
    permissionId: bool
    granted: bool
    createdAt: bool
    updatedAt: bool


class UserPermissionNumberAggregateInput(TypedDict, total=False):
    """UserPermission input for aggregating numbers"""


UserPermissionAvgAggregateInput = UserPermissionNumberAggregateInput
UserPermissionSumAggregateInput = UserPermissionNumberAggregateInput


UserPermissionCountAggregateInput = TypedDict(
    'UserPermissionCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'permissionId': bool,
        'granted': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserPermissionCountAggregateOutput = TypedDict(
    'UserPermissionCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'permissionId': int,
        'granted': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserPermissionKeys = Literal[
    'id',
    'userId',
    'permissionId',
    'granted',
    'user',
    'permission',
    'createdAt',
    'updatedAt',
]
UserPermissionScalarFieldKeys = Literal[
    'id',
    'userId',
    'permissionId',
    'granted',
    'createdAt',
    'updatedAt',
]
UserPermissionScalarFieldKeysT = TypeVar('UserPermissionScalarFieldKeysT', bound=UserPermissionScalarFieldKeys)

UserPermissionRelationalFieldKeys = Literal[
        'user',
        'permission',
    ]

# RolePermission types

class RolePermissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the RolePermission create method"""
    id: _str
    permissionId: _str
    permission: 'PermissionCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class RolePermissionCreateInput(RolePermissionOptionalCreateInput):
    """Required arguments to the RolePermission create method"""
    role: 'enums.UserRole'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RolePermissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the RolePermission create method, without relations"""
    id: _str
    permissionId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class RolePermissionCreateWithoutRelationsInput(RolePermissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the RolePermission create method, without relations"""
    role: 'enums.UserRole'

class RolePermissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'RolePermissionCreateWithoutRelationsInput'
    where: 'RolePermissionWhereUniqueInput'

class RolePermissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RolePermissionCreateWithoutRelationsInput'
    connect: 'RolePermissionWhereUniqueInput'
    connect_or_create: 'RolePermissionConnectOrCreateWithoutRelationsInput'


class RolePermissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RolePermissionCreateWithoutRelationsInput', List['RolePermissionCreateWithoutRelationsInput']]
    connect: Union['RolePermissionWhereUniqueInput', List['RolePermissionWhereUniqueInput']]
    connect_or_create: Union['RolePermissionConnectOrCreateWithoutRelationsInput', List['RolePermissionConnectOrCreateWithoutRelationsInput']]

_RolePermissionWhereUnique_id_Input = TypedDict(
    '_RolePermissionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_RolePermissionCompoundrole_permissionIdKeyInner = TypedDict(
    '_RolePermissionCompoundrole_permissionIdKeyInner',
    {
        'role': 'enums.UserRole',
        'permissionId': '_str',
    },
    total=True
)

_RolePermissionCompoundrole_permissionIdKey = TypedDict(
    '_RolePermissionCompoundrole_permissionIdKey',
    {
        'role_permissionId': '_RolePermissionCompoundrole_permissionIdKeyInner',
    },
    total=True
)

RolePermissionWhereUniqueInput = Union[
    '_RolePermissionWhereUnique_id_Input',
    '_RolePermissionCompoundrole_permissionIdKey',
]


class RolePermissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    role: 'enums.UserRole'
    permission: 'PermissionUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class RolePermissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    role: 'enums.UserRole'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class RolePermissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RolePermissionCreateWithoutRelationsInput']
    connect: List['RolePermissionWhereUniqueInput']
    connect_or_create: List['RolePermissionConnectOrCreateWithoutRelationsInput']
    set: List['RolePermissionWhereUniqueInput']
    disconnect: List['RolePermissionWhereUniqueInput']
    delete: List['RolePermissionWhereUniqueInput']

    # TODO
    # update: List['RolePermissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RolePermissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RolePermissionScalarWhereInput']
    # upsert: List['RolePermissionUpserteWithWhereUniqueWithoutRelationsInput']


class RolePermissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RolePermissionCreateWithoutRelationsInput'
    connect: 'RolePermissionWhereUniqueInput'
    connect_or_create: 'RolePermissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RolePermissionUpdateInput'
    # upsert: 'RolePermissionUpsertWithoutRelationsInput'


class RolePermissionUpsertInput(TypedDict):
    create: 'RolePermissionCreateInput'
    update: 'RolePermissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_RolePermission_id_OrderByInput = TypedDict(
    '_RolePermission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_RolePermission_role_OrderByInput = TypedDict(
    '_RolePermission_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_RolePermission_permissionId_OrderByInput = TypedDict(
    '_RolePermission_permissionId_OrderByInput',
    {
        'permissionId': 'SortOrder',
    },
    total=True
)

_RolePermission_createdAt_OrderByInput = TypedDict(
    '_RolePermission_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_RolePermission_updatedAt_OrderByInput = TypedDict(
    '_RolePermission_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_RolePermission_RelevanceInner = TypedDict(
    '_RolePermission_RelevanceInner',
    {
        'fields': 'List[RolePermissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_RolePermission_RelevanceOrderByInput = TypedDict(
    '_RolePermission_RelevanceOrderByInput',
    {
        '_relevance': '_RolePermission_RelevanceInner',
    },
    total=True
)

RolePermissionOrderByInput = Union[
    '_RolePermission_id_OrderByInput',
    '_RolePermission_role_OrderByInput',
    '_RolePermission_permissionId_OrderByInput',
    '_RolePermission_createdAt_OrderByInput',
    '_RolePermission_updatedAt_OrderByInput',
    '_RolePermission_RelevanceOrderByInput',
]



# recursive RolePermission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RolePermissionRelationFilter = TypedDict(
    'RolePermissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RolePermissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RolePermissionInclude(TypedDict, total=False):
    """RolePermission relational arguments"""
    permission: Union[bool, 'PermissionArgsFromRolePermission']


    

class UserIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromRolePermissionRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromRolePermissionRecursive1']


class UserIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromRolePermissionRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromRolePermissionRecursive2']


class UserIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromRolePermissionRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromRolePermissionRecursive3']


class UserIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromRolePermissionRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromRolePermissionRecursive4']


class UserIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class UserArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyUserArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRolePermissionRecursive1']


class PermissionIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRolePermissionRecursive2']


class PermissionIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRolePermissionRecursive3']


class PermissionIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRolePermissionRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRolePermissionRecursive4']


class PermissionIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class PermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyPermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive1']


class UserPermissionIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive2']


class UserPermissionIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive3']


class UserPermissionIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive4']


class UserPermissionIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class UserPermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyUserPermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive1']


class RolePermissionIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive2']


class RolePermissionIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive3']


class RolePermissionIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    permission: Union[bool, 'PermissionArgsFromRolePermissionRecursive4']


class RolePermissionIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class RolePermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyRolePermissionArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromRolePermissionRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromRolePermissionRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRolePermissionRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromRolePermissionRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRolePermissionRecursive1']


class OrganizationIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromRolePermissionRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromRolePermissionRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRolePermissionRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromRolePermissionRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRolePermissionRecursive2']


class OrganizationIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromRolePermissionRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromRolePermissionRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRolePermissionRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromRolePermissionRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRolePermissionRecursive3']


class OrganizationIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRolePermissionRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromRolePermissionRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromRolePermissionRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRolePermissionRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromRolePermissionRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRolePermissionRecursive4']


class OrganizationIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class OrganizationArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyOrganizationArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive1']


class OrganizationMemberIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive2']


class OrganizationMemberIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive3']


class OrganizationMemberIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    user: Union[bool, 'UserArgsFromRolePermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive4']


class OrganizationMemberIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class OrganizationMemberArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyOrganizationMemberArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromRolePermissionRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRolePermissionRecursive1']


class DriverIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromRolePermissionRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRolePermissionRecursive2']


class DriverIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromRolePermissionRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRolePermissionRecursive3']


class DriverIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromRolePermissionRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRolePermissionRecursive4']


class DriverIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class DriverArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyDriverArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRolePermissionRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRolePermissionRecursive1']


class VehicleIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRolePermissionRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRolePermissionRecursive2']


class VehicleIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRolePermissionRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRolePermissionRecursive3']


class VehicleIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRolePermissionRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRolePermissionRecursive4']


class VehicleIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class VehicleArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyVehicleArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    vehicle: Union[bool, 'VehicleArgsFromRolePermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromRolePermissionRecursive1']


class MaintenanceIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    vehicle: Union[bool, 'VehicleArgsFromRolePermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromRolePermissionRecursive2']


class MaintenanceIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    vehicle: Union[bool, 'VehicleArgsFromRolePermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromRolePermissionRecursive3']


class MaintenanceIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    vehicle: Union[bool, 'VehicleArgsFromRolePermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromRolePermissionRecursive4']


class MaintenanceIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class MaintenanceArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyMaintenanceArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    maintenance: Union[bool, 'MaintenanceArgsFromRolePermissionRecursive1']


class MaintenancePartIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    maintenance: Union[bool, 'MaintenanceArgsFromRolePermissionRecursive2']


class MaintenancePartIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    maintenance: Union[bool, 'MaintenanceArgsFromRolePermissionRecursive3']


class MaintenancePartIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    maintenance: Union[bool, 'MaintenanceArgsFromRolePermissionRecursive4']


class MaintenancePartIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class MaintenancePartArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyMaintenancePartArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    driver: Union[bool, 'DriverArgsFromRolePermissionRecursive1']


class DriverPerformanceIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    driver: Union[bool, 'DriverArgsFromRolePermissionRecursive2']


class DriverPerformanceIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    driver: Union[bool, 'DriverArgsFromRolePermissionRecursive3']


class DriverPerformanceIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    driver: Union[bool, 'DriverArgsFromRolePermissionRecursive4']


class DriverPerformanceIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class DriverPerformanceArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyDriverPerformanceArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    driver: Union[bool, 'DriverArgsFromRolePermissionRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromRolePermissionRecursive1']


class DrivingRecordIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    driver: Union[bool, 'DriverArgsFromRolePermissionRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromRolePermissionRecursive2']


class DrivingRecordIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    driver: Union[bool, 'DriverArgsFromRolePermissionRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromRolePermissionRecursive3']


class DrivingRecordIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    driver: Union[bool, 'DriverArgsFromRolePermissionRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromRolePermissionRecursive4']


class DrivingRecordIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class DrivingRecordArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyDrivingRecordArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRolePermissionRecursive1']


class ERPSyncConfigIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRolePermissionRecursive2']


class ERPSyncConfigIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRolePermissionRecursive3']


class ERPSyncConfigIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRolePermissionRecursive4']


class ERPSyncConfigIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class ERPSyncConfigArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyERPSyncConfigArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    config: Union[bool, 'ERPSyncConfigArgsFromRolePermissionRecursive1']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive1']


class ERPSyncLogIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    config: Union[bool, 'ERPSyncConfigArgsFromRolePermissionRecursive2']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive2']


class ERPSyncLogIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    config: Union[bool, 'ERPSyncConfigArgsFromRolePermissionRecursive3']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive3']


class ERPSyncLogIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    config: Union[bool, 'ERPSyncConfigArgsFromRolePermissionRecursive4']
    organization: Union[bool, 'OrganizationArgsFromRolePermissionRecursive4']


class ERPSyncLogIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class ERPSyncLogArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyERPSyncLogArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    technician: Union[bool, 'UserArgsFromRolePermissionRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromRolePermissionRecursive1']


class RepairIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    technician: Union[bool, 'UserArgsFromRolePermissionRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromRolePermissionRecursive2']


class RepairIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    technician: Union[bool, 'UserArgsFromRolePermissionRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromRolePermissionRecursive3']


class RepairIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    technician: Union[bool, 'UserArgsFromRolePermissionRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromRolePermissionRecursive4']


class RepairIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class RepairArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyRepairArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromRolePermission(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    repair: Union[bool, 'RepairArgsFromRolePermissionRecursive1']
    technician: Union[bool, 'UserArgsFromRolePermissionRecursive1']


class StatusHistoryIncludeFromRolePermissionRecursive1(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    repair: Union[bool, 'RepairArgsFromRolePermissionRecursive2']
    technician: Union[bool, 'UserArgsFromRolePermissionRecursive2']


class StatusHistoryIncludeFromRolePermissionRecursive2(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    repair: Union[bool, 'RepairArgsFromRolePermissionRecursive3']
    technician: Union[bool, 'UserArgsFromRolePermissionRecursive3']


class StatusHistoryIncludeFromRolePermissionRecursive3(TypedDict, total=False):
    """Relational arguments for RolePermission"""
    repair: Union[bool, 'RepairArgsFromRolePermissionRecursive4']
    technician: Union[bool, 'UserArgsFromRolePermissionRecursive4']


class StatusHistoryIncludeFromRolePermissionRecursive4(TypedDict, total=False):
    """Relational arguments for RolePermission"""

    

class StatusHistoryArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    
    

class FindManyStatusHistoryArgsFromRolePermission(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromRolePermissionRecursive1(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromRolePermissionRecursive2(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromRolePermissionRecursive3(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromRolePermissionRecursive4(TypedDict, total=False):
    """Arguments for RolePermission"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyRolePermissionArgs = FindManyRolePermissionArgsFromRolePermission
FindFirstRolePermissionArgs = FindManyRolePermissionArgsFromRolePermission


    

class RolePermissionWhereInput(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringFilter']
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RolePermissionWhereInputRecursive1', List['RolePermissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RolePermissionWhereInputRecursive1']
    OR: List['RolePermissionWhereInputRecursive1']
    NOT: List['RolePermissionWhereInputRecursive1']


class RolePermissionWhereInputRecursive1(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringFilter']
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RolePermissionWhereInputRecursive2', List['RolePermissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RolePermissionWhereInputRecursive2']
    OR: List['RolePermissionWhereInputRecursive2']
    NOT: List['RolePermissionWhereInputRecursive2']


class RolePermissionWhereInputRecursive2(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringFilter']
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RolePermissionWhereInputRecursive3', List['RolePermissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RolePermissionWhereInputRecursive3']
    OR: List['RolePermissionWhereInputRecursive3']
    NOT: List['RolePermissionWhereInputRecursive3']


class RolePermissionWhereInputRecursive3(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringFilter']
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RolePermissionWhereInputRecursive4', List['RolePermissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RolePermissionWhereInputRecursive4']
    OR: List['RolePermissionWhereInputRecursive4']
    NOT: List['RolePermissionWhereInputRecursive4']


class RolePermissionWhereInputRecursive4(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringFilter']
    permission: 'PermissionRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate RolePermission types


    

class RolePermissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RolePermissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['RolePermissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RolePermissionScalarWhereWithAggregatesInputRecursive1']


class RolePermissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RolePermissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['RolePermissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RolePermissionScalarWhereWithAggregatesInputRecursive2']


class RolePermissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RolePermissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['RolePermissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RolePermissionScalarWhereWithAggregatesInputRecursive3']


class RolePermissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RolePermissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['RolePermissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RolePermissionScalarWhereWithAggregatesInputRecursive4']


class RolePermissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """RolePermission arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    permissionId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class RolePermissionGroupByOutput(TypedDict, total=False):
    id: _str
    role: 'enums.UserRole'
    permissionId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'RolePermissionSumAggregateOutput'
    _avg: 'RolePermissionAvgAggregateOutput'
    _min: 'RolePermissionMinAggregateOutput'
    _max: 'RolePermissionMaxAggregateOutput'
    _count: 'RolePermissionCountAggregateOutput'


class RolePermissionAvgAggregateOutput(TypedDict, total=False):
    """RolePermission output for aggregating averages"""


class RolePermissionSumAggregateOutput(TypedDict, total=False):
    """RolePermission output for aggregating sums"""


class RolePermissionScalarAggregateOutput(TypedDict, total=False):
    """RolePermission output including scalar fields"""
    id: _str
    role: 'enums.UserRole'
    permissionId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


RolePermissionMinAggregateOutput = RolePermissionScalarAggregateOutput
RolePermissionMaxAggregateOutput = RolePermissionScalarAggregateOutput


class RolePermissionMaxAggregateInput(TypedDict, total=False):
    """RolePermission input for aggregating by max"""
    id: bool
    role: bool
    permissionId: bool
    createdAt: bool
    updatedAt: bool


class RolePermissionMinAggregateInput(TypedDict, total=False):
    """RolePermission input for aggregating by min"""
    id: bool
    role: bool
    permissionId: bool
    createdAt: bool
    updatedAt: bool


class RolePermissionNumberAggregateInput(TypedDict, total=False):
    """RolePermission input for aggregating numbers"""


RolePermissionAvgAggregateInput = RolePermissionNumberAggregateInput
RolePermissionSumAggregateInput = RolePermissionNumberAggregateInput


RolePermissionCountAggregateInput = TypedDict(
    'RolePermissionCountAggregateInput',
    {
        'id': bool,
        'role': bool,
        'permissionId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

RolePermissionCountAggregateOutput = TypedDict(
    'RolePermissionCountAggregateOutput',
    {
        'id': int,
        'role': int,
        'permissionId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


RolePermissionKeys = Literal[
    'id',
    'role',
    'permissionId',
    'permission',
    'createdAt',
    'updatedAt',
]
RolePermissionScalarFieldKeys = Literal[
    'id',
    'role',
    'permissionId',
    'createdAt',
    'updatedAt',
]
RolePermissionScalarFieldKeysT = TypeVar('RolePermissionScalarFieldKeysT', bound=RolePermissionScalarFieldKeys)

RolePermissionRelationalFieldKeys = Literal[
        'permission',
    ]

# Organization types

class OrganizationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Organization create method"""
    id: _str
    description: Optional[_str]
    businessNumber: Optional[_str]
    address: Optional[_str]
    phone: Optional[_str]
    email: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    members: 'OrganizationMemberCreateManyNestedWithoutRelationsInput'
    drivers: 'DriverCreateManyNestedWithoutRelationsInput'
    vehicles: 'VehicleCreateManyNestedWithoutRelationsInput'
    maintenances: 'MaintenanceCreateManyNestedWithoutRelationsInput'
    erpSyncConfigs: 'ERPSyncConfigCreateManyNestedWithoutRelationsInput'
    erpSyncLogs: 'ERPSyncLogCreateManyNestedWithoutRelationsInput'


class OrganizationCreateInput(OrganizationOptionalCreateInput):
    """Required arguments to the Organization create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class OrganizationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Organization create method, without relations"""
    id: _str
    description: Optional[_str]
    businessNumber: Optional[_str]
    address: Optional[_str]
    phone: Optional[_str]
    email: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class OrganizationCreateWithoutRelationsInput(OrganizationOptionalCreateWithoutRelationsInput):
    """Required arguments to the Organization create method, without relations"""
    name: _str

class OrganizationConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'OrganizationCreateWithoutRelationsInput'
    where: 'OrganizationWhereUniqueInput'

class OrganizationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'OrganizationCreateWithoutRelationsInput'
    connect: 'OrganizationWhereUniqueInput'
    connect_or_create: 'OrganizationConnectOrCreateWithoutRelationsInput'


class OrganizationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['OrganizationCreateWithoutRelationsInput', List['OrganizationCreateWithoutRelationsInput']]
    connect: Union['OrganizationWhereUniqueInput', List['OrganizationWhereUniqueInput']]
    connect_or_create: Union['OrganizationConnectOrCreateWithoutRelationsInput', List['OrganizationConnectOrCreateWithoutRelationsInput']]

_OrganizationWhereUnique_id_Input = TypedDict(
    '_OrganizationWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_OrganizationWhereUnique_businessNumber_Input = TypedDict(
    '_OrganizationWhereUnique_businessNumber_Input',
    {
        'businessNumber': '_str',
    },
    total=True
)

OrganizationWhereUniqueInput = Union[
    '_OrganizationWhereUnique_id_Input',
    '_OrganizationWhereUnique_businessNumber_Input',
]


class OrganizationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]
    businessNumber: Optional[_str]
    address: Optional[_str]
    phone: Optional[_str]
    email: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    members: 'OrganizationMemberUpdateManyWithoutRelationsInput'
    drivers: 'DriverUpdateManyWithoutRelationsInput'
    vehicles: 'VehicleUpdateManyWithoutRelationsInput'
    maintenances: 'MaintenanceUpdateManyWithoutRelationsInput'
    erpSyncConfigs: 'ERPSyncConfigUpdateManyWithoutRelationsInput'
    erpSyncLogs: 'ERPSyncLogUpdateManyWithoutRelationsInput'


class OrganizationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]
    businessNumber: Optional[_str]
    address: Optional[_str]
    phone: Optional[_str]
    email: Optional[_str]
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class OrganizationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['OrganizationCreateWithoutRelationsInput']
    connect: List['OrganizationWhereUniqueInput']
    connect_or_create: List['OrganizationConnectOrCreateWithoutRelationsInput']
    set: List['OrganizationWhereUniqueInput']
    disconnect: List['OrganizationWhereUniqueInput']
    delete: List['OrganizationWhereUniqueInput']

    # TODO
    # update: List['OrganizationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['OrganizationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['OrganizationScalarWhereInput']
    # upsert: List['OrganizationUpserteWithWhereUniqueWithoutRelationsInput']


class OrganizationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'OrganizationCreateWithoutRelationsInput'
    connect: 'OrganizationWhereUniqueInput'
    connect_or_create: 'OrganizationConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'OrganizationUpdateInput'
    # upsert: 'OrganizationUpsertWithoutRelationsInput'


class OrganizationUpsertInput(TypedDict):
    create: 'OrganizationCreateInput'
    update: 'OrganizationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Organization_id_OrderByInput = TypedDict(
    '_Organization_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Organization_name_OrderByInput = TypedDict(
    '_Organization_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Organization_description_OrderByInput = TypedDict(
    '_Organization_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Organization_businessNumber_OrderByInput = TypedDict(
    '_Organization_businessNumber_OrderByInput',
    {
        'businessNumber': 'SortOrder',
    },
    total=True
)

_Organization_address_OrderByInput = TypedDict(
    '_Organization_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_Organization_phone_OrderByInput = TypedDict(
    '_Organization_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_Organization_email_OrderByInput = TypedDict(
    '_Organization_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Organization_isActive_OrderByInput = TypedDict(
    '_Organization_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_Organization_createdAt_OrderByInput = TypedDict(
    '_Organization_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Organization_updatedAt_OrderByInput = TypedDict(
    '_Organization_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Organization_RelevanceInner = TypedDict(
    '_Organization_RelevanceInner',
    {
        'fields': 'List[OrganizationScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Organization_RelevanceOrderByInput = TypedDict(
    '_Organization_RelevanceOrderByInput',
    {
        '_relevance': '_Organization_RelevanceInner',
    },
    total=True
)

OrganizationOrderByInput = Union[
    '_Organization_id_OrderByInput',
    '_Organization_name_OrderByInput',
    '_Organization_description_OrderByInput',
    '_Organization_businessNumber_OrderByInput',
    '_Organization_address_OrderByInput',
    '_Organization_phone_OrderByInput',
    '_Organization_email_OrderByInput',
    '_Organization_isActive_OrderByInput',
    '_Organization_createdAt_OrderByInput',
    '_Organization_updatedAt_OrderByInput',
    '_Organization_RelevanceOrderByInput',
]



# recursive Organization types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

OrganizationRelationFilter = TypedDict(
    'OrganizationRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class OrganizationListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class OrganizationInclude(TypedDict, total=False):
    """Organization relational arguments"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganization']
    drivers: Union[bool, 'FindManyDriverArgsFromOrganization']
    vehicles: Union[bool, 'FindManyVehicleArgsFromOrganization']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganization']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromOrganization']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganization']


    

class UserIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromOrganizationRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationRecursive1']


class UserIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromOrganizationRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationRecursive2']


class UserIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromOrganizationRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationRecursive3']


class UserIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromOrganizationRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationRecursive4']


class UserIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class UserArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyUserArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationRecursive1']


class PermissionIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationRecursive2']


class PermissionIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationRecursive3']


class PermissionIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationRecursive4']


class PermissionIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class PermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyPermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive1']
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive1']


class UserPermissionIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive2']
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive2']


class UserPermissionIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive3']
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive3']


class UserPermissionIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive4']
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive4']


class UserPermissionIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class UserPermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyUserPermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive1']


class RolePermissionIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive2']


class RolePermissionIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive3']


class RolePermissionIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    permission: Union[bool, 'PermissionArgsFromOrganizationRecursive4']


class RolePermissionIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class RolePermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyRolePermissionArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromOrganizationRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromOrganizationRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromOrganizationRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationRecursive1']


class OrganizationIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromOrganizationRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromOrganizationRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromOrganizationRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationRecursive2']


class OrganizationIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromOrganizationRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromOrganizationRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromOrganizationRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationRecursive3']


class OrganizationIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromOrganizationRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromOrganizationRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromOrganizationRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationRecursive4']


class OrganizationIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class OrganizationArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyOrganizationArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive1']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive1']


class OrganizationMemberIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive2']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive2']


class OrganizationMemberIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive3']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive3']


class OrganizationMemberIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    user: Union[bool, 'UserArgsFromOrganizationRecursive4']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive4']


class OrganizationMemberIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class OrganizationMemberArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyOrganizationMemberArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromOrganizationRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationRecursive1']


class DriverIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromOrganizationRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationRecursive2']


class DriverIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromOrganizationRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationRecursive3']


class DriverIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromOrganizationRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationRecursive4']


class DriverIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class DriverArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyDriverArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationRecursive1']


class VehicleIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationRecursive2']


class VehicleIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationRecursive3']


class VehicleIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationRecursive4']


class VehicleIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class VehicleArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyVehicleArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    vehicle: Union[bool, 'VehicleArgsFromOrganizationRecursive1']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromOrganizationRecursive1']


class MaintenanceIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    vehicle: Union[bool, 'VehicleArgsFromOrganizationRecursive2']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromOrganizationRecursive2']


class MaintenanceIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    vehicle: Union[bool, 'VehicleArgsFromOrganizationRecursive3']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromOrganizationRecursive3']


class MaintenanceIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    vehicle: Union[bool, 'VehicleArgsFromOrganizationRecursive4']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromOrganizationRecursive4']


class MaintenanceIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class MaintenanceArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyMaintenanceArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    maintenance: Union[bool, 'MaintenanceArgsFromOrganizationRecursive1']


class MaintenancePartIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    maintenance: Union[bool, 'MaintenanceArgsFromOrganizationRecursive2']


class MaintenancePartIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    maintenance: Union[bool, 'MaintenanceArgsFromOrganizationRecursive3']


class MaintenancePartIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    maintenance: Union[bool, 'MaintenanceArgsFromOrganizationRecursive4']


class MaintenancePartIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class MaintenancePartArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyMaintenancePartArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    driver: Union[bool, 'DriverArgsFromOrganizationRecursive1']


class DriverPerformanceIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    driver: Union[bool, 'DriverArgsFromOrganizationRecursive2']


class DriverPerformanceIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    driver: Union[bool, 'DriverArgsFromOrganizationRecursive3']


class DriverPerformanceIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    driver: Union[bool, 'DriverArgsFromOrganizationRecursive4']


class DriverPerformanceIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class DriverPerformanceArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyDriverPerformanceArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    driver: Union[bool, 'DriverArgsFromOrganizationRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromOrganizationRecursive1']


class DrivingRecordIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    driver: Union[bool, 'DriverArgsFromOrganizationRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromOrganizationRecursive2']


class DrivingRecordIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    driver: Union[bool, 'DriverArgsFromOrganizationRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromOrganizationRecursive3']


class DrivingRecordIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    driver: Union[bool, 'DriverArgsFromOrganizationRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromOrganizationRecursive4']


class DrivingRecordIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class DrivingRecordArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyDrivingRecordArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationRecursive1']


class ERPSyncConfigIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationRecursive2']


class ERPSyncConfigIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationRecursive3']


class ERPSyncConfigIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationRecursive4']


class ERPSyncConfigIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class ERPSyncConfigArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyERPSyncConfigArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    config: Union[bool, 'ERPSyncConfigArgsFromOrganizationRecursive1']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive1']


class ERPSyncLogIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    config: Union[bool, 'ERPSyncConfigArgsFromOrganizationRecursive2']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive2']


class ERPSyncLogIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    config: Union[bool, 'ERPSyncConfigArgsFromOrganizationRecursive3']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive3']


class ERPSyncLogIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    config: Union[bool, 'ERPSyncConfigArgsFromOrganizationRecursive4']
    organization: Union[bool, 'OrganizationArgsFromOrganizationRecursive4']


class ERPSyncLogIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class ERPSyncLogArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyERPSyncLogArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    technician: Union[bool, 'UserArgsFromOrganizationRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationRecursive1']


class RepairIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    technician: Union[bool, 'UserArgsFromOrganizationRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationRecursive2']


class RepairIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    technician: Union[bool, 'UserArgsFromOrganizationRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationRecursive3']


class RepairIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    technician: Union[bool, 'UserArgsFromOrganizationRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationRecursive4']


class RepairIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class RepairArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyRepairArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromOrganization(TypedDict, total=False):
    """Relational arguments for Organization"""
    repair: Union[bool, 'RepairArgsFromOrganizationRecursive1']
    technician: Union[bool, 'UserArgsFromOrganizationRecursive1']


class StatusHistoryIncludeFromOrganizationRecursive1(TypedDict, total=False):
    """Relational arguments for Organization"""
    repair: Union[bool, 'RepairArgsFromOrganizationRecursive2']
    technician: Union[bool, 'UserArgsFromOrganizationRecursive2']


class StatusHistoryIncludeFromOrganizationRecursive2(TypedDict, total=False):
    """Relational arguments for Organization"""
    repair: Union[bool, 'RepairArgsFromOrganizationRecursive3']
    technician: Union[bool, 'UserArgsFromOrganizationRecursive3']


class StatusHistoryIncludeFromOrganizationRecursive3(TypedDict, total=False):
    """Relational arguments for Organization"""
    repair: Union[bool, 'RepairArgsFromOrganizationRecursive4']
    technician: Union[bool, 'UserArgsFromOrganizationRecursive4']


class StatusHistoryIncludeFromOrganizationRecursive4(TypedDict, total=False):
    """Relational arguments for Organization"""

    

class StatusHistoryArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    
    

class FindManyStatusHistoryArgsFromOrganization(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromOrganizationRecursive1(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromOrganizationRecursive2(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromOrganizationRecursive3(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromOrganizationRecursive4(TypedDict, total=False):
    """Arguments for Organization"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyOrganizationArgs = FindManyOrganizationArgsFromOrganization
FindFirstOrganizationArgs = FindManyOrganizationArgsFromOrganization


    

class OrganizationWhereInput(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    businessNumber: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    members: 'OrganizationMemberListRelationFilter'
    drivers: 'DriverListRelationFilter'
    vehicles: 'VehicleListRelationFilter'
    maintenances: 'MaintenanceListRelationFilter'
    erpSyncConfigs: 'ERPSyncConfigListRelationFilter'
    erpSyncLogs: 'ERPSyncLogListRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationWhereInputRecursive1', List['OrganizationWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['OrganizationWhereInputRecursive1']
    OR: List['OrganizationWhereInputRecursive1']
    NOT: List['OrganizationWhereInputRecursive1']


class OrganizationWhereInputRecursive1(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    businessNumber: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    members: 'OrganizationMemberListRelationFilter'
    drivers: 'DriverListRelationFilter'
    vehicles: 'VehicleListRelationFilter'
    maintenances: 'MaintenanceListRelationFilter'
    erpSyncConfigs: 'ERPSyncConfigListRelationFilter'
    erpSyncLogs: 'ERPSyncLogListRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationWhereInputRecursive2', List['OrganizationWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['OrganizationWhereInputRecursive2']
    OR: List['OrganizationWhereInputRecursive2']
    NOT: List['OrganizationWhereInputRecursive2']


class OrganizationWhereInputRecursive2(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    businessNumber: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    members: 'OrganizationMemberListRelationFilter'
    drivers: 'DriverListRelationFilter'
    vehicles: 'VehicleListRelationFilter'
    maintenances: 'MaintenanceListRelationFilter'
    erpSyncConfigs: 'ERPSyncConfigListRelationFilter'
    erpSyncLogs: 'ERPSyncLogListRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationWhereInputRecursive3', List['OrganizationWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['OrganizationWhereInputRecursive3']
    OR: List['OrganizationWhereInputRecursive3']
    NOT: List['OrganizationWhereInputRecursive3']


class OrganizationWhereInputRecursive3(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    businessNumber: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    members: 'OrganizationMemberListRelationFilter'
    drivers: 'DriverListRelationFilter'
    vehicles: 'VehicleListRelationFilter'
    maintenances: 'MaintenanceListRelationFilter'
    erpSyncConfigs: 'ERPSyncConfigListRelationFilter'
    erpSyncLogs: 'ERPSyncLogListRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationWhereInputRecursive4', List['OrganizationWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['OrganizationWhereInputRecursive4']
    OR: List['OrganizationWhereInputRecursive4']
    NOT: List['OrganizationWhereInputRecursive4']


class OrganizationWhereInputRecursive4(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    businessNumber: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    members: 'OrganizationMemberListRelationFilter'
    drivers: 'DriverListRelationFilter'
    vehicles: 'VehicleListRelationFilter'
    maintenances: 'MaintenanceListRelationFilter'
    erpSyncConfigs: 'ERPSyncConfigListRelationFilter'
    erpSyncLogs: 'ERPSyncLogListRelationFilter'



# aggregate Organization types


    

class OrganizationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    businessNumber: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationScalarWhereWithAggregatesInputRecursive1']
    OR: List['OrganizationScalarWhereWithAggregatesInputRecursive1']
    NOT: List['OrganizationScalarWhereWithAggregatesInputRecursive1']


class OrganizationScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    businessNumber: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationScalarWhereWithAggregatesInputRecursive2']
    OR: List['OrganizationScalarWhereWithAggregatesInputRecursive2']
    NOT: List['OrganizationScalarWhereWithAggregatesInputRecursive2']


class OrganizationScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    businessNumber: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationScalarWhereWithAggregatesInputRecursive3']
    OR: List['OrganizationScalarWhereWithAggregatesInputRecursive3']
    NOT: List['OrganizationScalarWhereWithAggregatesInputRecursive3']


class OrganizationScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    businessNumber: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationScalarWhereWithAggregatesInputRecursive4']
    OR: List['OrganizationScalarWhereWithAggregatesInputRecursive4']
    NOT: List['OrganizationScalarWhereWithAggregatesInputRecursive4']


class OrganizationScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Organization arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    businessNumber: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class OrganizationGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    businessNumber: _str
    address: _str
    phone: _str
    email: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'OrganizationSumAggregateOutput'
    _avg: 'OrganizationAvgAggregateOutput'
    _min: 'OrganizationMinAggregateOutput'
    _max: 'OrganizationMaxAggregateOutput'
    _count: 'OrganizationCountAggregateOutput'


class OrganizationAvgAggregateOutput(TypedDict, total=False):
    """Organization output for aggregating averages"""


class OrganizationSumAggregateOutput(TypedDict, total=False):
    """Organization output for aggregating sums"""


class OrganizationScalarAggregateOutput(TypedDict, total=False):
    """Organization output including scalar fields"""
    id: _str
    name: _str
    description: _str
    businessNumber: _str
    address: _str
    phone: _str
    email: _str
    isActive: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


OrganizationMinAggregateOutput = OrganizationScalarAggregateOutput
OrganizationMaxAggregateOutput = OrganizationScalarAggregateOutput


class OrganizationMaxAggregateInput(TypedDict, total=False):
    """Organization input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    businessNumber: bool
    address: bool
    phone: bool
    email: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class OrganizationMinAggregateInput(TypedDict, total=False):
    """Organization input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    businessNumber: bool
    address: bool
    phone: bool
    email: bool
    isActive: bool
    createdAt: bool
    updatedAt: bool


class OrganizationNumberAggregateInput(TypedDict, total=False):
    """Organization input for aggregating numbers"""


OrganizationAvgAggregateInput = OrganizationNumberAggregateInput
OrganizationSumAggregateInput = OrganizationNumberAggregateInput


OrganizationCountAggregateInput = TypedDict(
    'OrganizationCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'businessNumber': bool,
        'address': bool,
        'phone': bool,
        'email': bool,
        'isActive': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

OrganizationCountAggregateOutput = TypedDict(
    'OrganizationCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'businessNumber': int,
        'address': int,
        'phone': int,
        'email': int,
        'isActive': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


OrganizationKeys = Literal[
    'id',
    'name',
    'description',
    'businessNumber',
    'address',
    'phone',
    'email',
    'isActive',
    'createdAt',
    'updatedAt',
    'members',
    'drivers',
    'vehicles',
    'maintenances',
    'erpSyncConfigs',
    'erpSyncLogs',
]
OrganizationScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'businessNumber',
    'address',
    'phone',
    'email',
    'isActive',
    'createdAt',
    'updatedAt',
]
OrganizationScalarFieldKeysT = TypeVar('OrganizationScalarFieldKeysT', bound=OrganizationScalarFieldKeys)

OrganizationRelationalFieldKeys = Literal[
        'members',
        'drivers',
        'vehicles',
        'maintenances',
        'erpSyncConfigs',
        'erpSyncLogs',
    ]

# OrganizationMember types

class OrganizationMemberOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the OrganizationMember create method"""
    id: _str
    userId: _str
    organizationId: _str
    isActive: _bool
    joinedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    organization: 'OrganizationCreateNestedWithoutRelationsInput'


class OrganizationMemberCreateInput(OrganizationMemberOptionalCreateInput):
    """Required arguments to the OrganizationMember create method"""
    role: 'enums.UserRole'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class OrganizationMemberOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the OrganizationMember create method, without relations"""
    id: _str
    userId: _str
    organizationId: _str
    isActive: _bool
    joinedAt: datetime.datetime


class OrganizationMemberCreateWithoutRelationsInput(OrganizationMemberOptionalCreateWithoutRelationsInput):
    """Required arguments to the OrganizationMember create method, without relations"""
    role: 'enums.UserRole'

class OrganizationMemberConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'OrganizationMemberCreateWithoutRelationsInput'
    where: 'OrganizationMemberWhereUniqueInput'

class OrganizationMemberCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'OrganizationMemberCreateWithoutRelationsInput'
    connect: 'OrganizationMemberWhereUniqueInput'
    connect_or_create: 'OrganizationMemberConnectOrCreateWithoutRelationsInput'


class OrganizationMemberCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['OrganizationMemberCreateWithoutRelationsInput', List['OrganizationMemberCreateWithoutRelationsInput']]
    connect: Union['OrganizationMemberWhereUniqueInput', List['OrganizationMemberWhereUniqueInput']]
    connect_or_create: Union['OrganizationMemberConnectOrCreateWithoutRelationsInput', List['OrganizationMemberConnectOrCreateWithoutRelationsInput']]

_OrganizationMemberWhereUnique_id_Input = TypedDict(
    '_OrganizationMemberWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_OrganizationMemberCompounduserId_organizationIdKeyInner = TypedDict(
    '_OrganizationMemberCompounduserId_organizationIdKeyInner',
    {
        'userId': '_str',
        'organizationId': '_str',
    },
    total=True
)

_OrganizationMemberCompounduserId_organizationIdKey = TypedDict(
    '_OrganizationMemberCompounduserId_organizationIdKey',
    {
        'userId_organizationId': '_OrganizationMemberCompounduserId_organizationIdKeyInner',
    },
    total=True
)

OrganizationMemberWhereUniqueInput = Union[
    '_OrganizationMemberWhereUnique_id_Input',
    '_OrganizationMemberCompounduserId_organizationIdKey',
]


class OrganizationMemberUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    role: 'enums.UserRole'
    isActive: _bool
    joinedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    organization: 'OrganizationUpdateOneWithoutRelationsInput'


class OrganizationMemberUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    role: 'enums.UserRole'
    isActive: _bool
    joinedAt: datetime.datetime


class OrganizationMemberUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['OrganizationMemberCreateWithoutRelationsInput']
    connect: List['OrganizationMemberWhereUniqueInput']
    connect_or_create: List['OrganizationMemberConnectOrCreateWithoutRelationsInput']
    set: List['OrganizationMemberWhereUniqueInput']
    disconnect: List['OrganizationMemberWhereUniqueInput']
    delete: List['OrganizationMemberWhereUniqueInput']

    # TODO
    # update: List['OrganizationMemberUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['OrganizationMemberUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['OrganizationMemberScalarWhereInput']
    # upsert: List['OrganizationMemberUpserteWithWhereUniqueWithoutRelationsInput']


class OrganizationMemberUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'OrganizationMemberCreateWithoutRelationsInput'
    connect: 'OrganizationMemberWhereUniqueInput'
    connect_or_create: 'OrganizationMemberConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'OrganizationMemberUpdateInput'
    # upsert: 'OrganizationMemberUpsertWithoutRelationsInput'


class OrganizationMemberUpsertInput(TypedDict):
    create: 'OrganizationMemberCreateInput'
    update: 'OrganizationMemberUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_OrganizationMember_id_OrderByInput = TypedDict(
    '_OrganizationMember_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_OrganizationMember_userId_OrderByInput = TypedDict(
    '_OrganizationMember_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_OrganizationMember_organizationId_OrderByInput = TypedDict(
    '_OrganizationMember_organizationId_OrderByInput',
    {
        'organizationId': 'SortOrder',
    },
    total=True
)

_OrganizationMember_role_OrderByInput = TypedDict(
    '_OrganizationMember_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_OrganizationMember_isActive_OrderByInput = TypedDict(
    '_OrganizationMember_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_OrganizationMember_joinedAt_OrderByInput = TypedDict(
    '_OrganizationMember_joinedAt_OrderByInput',
    {
        'joinedAt': 'SortOrder',
    },
    total=True
)

_OrganizationMember_RelevanceInner = TypedDict(
    '_OrganizationMember_RelevanceInner',
    {
        'fields': 'List[OrganizationMemberScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_OrganizationMember_RelevanceOrderByInput = TypedDict(
    '_OrganizationMember_RelevanceOrderByInput',
    {
        '_relevance': '_OrganizationMember_RelevanceInner',
    },
    total=True
)

OrganizationMemberOrderByInput = Union[
    '_OrganizationMember_id_OrderByInput',
    '_OrganizationMember_userId_OrderByInput',
    '_OrganizationMember_organizationId_OrderByInput',
    '_OrganizationMember_role_OrderByInput',
    '_OrganizationMember_isActive_OrderByInput',
    '_OrganizationMember_joinedAt_OrderByInput',
    '_OrganizationMember_RelevanceOrderByInput',
]



# recursive OrganizationMember types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

OrganizationMemberRelationFilter = TypedDict(
    'OrganizationMemberRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class OrganizationMemberListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class OrganizationMemberInclude(TypedDict, total=False):
    """OrganizationMember relational arguments"""
    user: Union[bool, 'UserArgsFromOrganizationMember']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMember']


    

class UserIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromOrganizationMemberRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationMemberRecursive1']


class UserIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromOrganizationMemberRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationMemberRecursive2']


class UserIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromOrganizationMemberRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationMemberRecursive3']


class UserIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromOrganizationMemberRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationMemberRecursive4']


class UserIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class UserArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyUserArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationMemberRecursive1']


class PermissionIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationMemberRecursive2']


class PermissionIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationMemberRecursive3']


class PermissionIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromOrganizationMemberRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromOrganizationMemberRecursive4']


class PermissionIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class PermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyPermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive1']
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive1']


class UserPermissionIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive2']
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive2']


class UserPermissionIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive3']
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive3']


class UserPermissionIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive4']
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive4']


class UserPermissionIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class UserPermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyUserPermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive1']


class RolePermissionIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive2']


class RolePermissionIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive3']


class RolePermissionIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    permission: Union[bool, 'PermissionArgsFromOrganizationMemberRecursive4']


class RolePermissionIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class RolePermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyRolePermissionArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromOrganizationMemberRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromOrganizationMemberRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationMemberRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromOrganizationMemberRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationMemberRecursive1']


class OrganizationIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromOrganizationMemberRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromOrganizationMemberRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationMemberRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromOrganizationMemberRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationMemberRecursive2']


class OrganizationIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromOrganizationMemberRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromOrganizationMemberRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationMemberRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromOrganizationMemberRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationMemberRecursive3']


class OrganizationIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromOrganizationMemberRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromOrganizationMemberRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromOrganizationMemberRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationMemberRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromOrganizationMemberRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationMemberRecursive4']


class OrganizationIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class OrganizationArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyOrganizationArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive1']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive1']


class OrganizationMemberIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive2']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive2']


class OrganizationMemberIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive3']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive3']


class OrganizationMemberIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    user: Union[bool, 'UserArgsFromOrganizationMemberRecursive4']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive4']


class OrganizationMemberIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class OrganizationMemberArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyOrganizationMemberArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromOrganizationMemberRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationMemberRecursive1']


class DriverIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromOrganizationMemberRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationMemberRecursive2']


class DriverIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromOrganizationMemberRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationMemberRecursive3']


class DriverIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromOrganizationMemberRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationMemberRecursive4']


class DriverIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class DriverArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyDriverArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationMemberRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationMemberRecursive1']


class VehicleIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationMemberRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationMemberRecursive2']


class VehicleIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationMemberRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationMemberRecursive3']


class VehicleIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromOrganizationMemberRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromOrganizationMemberRecursive4']


class VehicleIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class VehicleArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyVehicleArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    vehicle: Union[bool, 'VehicleArgsFromOrganizationMemberRecursive1']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromOrganizationMemberRecursive1']


class MaintenanceIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    vehicle: Union[bool, 'VehicleArgsFromOrganizationMemberRecursive2']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromOrganizationMemberRecursive2']


class MaintenanceIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    vehicle: Union[bool, 'VehicleArgsFromOrganizationMemberRecursive3']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromOrganizationMemberRecursive3']


class MaintenanceIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    vehicle: Union[bool, 'VehicleArgsFromOrganizationMemberRecursive4']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromOrganizationMemberRecursive4']


class MaintenanceIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class MaintenanceArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyMaintenanceArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    maintenance: Union[bool, 'MaintenanceArgsFromOrganizationMemberRecursive1']


class MaintenancePartIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    maintenance: Union[bool, 'MaintenanceArgsFromOrganizationMemberRecursive2']


class MaintenancePartIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    maintenance: Union[bool, 'MaintenanceArgsFromOrganizationMemberRecursive3']


class MaintenancePartIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    maintenance: Union[bool, 'MaintenanceArgsFromOrganizationMemberRecursive4']


class MaintenancePartIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class MaintenancePartArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyMaintenancePartArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    driver: Union[bool, 'DriverArgsFromOrganizationMemberRecursive1']


class DriverPerformanceIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    driver: Union[bool, 'DriverArgsFromOrganizationMemberRecursive2']


class DriverPerformanceIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    driver: Union[bool, 'DriverArgsFromOrganizationMemberRecursive3']


class DriverPerformanceIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    driver: Union[bool, 'DriverArgsFromOrganizationMemberRecursive4']


class DriverPerformanceIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class DriverPerformanceArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyDriverPerformanceArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    driver: Union[bool, 'DriverArgsFromOrganizationMemberRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromOrganizationMemberRecursive1']


class DrivingRecordIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    driver: Union[bool, 'DriverArgsFromOrganizationMemberRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromOrganizationMemberRecursive2']


class DrivingRecordIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    driver: Union[bool, 'DriverArgsFromOrganizationMemberRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromOrganizationMemberRecursive3']


class DrivingRecordIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    driver: Union[bool, 'DriverArgsFromOrganizationMemberRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromOrganizationMemberRecursive4']


class DrivingRecordIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class DrivingRecordArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyDrivingRecordArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationMemberRecursive1']


class ERPSyncConfigIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationMemberRecursive2']


class ERPSyncConfigIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationMemberRecursive3']


class ERPSyncConfigIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromOrganizationMemberRecursive4']


class ERPSyncConfigIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class ERPSyncConfigArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyERPSyncConfigArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    config: Union[bool, 'ERPSyncConfigArgsFromOrganizationMemberRecursive1']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive1']


class ERPSyncLogIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    config: Union[bool, 'ERPSyncConfigArgsFromOrganizationMemberRecursive2']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive2']


class ERPSyncLogIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    config: Union[bool, 'ERPSyncConfigArgsFromOrganizationMemberRecursive3']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive3']


class ERPSyncLogIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    config: Union[bool, 'ERPSyncConfigArgsFromOrganizationMemberRecursive4']
    organization: Union[bool, 'OrganizationArgsFromOrganizationMemberRecursive4']


class ERPSyncLogIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class ERPSyncLogArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyERPSyncLogArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    technician: Union[bool, 'UserArgsFromOrganizationMemberRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationMemberRecursive1']


class RepairIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    technician: Union[bool, 'UserArgsFromOrganizationMemberRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationMemberRecursive2']


class RepairIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    technician: Union[bool, 'UserArgsFromOrganizationMemberRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationMemberRecursive3']


class RepairIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    technician: Union[bool, 'UserArgsFromOrganizationMemberRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromOrganizationMemberRecursive4']


class RepairIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class RepairArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyRepairArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromOrganizationMember(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    repair: Union[bool, 'RepairArgsFromOrganizationMemberRecursive1']
    technician: Union[bool, 'UserArgsFromOrganizationMemberRecursive1']


class StatusHistoryIncludeFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    repair: Union[bool, 'RepairArgsFromOrganizationMemberRecursive2']
    technician: Union[bool, 'UserArgsFromOrganizationMemberRecursive2']


class StatusHistoryIncludeFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    repair: Union[bool, 'RepairArgsFromOrganizationMemberRecursive3']
    technician: Union[bool, 'UserArgsFromOrganizationMemberRecursive3']


class StatusHistoryIncludeFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""
    repair: Union[bool, 'RepairArgsFromOrganizationMemberRecursive4']
    technician: Union[bool, 'UserArgsFromOrganizationMemberRecursive4']


class StatusHistoryIncludeFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Relational arguments for OrganizationMember"""

    

class StatusHistoryArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    
    

class FindManyStatusHistoryArgsFromOrganizationMember(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromOrganizationMemberRecursive1(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromOrganizationMemberRecursive2(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromOrganizationMemberRecursive3(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromOrganizationMemberRecursive4(TypedDict, total=False):
    """Arguments for OrganizationMember"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyOrganizationMemberArgs = FindManyOrganizationMemberArgsFromOrganizationMember
FindFirstOrganizationMemberArgs = FindManyOrganizationMemberArgsFromOrganizationMember


    

class OrganizationMemberWhereInput(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    organization: 'OrganizationRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationMemberWhereInputRecursive1', List['OrganizationMemberWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['OrganizationMemberWhereInputRecursive1']
    OR: List['OrganizationMemberWhereInputRecursive1']
    NOT: List['OrganizationMemberWhereInputRecursive1']


class OrganizationMemberWhereInputRecursive1(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    organization: 'OrganizationRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationMemberWhereInputRecursive2', List['OrganizationMemberWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['OrganizationMemberWhereInputRecursive2']
    OR: List['OrganizationMemberWhereInputRecursive2']
    NOT: List['OrganizationMemberWhereInputRecursive2']


class OrganizationMemberWhereInputRecursive2(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    organization: 'OrganizationRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationMemberWhereInputRecursive3', List['OrganizationMemberWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['OrganizationMemberWhereInputRecursive3']
    OR: List['OrganizationMemberWhereInputRecursive3']
    NOT: List['OrganizationMemberWhereInputRecursive3']


class OrganizationMemberWhereInputRecursive3(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    organization: 'OrganizationRelationFilter'

    # should be noted that AND and NOT should be Union['OrganizationMemberWhereInputRecursive4', List['OrganizationMemberWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['OrganizationMemberWhereInputRecursive4']
    OR: List['OrganizationMemberWhereInputRecursive4']
    NOT: List['OrganizationMemberWhereInputRecursive4']


class OrganizationMemberWhereInputRecursive4(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    organization: 'OrganizationRelationFilter'



# aggregate OrganizationMember types


    

class OrganizationMemberScalarWhereWithAggregatesInput(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive1']
    OR: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive1']
    NOT: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive1']


class OrganizationMemberScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive2']
    OR: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive2']
    NOT: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive2']


class OrganizationMemberScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive3']
    OR: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive3']
    NOT: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive3']


class OrganizationMemberScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive4']
    OR: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive4']
    NOT: List['OrganizationMemberScalarWhereWithAggregatesInputRecursive4']


class OrganizationMemberScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """OrganizationMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class OrganizationMemberGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    organizationId: _str
    role: 'enums.UserRole'
    isActive: _bool
    joinedAt: datetime.datetime
    _sum: 'OrganizationMemberSumAggregateOutput'
    _avg: 'OrganizationMemberAvgAggregateOutput'
    _min: 'OrganizationMemberMinAggregateOutput'
    _max: 'OrganizationMemberMaxAggregateOutput'
    _count: 'OrganizationMemberCountAggregateOutput'


class OrganizationMemberAvgAggregateOutput(TypedDict, total=False):
    """OrganizationMember output for aggregating averages"""


class OrganizationMemberSumAggregateOutput(TypedDict, total=False):
    """OrganizationMember output for aggregating sums"""


class OrganizationMemberScalarAggregateOutput(TypedDict, total=False):
    """OrganizationMember output including scalar fields"""
    id: _str
    userId: _str
    organizationId: _str
    role: 'enums.UserRole'
    isActive: _bool
    joinedAt: datetime.datetime


OrganizationMemberMinAggregateOutput = OrganizationMemberScalarAggregateOutput
OrganizationMemberMaxAggregateOutput = OrganizationMemberScalarAggregateOutput


class OrganizationMemberMaxAggregateInput(TypedDict, total=False):
    """OrganizationMember input for aggregating by max"""
    id: bool
    userId: bool
    organizationId: bool
    role: bool
    isActive: bool
    joinedAt: bool


class OrganizationMemberMinAggregateInput(TypedDict, total=False):
    """OrganizationMember input for aggregating by min"""
    id: bool
    userId: bool
    organizationId: bool
    role: bool
    isActive: bool
    joinedAt: bool


class OrganizationMemberNumberAggregateInput(TypedDict, total=False):
    """OrganizationMember input for aggregating numbers"""


OrganizationMemberAvgAggregateInput = OrganizationMemberNumberAggregateInput
OrganizationMemberSumAggregateInput = OrganizationMemberNumberAggregateInput


OrganizationMemberCountAggregateInput = TypedDict(
    'OrganizationMemberCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'organizationId': bool,
        'role': bool,
        'isActive': bool,
        'joinedAt': bool,
        '_all': bool,
    },
    total=False,
)

OrganizationMemberCountAggregateOutput = TypedDict(
    'OrganizationMemberCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'organizationId': int,
        'role': int,
        'isActive': int,
        'joinedAt': int,
        '_all': int,
    },
    total=False,
)


OrganizationMemberKeys = Literal[
    'id',
    'userId',
    'organizationId',
    'role',
    'isActive',
    'joinedAt',
    'user',
    'organization',
]
OrganizationMemberScalarFieldKeys = Literal[
    'id',
    'userId',
    'organizationId',
    'role',
    'isActive',
    'joinedAt',
]
OrganizationMemberScalarFieldKeysT = TypeVar('OrganizationMemberScalarFieldKeysT', bound=OrganizationMemberScalarFieldKeys)

OrganizationMemberRelationalFieldKeys = Literal[
        'user',
        'organization',
    ]

# Driver types

class DriverOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Driver create method"""
    id: _str
    licenseType: Optional[_str]
    isActive: _bool
    restrictions: List[_str]
    notes: Optional[_str]
    assignedVehicles: List[_str]
    emergencyContact: Optional['fields.Json']
    address: Optional[_str]
    birthDate: Optional[datetime.datetime]
    hireDate: Optional[datetime.datetime]
    department: Optional[_str]
    position: Optional[_str]
    profileImageUrl: Optional[_str]
    organizationId: _str
    organization: 'OrganizationCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    performanceData: 'DriverPerformanceCreateManyNestedWithoutRelationsInput'
    drivingRecords: 'DrivingRecordCreateManyNestedWithoutRelationsInput'


class DriverCreateInput(DriverOptionalCreateInput):
    """Required arguments to the Driver create method"""
    name: _str
    email: _str
    phone: _str
    licenseNumber: _str
    licenseExpiry: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DriverOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Driver create method, without relations"""
    id: _str
    licenseType: Optional[_str]
    isActive: _bool
    restrictions: List[_str]
    notes: Optional[_str]
    assignedVehicles: List[_str]
    emergencyContact: Optional['fields.Json']
    address: Optional[_str]
    birthDate: Optional[datetime.datetime]
    hireDate: Optional[datetime.datetime]
    department: Optional[_str]
    position: Optional[_str]
    profileImageUrl: Optional[_str]
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class DriverCreateWithoutRelationsInput(DriverOptionalCreateWithoutRelationsInput):
    """Required arguments to the Driver create method, without relations"""
    name: _str
    email: _str
    phone: _str
    licenseNumber: _str
    licenseExpiry: datetime.datetime

class DriverConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'DriverCreateWithoutRelationsInput'
    where: 'DriverWhereUniqueInput'

class DriverCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DriverCreateWithoutRelationsInput'
    connect: 'DriverWhereUniqueInput'
    connect_or_create: 'DriverConnectOrCreateWithoutRelationsInput'


class DriverCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DriverCreateWithoutRelationsInput', List['DriverCreateWithoutRelationsInput']]
    connect: Union['DriverWhereUniqueInput', List['DriverWhereUniqueInput']]
    connect_or_create: Union['DriverConnectOrCreateWithoutRelationsInput', List['DriverConnectOrCreateWithoutRelationsInput']]

_DriverWhereUnique_id_Input = TypedDict(
    '_DriverWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_DriverWhereUnique_email_Input = TypedDict(
    '_DriverWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

_DriverWhereUnique_licenseNumber_Input = TypedDict(
    '_DriverWhereUnique_licenseNumber_Input',
    {
        'licenseNumber': '_str',
    },
    total=True
)

DriverWhereUniqueInput = Union[
    '_DriverWhereUnique_id_Input',
    '_DriverWhereUnique_email_Input',
    '_DriverWhereUnique_licenseNumber_Input',
]


class DriverUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    email: _str
    phone: _str
    licenseNumber: _str
    licenseType: Optional[_str]
    licenseExpiry: datetime.datetime
    isActive: _bool
    restrictions: 'types.StringListUpdate'
    notes: Optional[_str]
    assignedVehicles: 'types.StringListUpdate'
    emergencyContact: Optional['fields.Json']
    address: Optional[_str]
    birthDate: Optional[datetime.datetime]
    hireDate: Optional[datetime.datetime]
    department: Optional[_str]
    position: Optional[_str]
    profileImageUrl: Optional[_str]
    organization: 'OrganizationUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    performanceData: 'DriverPerformanceUpdateManyWithoutRelationsInput'
    drivingRecords: 'DrivingRecordUpdateManyWithoutRelationsInput'


class DriverUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    email: _str
    phone: _str
    licenseNumber: _str
    licenseType: Optional[_str]
    licenseExpiry: datetime.datetime
    isActive: _bool
    restrictions: 'types.StringListUpdate'
    notes: Optional[_str]
    assignedVehicles: 'types.StringListUpdate'
    emergencyContact: Optional['fields.Json']
    address: Optional[_str]
    birthDate: Optional[datetime.datetime]
    hireDate: Optional[datetime.datetime]
    department: Optional[_str]
    position: Optional[_str]
    profileImageUrl: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class DriverUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DriverCreateWithoutRelationsInput']
    connect: List['DriverWhereUniqueInput']
    connect_or_create: List['DriverConnectOrCreateWithoutRelationsInput']
    set: List['DriverWhereUniqueInput']
    disconnect: List['DriverWhereUniqueInput']
    delete: List['DriverWhereUniqueInput']

    # TODO
    # update: List['DriverUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DriverUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DriverScalarWhereInput']
    # upsert: List['DriverUpserteWithWhereUniqueWithoutRelationsInput']


class DriverUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DriverCreateWithoutRelationsInput'
    connect: 'DriverWhereUniqueInput'
    connect_or_create: 'DriverConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DriverUpdateInput'
    # upsert: 'DriverUpsertWithoutRelationsInput'


class DriverUpsertInput(TypedDict):
    create: 'DriverCreateInput'
    update: 'DriverUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Driver_id_OrderByInput = TypedDict(
    '_Driver_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Driver_name_OrderByInput = TypedDict(
    '_Driver_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Driver_email_OrderByInput = TypedDict(
    '_Driver_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Driver_phone_OrderByInput = TypedDict(
    '_Driver_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_Driver_licenseNumber_OrderByInput = TypedDict(
    '_Driver_licenseNumber_OrderByInput',
    {
        'licenseNumber': 'SortOrder',
    },
    total=True
)

_Driver_licenseType_OrderByInput = TypedDict(
    '_Driver_licenseType_OrderByInput',
    {
        'licenseType': 'SortOrder',
    },
    total=True
)

_Driver_licenseExpiry_OrderByInput = TypedDict(
    '_Driver_licenseExpiry_OrderByInput',
    {
        'licenseExpiry': 'SortOrder',
    },
    total=True
)

_Driver_isActive_OrderByInput = TypedDict(
    '_Driver_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_Driver_restrictions_OrderByInput = TypedDict(
    '_Driver_restrictions_OrderByInput',
    {
        'restrictions': 'SortOrder',
    },
    total=True
)

_Driver_notes_OrderByInput = TypedDict(
    '_Driver_notes_OrderByInput',
    {
        'notes': 'SortOrder',
    },
    total=True
)

_Driver_assignedVehicles_OrderByInput = TypedDict(
    '_Driver_assignedVehicles_OrderByInput',
    {
        'assignedVehicles': 'SortOrder',
    },
    total=True
)

_Driver_emergencyContact_OrderByInput = TypedDict(
    '_Driver_emergencyContact_OrderByInput',
    {
        'emergencyContact': 'SortOrder',
    },
    total=True
)

_Driver_address_OrderByInput = TypedDict(
    '_Driver_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_Driver_birthDate_OrderByInput = TypedDict(
    '_Driver_birthDate_OrderByInput',
    {
        'birthDate': 'SortOrder',
    },
    total=True
)

_Driver_hireDate_OrderByInput = TypedDict(
    '_Driver_hireDate_OrderByInput',
    {
        'hireDate': 'SortOrder',
    },
    total=True
)

_Driver_department_OrderByInput = TypedDict(
    '_Driver_department_OrderByInput',
    {
        'department': 'SortOrder',
    },
    total=True
)

_Driver_position_OrderByInput = TypedDict(
    '_Driver_position_OrderByInput',
    {
        'position': 'SortOrder',
    },
    total=True
)

_Driver_profileImageUrl_OrderByInput = TypedDict(
    '_Driver_profileImageUrl_OrderByInput',
    {
        'profileImageUrl': 'SortOrder',
    },
    total=True
)

_Driver_organizationId_OrderByInput = TypedDict(
    '_Driver_organizationId_OrderByInput',
    {
        'organizationId': 'SortOrder',
    },
    total=True
)

_Driver_createdAt_OrderByInput = TypedDict(
    '_Driver_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Driver_updatedAt_OrderByInput = TypedDict(
    '_Driver_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Driver_RelevanceInner = TypedDict(
    '_Driver_RelevanceInner',
    {
        'fields': 'List[DriverScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Driver_RelevanceOrderByInput = TypedDict(
    '_Driver_RelevanceOrderByInput',
    {
        '_relevance': '_Driver_RelevanceInner',
    },
    total=True
)

DriverOrderByInput = Union[
    '_Driver_id_OrderByInput',
    '_Driver_name_OrderByInput',
    '_Driver_email_OrderByInput',
    '_Driver_phone_OrderByInput',
    '_Driver_licenseNumber_OrderByInput',
    '_Driver_licenseType_OrderByInput',
    '_Driver_licenseExpiry_OrderByInput',
    '_Driver_isActive_OrderByInput',
    '_Driver_restrictions_OrderByInput',
    '_Driver_notes_OrderByInput',
    '_Driver_assignedVehicles_OrderByInput',
    '_Driver_emergencyContact_OrderByInput',
    '_Driver_address_OrderByInput',
    '_Driver_birthDate_OrderByInput',
    '_Driver_hireDate_OrderByInput',
    '_Driver_department_OrderByInput',
    '_Driver_position_OrderByInput',
    '_Driver_profileImageUrl_OrderByInput',
    '_Driver_organizationId_OrderByInput',
    '_Driver_createdAt_OrderByInput',
    '_Driver_updatedAt_OrderByInput',
    '_Driver_RelevanceOrderByInput',
]



# recursive Driver types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DriverRelationFilter = TypedDict(
    'DriverRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DriverListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DriverInclude(TypedDict, total=False):
    """Driver relational arguments"""
    organization: Union[bool, 'OrganizationArgsFromDriver']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDriver']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriver']


    

class UserIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDriverRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDriverRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromDriverRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDriverRecursive1']


class UserIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDriverRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDriverRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromDriverRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDriverRecursive2']


class UserIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDriverRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDriverRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromDriverRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDriverRecursive3']


class UserIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDriverRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDriverRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromDriverRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDriverRecursive4']


class UserIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class UserArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyUserArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDriverRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDriverRecursive1']


class PermissionIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDriverRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDriverRecursive2']


class PermissionIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDriverRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDriverRecursive3']


class PermissionIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDriverRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDriverRecursive4']


class PermissionIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class PermissionArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyPermissionArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    user: Union[bool, 'UserArgsFromDriverRecursive1']
    permission: Union[bool, 'PermissionArgsFromDriverRecursive1']


class UserPermissionIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    user: Union[bool, 'UserArgsFromDriverRecursive2']
    permission: Union[bool, 'PermissionArgsFromDriverRecursive2']


class UserPermissionIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    user: Union[bool, 'UserArgsFromDriverRecursive3']
    permission: Union[bool, 'PermissionArgsFromDriverRecursive3']


class UserPermissionIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    user: Union[bool, 'UserArgsFromDriverRecursive4']
    permission: Union[bool, 'PermissionArgsFromDriverRecursive4']


class UserPermissionIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class UserPermissionArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyUserPermissionArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    permission: Union[bool, 'PermissionArgsFromDriverRecursive1']


class RolePermissionIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    permission: Union[bool, 'PermissionArgsFromDriverRecursive2']


class RolePermissionIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    permission: Union[bool, 'PermissionArgsFromDriverRecursive3']


class RolePermissionIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    permission: Union[bool, 'PermissionArgsFromDriverRecursive4']


class RolePermissionIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class RolePermissionArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyRolePermissionArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDriverRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromDriverRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDriverRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDriverRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverRecursive1']


class OrganizationIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDriverRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromDriverRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDriverRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDriverRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverRecursive2']


class OrganizationIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDriverRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromDriverRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDriverRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDriverRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverRecursive3']


class OrganizationIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDriverRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromDriverRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDriverRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDriverRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverRecursive4']


class OrganizationIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class OrganizationArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyOrganizationArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    user: Union[bool, 'UserArgsFromDriverRecursive1']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive1']


class OrganizationMemberIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    user: Union[bool, 'UserArgsFromDriverRecursive2']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive2']


class OrganizationMemberIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    user: Union[bool, 'UserArgsFromDriverRecursive3']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive3']


class OrganizationMemberIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    user: Union[bool, 'UserArgsFromDriverRecursive4']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive4']


class OrganizationMemberIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class OrganizationMemberArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyOrganizationMemberArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDriverRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverRecursive1']


class DriverIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDriverRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverRecursive2']


class DriverIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDriverRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverRecursive3']


class DriverIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDriverRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverRecursive4']


class DriverIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class DriverArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyDriverArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverRecursive1']


class VehicleIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverRecursive2']


class VehicleIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverRecursive3']


class VehicleIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverRecursive4']


class VehicleIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class VehicleArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyVehicleArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    vehicle: Union[bool, 'VehicleArgsFromDriverRecursive1']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDriverRecursive1']


class MaintenanceIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    vehicle: Union[bool, 'VehicleArgsFromDriverRecursive2']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDriverRecursive2']


class MaintenanceIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    vehicle: Union[bool, 'VehicleArgsFromDriverRecursive3']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDriverRecursive3']


class MaintenanceIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    vehicle: Union[bool, 'VehicleArgsFromDriverRecursive4']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDriverRecursive4']


class MaintenanceIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class MaintenanceArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyMaintenanceArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    maintenance: Union[bool, 'MaintenanceArgsFromDriverRecursive1']


class MaintenancePartIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    maintenance: Union[bool, 'MaintenanceArgsFromDriverRecursive2']


class MaintenancePartIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    maintenance: Union[bool, 'MaintenanceArgsFromDriverRecursive3']


class MaintenancePartIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    maintenance: Union[bool, 'MaintenanceArgsFromDriverRecursive4']


class MaintenancePartIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class MaintenancePartArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyMaintenancePartArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    driver: Union[bool, 'DriverArgsFromDriverRecursive1']


class DriverPerformanceIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    driver: Union[bool, 'DriverArgsFromDriverRecursive2']


class DriverPerformanceIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    driver: Union[bool, 'DriverArgsFromDriverRecursive3']


class DriverPerformanceIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    driver: Union[bool, 'DriverArgsFromDriverRecursive4']


class DriverPerformanceIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class DriverPerformanceArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyDriverPerformanceArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    driver: Union[bool, 'DriverArgsFromDriverRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromDriverRecursive1']


class DrivingRecordIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    driver: Union[bool, 'DriverArgsFromDriverRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromDriverRecursive2']


class DrivingRecordIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    driver: Union[bool, 'DriverArgsFromDriverRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromDriverRecursive3']


class DrivingRecordIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    driver: Union[bool, 'DriverArgsFromDriverRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromDriverRecursive4']


class DrivingRecordIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class DrivingRecordArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyDrivingRecordArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverRecursive1']


class ERPSyncConfigIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverRecursive2']


class ERPSyncConfigIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverRecursive3']


class ERPSyncConfigIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverRecursive4']


class ERPSyncConfigIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class ERPSyncConfigArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyERPSyncConfigArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    config: Union[bool, 'ERPSyncConfigArgsFromDriverRecursive1']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive1']


class ERPSyncLogIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    config: Union[bool, 'ERPSyncConfigArgsFromDriverRecursive2']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive2']


class ERPSyncLogIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    config: Union[bool, 'ERPSyncConfigArgsFromDriverRecursive3']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive3']


class ERPSyncLogIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    config: Union[bool, 'ERPSyncConfigArgsFromDriverRecursive4']
    organization: Union[bool, 'OrganizationArgsFromDriverRecursive4']


class ERPSyncLogIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class ERPSyncLogArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyERPSyncLogArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    technician: Union[bool, 'UserArgsFromDriverRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDriverRecursive1']


class RepairIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    technician: Union[bool, 'UserArgsFromDriverRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDriverRecursive2']


class RepairIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    technician: Union[bool, 'UserArgsFromDriverRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDriverRecursive3']


class RepairIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    technician: Union[bool, 'UserArgsFromDriverRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDriverRecursive4']


class RepairIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class RepairArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyRepairArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromDriver(TypedDict, total=False):
    """Relational arguments for Driver"""
    repair: Union[bool, 'RepairArgsFromDriverRecursive1']
    technician: Union[bool, 'UserArgsFromDriverRecursive1']


class StatusHistoryIncludeFromDriverRecursive1(TypedDict, total=False):
    """Relational arguments for Driver"""
    repair: Union[bool, 'RepairArgsFromDriverRecursive2']
    technician: Union[bool, 'UserArgsFromDriverRecursive2']


class StatusHistoryIncludeFromDriverRecursive2(TypedDict, total=False):
    """Relational arguments for Driver"""
    repair: Union[bool, 'RepairArgsFromDriverRecursive3']
    technician: Union[bool, 'UserArgsFromDriverRecursive3']


class StatusHistoryIncludeFromDriverRecursive3(TypedDict, total=False):
    """Relational arguments for Driver"""
    repair: Union[bool, 'RepairArgsFromDriverRecursive4']
    technician: Union[bool, 'UserArgsFromDriverRecursive4']


class StatusHistoryIncludeFromDriverRecursive4(TypedDict, total=False):
    """Relational arguments for Driver"""

    

class StatusHistoryArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    
    

class FindManyStatusHistoryArgsFromDriver(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromDriverRecursive1(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromDriverRecursive2(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromDriverRecursive3(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromDriverRecursive4(TypedDict, total=False):
    """Arguments for Driver"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyDriverArgs = FindManyDriverArgsFromDriver
FindFirstDriverArgs = FindManyDriverArgsFromDriver


    

class DriverWhereInput(TypedDict, total=False):
    """Driver arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    phone: Union[_str, 'types.StringFilter']
    licenseNumber: Union[_str, 'types.StringFilter']
    licenseType: Union[None, _str, 'types.StringFilter']
    licenseExpiry: Union[datetime.datetime, 'types.DateTimeFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    restrictions: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    assignedVehicles: 'types.StringListFilter'
    emergencyContact: Union[None, 'fields.Json', 'types.JsonFilter']
    address: Union[None, _str, 'types.StringFilter']
    birthDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hireDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    department: Union[None, _str, 'types.StringFilter']
    position: Union[None, _str, 'types.StringFilter']
    profileImageUrl: Union[None, _str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    performanceData: 'DriverPerformanceListRelationFilter'
    drivingRecords: 'DrivingRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['DriverWhereInputRecursive1', List['DriverWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DriverWhereInputRecursive1']
    OR: List['DriverWhereInputRecursive1']
    NOT: List['DriverWhereInputRecursive1']


class DriverWhereInputRecursive1(TypedDict, total=False):
    """Driver arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    phone: Union[_str, 'types.StringFilter']
    licenseNumber: Union[_str, 'types.StringFilter']
    licenseType: Union[None, _str, 'types.StringFilter']
    licenseExpiry: Union[datetime.datetime, 'types.DateTimeFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    restrictions: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    assignedVehicles: 'types.StringListFilter'
    emergencyContact: Union[None, 'fields.Json', 'types.JsonFilter']
    address: Union[None, _str, 'types.StringFilter']
    birthDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hireDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    department: Union[None, _str, 'types.StringFilter']
    position: Union[None, _str, 'types.StringFilter']
    profileImageUrl: Union[None, _str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    performanceData: 'DriverPerformanceListRelationFilter'
    drivingRecords: 'DrivingRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['DriverWhereInputRecursive2', List['DriverWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DriverWhereInputRecursive2']
    OR: List['DriverWhereInputRecursive2']
    NOT: List['DriverWhereInputRecursive2']


class DriverWhereInputRecursive2(TypedDict, total=False):
    """Driver arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    phone: Union[_str, 'types.StringFilter']
    licenseNumber: Union[_str, 'types.StringFilter']
    licenseType: Union[None, _str, 'types.StringFilter']
    licenseExpiry: Union[datetime.datetime, 'types.DateTimeFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    restrictions: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    assignedVehicles: 'types.StringListFilter'
    emergencyContact: Union[None, 'fields.Json', 'types.JsonFilter']
    address: Union[None, _str, 'types.StringFilter']
    birthDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hireDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    department: Union[None, _str, 'types.StringFilter']
    position: Union[None, _str, 'types.StringFilter']
    profileImageUrl: Union[None, _str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    performanceData: 'DriverPerformanceListRelationFilter'
    drivingRecords: 'DrivingRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['DriverWhereInputRecursive3', List['DriverWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DriverWhereInputRecursive3']
    OR: List['DriverWhereInputRecursive3']
    NOT: List['DriverWhereInputRecursive3']


class DriverWhereInputRecursive3(TypedDict, total=False):
    """Driver arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    phone: Union[_str, 'types.StringFilter']
    licenseNumber: Union[_str, 'types.StringFilter']
    licenseType: Union[None, _str, 'types.StringFilter']
    licenseExpiry: Union[datetime.datetime, 'types.DateTimeFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    restrictions: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    assignedVehicles: 'types.StringListFilter'
    emergencyContact: Union[None, 'fields.Json', 'types.JsonFilter']
    address: Union[None, _str, 'types.StringFilter']
    birthDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hireDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    department: Union[None, _str, 'types.StringFilter']
    position: Union[None, _str, 'types.StringFilter']
    profileImageUrl: Union[None, _str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    performanceData: 'DriverPerformanceListRelationFilter'
    drivingRecords: 'DrivingRecordListRelationFilter'

    # should be noted that AND and NOT should be Union['DriverWhereInputRecursive4', List['DriverWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DriverWhereInputRecursive4']
    OR: List['DriverWhereInputRecursive4']
    NOT: List['DriverWhereInputRecursive4']


class DriverWhereInputRecursive4(TypedDict, total=False):
    """Driver arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    phone: Union[_str, 'types.StringFilter']
    licenseNumber: Union[_str, 'types.StringFilter']
    licenseType: Union[None, _str, 'types.StringFilter']
    licenseExpiry: Union[datetime.datetime, 'types.DateTimeFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    restrictions: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    assignedVehicles: 'types.StringListFilter'
    emergencyContact: Union[None, 'fields.Json', 'types.JsonFilter']
    address: Union[None, _str, 'types.StringFilter']
    birthDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hireDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    department: Union[None, _str, 'types.StringFilter']
    position: Union[None, _str, 'types.StringFilter']
    profileImageUrl: Union[None, _str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    performanceData: 'DriverPerformanceListRelationFilter'
    drivingRecords: 'DrivingRecordListRelationFilter'



# aggregate Driver types


    

class DriverScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Driver arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    licenseNumber: Union[_str, 'types.StringWithAggregatesFilter']
    licenseType: Union[_str, 'types.StringWithAggregatesFilter']
    licenseExpiry: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    restrictions: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    assignedVehicles: Union[_str, 'types.StringWithAggregatesFilter']
    emergencyContact: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hireDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    position: Union[_str, 'types.StringWithAggregatesFilter']
    profileImageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DriverScalarWhereWithAggregatesInputRecursive1']
    OR: List['DriverScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DriverScalarWhereWithAggregatesInputRecursive1']


class DriverScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Driver arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    licenseNumber: Union[_str, 'types.StringWithAggregatesFilter']
    licenseType: Union[_str, 'types.StringWithAggregatesFilter']
    licenseExpiry: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    restrictions: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    assignedVehicles: Union[_str, 'types.StringWithAggregatesFilter']
    emergencyContact: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hireDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    position: Union[_str, 'types.StringWithAggregatesFilter']
    profileImageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DriverScalarWhereWithAggregatesInputRecursive2']
    OR: List['DriverScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DriverScalarWhereWithAggregatesInputRecursive2']


class DriverScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Driver arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    licenseNumber: Union[_str, 'types.StringWithAggregatesFilter']
    licenseType: Union[_str, 'types.StringWithAggregatesFilter']
    licenseExpiry: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    restrictions: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    assignedVehicles: Union[_str, 'types.StringWithAggregatesFilter']
    emergencyContact: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hireDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    position: Union[_str, 'types.StringWithAggregatesFilter']
    profileImageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DriverScalarWhereWithAggregatesInputRecursive3']
    OR: List['DriverScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DriverScalarWhereWithAggregatesInputRecursive3']


class DriverScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Driver arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    licenseNumber: Union[_str, 'types.StringWithAggregatesFilter']
    licenseType: Union[_str, 'types.StringWithAggregatesFilter']
    licenseExpiry: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    restrictions: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    assignedVehicles: Union[_str, 'types.StringWithAggregatesFilter']
    emergencyContact: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hireDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    position: Union[_str, 'types.StringWithAggregatesFilter']
    profileImageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DriverScalarWhereWithAggregatesInputRecursive4']
    OR: List['DriverScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DriverScalarWhereWithAggregatesInputRecursive4']


class DriverScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Driver arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    licenseNumber: Union[_str, 'types.StringWithAggregatesFilter']
    licenseType: Union[_str, 'types.StringWithAggregatesFilter']
    licenseExpiry: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    restrictions: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    assignedVehicles: Union[_str, 'types.StringWithAggregatesFilter']
    emergencyContact: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    birthDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hireDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    department: Union[_str, 'types.StringWithAggregatesFilter']
    position: Union[_str, 'types.StringWithAggregatesFilter']
    profileImageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class DriverGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    email: _str
    phone: _str
    licenseNumber: _str
    licenseType: _str
    licenseExpiry: datetime.datetime
    isActive: _bool
    restrictions: List[_str]
    notes: _str
    assignedVehicles: List[_str]
    emergencyContact: 'fields.Json'
    address: _str
    birthDate: datetime.datetime
    hireDate: datetime.datetime
    department: _str
    position: _str
    profileImageUrl: _str
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'DriverSumAggregateOutput'
    _avg: 'DriverAvgAggregateOutput'
    _min: 'DriverMinAggregateOutput'
    _max: 'DriverMaxAggregateOutput'
    _count: 'DriverCountAggregateOutput'


class DriverAvgAggregateOutput(TypedDict, total=False):
    """Driver output for aggregating averages"""


class DriverSumAggregateOutput(TypedDict, total=False):
    """Driver output for aggregating sums"""


class DriverScalarAggregateOutput(TypedDict, total=False):
    """Driver output including scalar fields"""
    id: _str
    name: _str
    email: _str
    phone: _str
    licenseNumber: _str
    licenseType: _str
    licenseExpiry: datetime.datetime
    isActive: _bool
    restrictions: List[_str]
    notes: _str
    assignedVehicles: List[_str]
    emergencyContact: 'fields.Json'
    address: _str
    birthDate: datetime.datetime
    hireDate: datetime.datetime
    department: _str
    position: _str
    profileImageUrl: _str
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


DriverMinAggregateOutput = DriverScalarAggregateOutput
DriverMaxAggregateOutput = DriverScalarAggregateOutput


class DriverMaxAggregateInput(TypedDict, total=False):
    """Driver input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    phone: bool
    licenseNumber: bool
    licenseType: bool
    licenseExpiry: bool
    isActive: bool
    restrictions: bool
    notes: bool
    assignedVehicles: bool
    emergencyContact: bool
    address: bool
    birthDate: bool
    hireDate: bool
    department: bool
    position: bool
    profileImageUrl: bool
    organizationId: bool
    createdAt: bool
    updatedAt: bool


class DriverMinAggregateInput(TypedDict, total=False):
    """Driver input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    phone: bool
    licenseNumber: bool
    licenseType: bool
    licenseExpiry: bool
    isActive: bool
    restrictions: bool
    notes: bool
    assignedVehicles: bool
    emergencyContact: bool
    address: bool
    birthDate: bool
    hireDate: bool
    department: bool
    position: bool
    profileImageUrl: bool
    organizationId: bool
    createdAt: bool
    updatedAt: bool


class DriverNumberAggregateInput(TypedDict, total=False):
    """Driver input for aggregating numbers"""


DriverAvgAggregateInput = DriverNumberAggregateInput
DriverSumAggregateInput = DriverNumberAggregateInput


DriverCountAggregateInput = TypedDict(
    'DriverCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'phone': bool,
        'licenseNumber': bool,
        'licenseType': bool,
        'licenseExpiry': bool,
        'isActive': bool,
        'restrictions': bool,
        'notes': bool,
        'assignedVehicles': bool,
        'emergencyContact': bool,
        'address': bool,
        'birthDate': bool,
        'hireDate': bool,
        'department': bool,
        'position': bool,
        'profileImageUrl': bool,
        'organizationId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

DriverCountAggregateOutput = TypedDict(
    'DriverCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'phone': int,
        'licenseNumber': int,
        'licenseType': int,
        'licenseExpiry': int,
        'isActive': int,
        'restrictions': int,
        'notes': int,
        'assignedVehicles': int,
        'emergencyContact': int,
        'address': int,
        'birthDate': int,
        'hireDate': int,
        'department': int,
        'position': int,
        'profileImageUrl': int,
        'organizationId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


DriverKeys = Literal[
    'id',
    'name',
    'email',
    'phone',
    'licenseNumber',
    'licenseType',
    'licenseExpiry',
    'isActive',
    'restrictions',
    'notes',
    'assignedVehicles',
    'emergencyContact',
    'address',
    'birthDate',
    'hireDate',
    'department',
    'position',
    'profileImageUrl',
    'organizationId',
    'organization',
    'createdAt',
    'updatedAt',
    'performanceData',
    'drivingRecords',
]
DriverScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'phone',
    'licenseNumber',
    'licenseType',
    'licenseExpiry',
    'isActive',
    'restrictions',
    'notes',
    'assignedVehicles',
    'emergencyContact',
    'address',
    'birthDate',
    'hireDate',
    'department',
    'position',
    'profileImageUrl',
    'organizationId',
    'createdAt',
    'updatedAt',
]
DriverScalarFieldKeysT = TypeVar('DriverScalarFieldKeysT', bound=DriverScalarFieldKeys)

DriverRelationalFieldKeys = Literal[
        'organization',
        'performanceData',
        'drivingRecords',
    ]

# Vehicle types

class VehicleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Vehicle create method"""
    id: _str
    color: Optional[_str]
    mileage: _int
    fuelType: Optional[_str]
    transmission: Optional[_str]
    engine: Optional[_str]
    features: List[_str]
    notes: Optional[_str]
    status: _str
    organizationId: _str
    organization: 'OrganizationCreateNestedWithoutRelationsInput'
    maintenances: 'MaintenanceCreateManyNestedWithoutRelationsInput'
    drivingRecords: 'DrivingRecordCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class VehicleCreateInput(VehicleOptionalCreateInput):
    """Required arguments to the Vehicle create method"""
    make: _str
    model: _str
    year: _int
    vehicleType: _str
    licensePlate: _str
    vin: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VehicleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Vehicle create method, without relations"""
    id: _str
    color: Optional[_str]
    mileage: _int
    fuelType: Optional[_str]
    transmission: Optional[_str]
    engine: Optional[_str]
    features: List[_str]
    notes: Optional[_str]
    status: _str
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class VehicleCreateWithoutRelationsInput(VehicleOptionalCreateWithoutRelationsInput):
    """Required arguments to the Vehicle create method, without relations"""
    make: _str
    model: _str
    year: _int
    vehicleType: _str
    licensePlate: _str
    vin: _str

class VehicleConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'VehicleCreateWithoutRelationsInput'
    where: 'VehicleWhereUniqueInput'

class VehicleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VehicleCreateWithoutRelationsInput'
    connect: 'VehicleWhereUniqueInput'
    connect_or_create: 'VehicleConnectOrCreateWithoutRelationsInput'


class VehicleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VehicleCreateWithoutRelationsInput', List['VehicleCreateWithoutRelationsInput']]
    connect: Union['VehicleWhereUniqueInput', List['VehicleWhereUniqueInput']]
    connect_or_create: Union['VehicleConnectOrCreateWithoutRelationsInput', List['VehicleConnectOrCreateWithoutRelationsInput']]

_VehicleWhereUnique_id_Input = TypedDict(
    '_VehicleWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_VehicleWhereUnique_vin_Input = TypedDict(
    '_VehicleWhereUnique_vin_Input',
    {
        'vin': '_str',
    },
    total=True
)

VehicleWhereUniqueInput = Union[
    '_VehicleWhereUnique_id_Input',
    '_VehicleWhereUnique_vin_Input',
]


class VehicleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    make: _str
    model: _str
    year: Union[AtomicIntInput, _int]
    vehicleType: _str
    licensePlate: _str
    vin: _str
    color: Optional[_str]
    mileage: Union[AtomicIntInput, _int]
    fuelType: Optional[_str]
    transmission: Optional[_str]
    engine: Optional[_str]
    features: 'types.StringListUpdate'
    notes: Optional[_str]
    status: _str
    organization: 'OrganizationUpdateOneWithoutRelationsInput'
    maintenances: 'MaintenanceUpdateManyWithoutRelationsInput'
    drivingRecords: 'DrivingRecordUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class VehicleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    make: _str
    model: _str
    year: Union[AtomicIntInput, _int]
    vehicleType: _str
    licensePlate: _str
    vin: _str
    color: Optional[_str]
    mileage: Union[AtomicIntInput, _int]
    fuelType: Optional[_str]
    transmission: Optional[_str]
    engine: Optional[_str]
    features: 'types.StringListUpdate'
    notes: Optional[_str]
    status: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class VehicleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VehicleCreateWithoutRelationsInput']
    connect: List['VehicleWhereUniqueInput']
    connect_or_create: List['VehicleConnectOrCreateWithoutRelationsInput']
    set: List['VehicleWhereUniqueInput']
    disconnect: List['VehicleWhereUniqueInput']
    delete: List['VehicleWhereUniqueInput']

    # TODO
    # update: List['VehicleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VehicleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VehicleScalarWhereInput']
    # upsert: List['VehicleUpserteWithWhereUniqueWithoutRelationsInput']


class VehicleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VehicleCreateWithoutRelationsInput'
    connect: 'VehicleWhereUniqueInput'
    connect_or_create: 'VehicleConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VehicleUpdateInput'
    # upsert: 'VehicleUpsertWithoutRelationsInput'


class VehicleUpsertInput(TypedDict):
    create: 'VehicleCreateInput'
    update: 'VehicleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Vehicle_id_OrderByInput = TypedDict(
    '_Vehicle_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Vehicle_make_OrderByInput = TypedDict(
    '_Vehicle_make_OrderByInput',
    {
        'make': 'SortOrder',
    },
    total=True
)

_Vehicle_model_OrderByInput = TypedDict(
    '_Vehicle_model_OrderByInput',
    {
        'model': 'SortOrder',
    },
    total=True
)

_Vehicle_year_OrderByInput = TypedDict(
    '_Vehicle_year_OrderByInput',
    {
        'year': 'SortOrder',
    },
    total=True
)

_Vehicle_vehicleType_OrderByInput = TypedDict(
    '_Vehicle_vehicleType_OrderByInput',
    {
        'vehicleType': 'SortOrder',
    },
    total=True
)

_Vehicle_licensePlate_OrderByInput = TypedDict(
    '_Vehicle_licensePlate_OrderByInput',
    {
        'licensePlate': 'SortOrder',
    },
    total=True
)

_Vehicle_vin_OrderByInput = TypedDict(
    '_Vehicle_vin_OrderByInput',
    {
        'vin': 'SortOrder',
    },
    total=True
)

_Vehicle_color_OrderByInput = TypedDict(
    '_Vehicle_color_OrderByInput',
    {
        'color': 'SortOrder',
    },
    total=True
)

_Vehicle_mileage_OrderByInput = TypedDict(
    '_Vehicle_mileage_OrderByInput',
    {
        'mileage': 'SortOrder',
    },
    total=True
)

_Vehicle_fuelType_OrderByInput = TypedDict(
    '_Vehicle_fuelType_OrderByInput',
    {
        'fuelType': 'SortOrder',
    },
    total=True
)

_Vehicle_transmission_OrderByInput = TypedDict(
    '_Vehicle_transmission_OrderByInput',
    {
        'transmission': 'SortOrder',
    },
    total=True
)

_Vehicle_engine_OrderByInput = TypedDict(
    '_Vehicle_engine_OrderByInput',
    {
        'engine': 'SortOrder',
    },
    total=True
)

_Vehicle_features_OrderByInput = TypedDict(
    '_Vehicle_features_OrderByInput',
    {
        'features': 'SortOrder',
    },
    total=True
)

_Vehicle_notes_OrderByInput = TypedDict(
    '_Vehicle_notes_OrderByInput',
    {
        'notes': 'SortOrder',
    },
    total=True
)

_Vehicle_status_OrderByInput = TypedDict(
    '_Vehicle_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Vehicle_organizationId_OrderByInput = TypedDict(
    '_Vehicle_organizationId_OrderByInput',
    {
        'organizationId': 'SortOrder',
    },
    total=True
)

_Vehicle_createdAt_OrderByInput = TypedDict(
    '_Vehicle_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Vehicle_updatedAt_OrderByInput = TypedDict(
    '_Vehicle_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Vehicle_RelevanceInner = TypedDict(
    '_Vehicle_RelevanceInner',
    {
        'fields': 'List[VehicleScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Vehicle_RelevanceOrderByInput = TypedDict(
    '_Vehicle_RelevanceOrderByInput',
    {
        '_relevance': '_Vehicle_RelevanceInner',
    },
    total=True
)

VehicleOrderByInput = Union[
    '_Vehicle_id_OrderByInput',
    '_Vehicle_make_OrderByInput',
    '_Vehicle_model_OrderByInput',
    '_Vehicle_year_OrderByInput',
    '_Vehicle_vehicleType_OrderByInput',
    '_Vehicle_licensePlate_OrderByInput',
    '_Vehicle_vin_OrderByInput',
    '_Vehicle_color_OrderByInput',
    '_Vehicle_mileage_OrderByInput',
    '_Vehicle_fuelType_OrderByInput',
    '_Vehicle_transmission_OrderByInput',
    '_Vehicle_engine_OrderByInput',
    '_Vehicle_features_OrderByInput',
    '_Vehicle_notes_OrderByInput',
    '_Vehicle_status_OrderByInput',
    '_Vehicle_organizationId_OrderByInput',
    '_Vehicle_createdAt_OrderByInput',
    '_Vehicle_updatedAt_OrderByInput',
    '_Vehicle_RelevanceOrderByInput',
]



# recursive Vehicle types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VehicleRelationFilter = TypedDict(
    'VehicleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VehicleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VehicleInclude(TypedDict, total=False):
    """Vehicle relational arguments"""
    organization: Union[bool, 'OrganizationArgsFromVehicle']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromVehicle']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromVehicle']


    

class UserIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromVehicleRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromVehicleRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromVehicleRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromVehicleRecursive1']


class UserIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromVehicleRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromVehicleRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromVehicleRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromVehicleRecursive2']


class UserIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromVehicleRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromVehicleRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromVehicleRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromVehicleRecursive3']


class UserIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromVehicleRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromVehicleRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromVehicleRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromVehicleRecursive4']


class UserIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class UserArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyUserArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromVehicleRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromVehicleRecursive1']


class PermissionIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromVehicleRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromVehicleRecursive2']


class PermissionIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromVehicleRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromVehicleRecursive3']


class PermissionIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromVehicleRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromVehicleRecursive4']


class PermissionIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class PermissionArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyPermissionArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    user: Union[bool, 'UserArgsFromVehicleRecursive1']
    permission: Union[bool, 'PermissionArgsFromVehicleRecursive1']


class UserPermissionIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    user: Union[bool, 'UserArgsFromVehicleRecursive2']
    permission: Union[bool, 'PermissionArgsFromVehicleRecursive2']


class UserPermissionIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    user: Union[bool, 'UserArgsFromVehicleRecursive3']
    permission: Union[bool, 'PermissionArgsFromVehicleRecursive3']


class UserPermissionIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    user: Union[bool, 'UserArgsFromVehicleRecursive4']
    permission: Union[bool, 'PermissionArgsFromVehicleRecursive4']


class UserPermissionIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class UserPermissionArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyUserPermissionArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    permission: Union[bool, 'PermissionArgsFromVehicleRecursive1']


class RolePermissionIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    permission: Union[bool, 'PermissionArgsFromVehicleRecursive2']


class RolePermissionIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    permission: Union[bool, 'PermissionArgsFromVehicleRecursive3']


class RolePermissionIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    permission: Union[bool, 'PermissionArgsFromVehicleRecursive4']


class RolePermissionIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class RolePermissionArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyRolePermissionArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromVehicleRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromVehicleRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromVehicleRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromVehicleRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromVehicleRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromVehicleRecursive1']


class OrganizationIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromVehicleRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromVehicleRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromVehicleRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromVehicleRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromVehicleRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromVehicleRecursive2']


class OrganizationIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromVehicleRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromVehicleRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromVehicleRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromVehicleRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromVehicleRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromVehicleRecursive3']


class OrganizationIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromVehicleRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromVehicleRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromVehicleRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromVehicleRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromVehicleRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromVehicleRecursive4']


class OrganizationIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class OrganizationArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyOrganizationArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    user: Union[bool, 'UserArgsFromVehicleRecursive1']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive1']


class OrganizationMemberIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    user: Union[bool, 'UserArgsFromVehicleRecursive2']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive2']


class OrganizationMemberIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    user: Union[bool, 'UserArgsFromVehicleRecursive3']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive3']


class OrganizationMemberIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    user: Union[bool, 'UserArgsFromVehicleRecursive4']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive4']


class OrganizationMemberIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class OrganizationMemberArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyOrganizationMemberArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromVehicleRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromVehicleRecursive1']


class DriverIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromVehicleRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromVehicleRecursive2']


class DriverIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromVehicleRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromVehicleRecursive3']


class DriverIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromVehicleRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromVehicleRecursive4']


class DriverIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class DriverArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyDriverArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromVehicleRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromVehicleRecursive1']


class VehicleIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromVehicleRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromVehicleRecursive2']


class VehicleIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromVehicleRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromVehicleRecursive3']


class VehicleIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromVehicleRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromVehicleRecursive4']


class VehicleIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class VehicleArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyVehicleArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    vehicle: Union[bool, 'VehicleArgsFromVehicleRecursive1']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromVehicleRecursive1']


class MaintenanceIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    vehicle: Union[bool, 'VehicleArgsFromVehicleRecursive2']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromVehicleRecursive2']


class MaintenanceIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    vehicle: Union[bool, 'VehicleArgsFromVehicleRecursive3']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromVehicleRecursive3']


class MaintenanceIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    vehicle: Union[bool, 'VehicleArgsFromVehicleRecursive4']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromVehicleRecursive4']


class MaintenanceIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class MaintenanceArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyMaintenanceArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    maintenance: Union[bool, 'MaintenanceArgsFromVehicleRecursive1']


class MaintenancePartIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    maintenance: Union[bool, 'MaintenanceArgsFromVehicleRecursive2']


class MaintenancePartIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    maintenance: Union[bool, 'MaintenanceArgsFromVehicleRecursive3']


class MaintenancePartIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    maintenance: Union[bool, 'MaintenanceArgsFromVehicleRecursive4']


class MaintenancePartIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class MaintenancePartArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyMaintenancePartArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    driver: Union[bool, 'DriverArgsFromVehicleRecursive1']


class DriverPerformanceIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    driver: Union[bool, 'DriverArgsFromVehicleRecursive2']


class DriverPerformanceIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    driver: Union[bool, 'DriverArgsFromVehicleRecursive3']


class DriverPerformanceIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    driver: Union[bool, 'DriverArgsFromVehicleRecursive4']


class DriverPerformanceIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class DriverPerformanceArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyDriverPerformanceArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    driver: Union[bool, 'DriverArgsFromVehicleRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromVehicleRecursive1']


class DrivingRecordIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    driver: Union[bool, 'DriverArgsFromVehicleRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromVehicleRecursive2']


class DrivingRecordIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    driver: Union[bool, 'DriverArgsFromVehicleRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromVehicleRecursive3']


class DrivingRecordIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    driver: Union[bool, 'DriverArgsFromVehicleRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromVehicleRecursive4']


class DrivingRecordIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class DrivingRecordArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyDrivingRecordArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromVehicleRecursive1']


class ERPSyncConfigIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromVehicleRecursive2']


class ERPSyncConfigIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromVehicleRecursive3']


class ERPSyncConfigIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromVehicleRecursive4']


class ERPSyncConfigIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class ERPSyncConfigArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyERPSyncConfigArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    config: Union[bool, 'ERPSyncConfigArgsFromVehicleRecursive1']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive1']


class ERPSyncLogIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    config: Union[bool, 'ERPSyncConfigArgsFromVehicleRecursive2']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive2']


class ERPSyncLogIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    config: Union[bool, 'ERPSyncConfigArgsFromVehicleRecursive3']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive3']


class ERPSyncLogIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    config: Union[bool, 'ERPSyncConfigArgsFromVehicleRecursive4']
    organization: Union[bool, 'OrganizationArgsFromVehicleRecursive4']


class ERPSyncLogIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class ERPSyncLogArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyERPSyncLogArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    technician: Union[bool, 'UserArgsFromVehicleRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromVehicleRecursive1']


class RepairIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    technician: Union[bool, 'UserArgsFromVehicleRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromVehicleRecursive2']


class RepairIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    technician: Union[bool, 'UserArgsFromVehicleRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromVehicleRecursive3']


class RepairIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    technician: Union[bool, 'UserArgsFromVehicleRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromVehicleRecursive4']


class RepairIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class RepairArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyRepairArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromVehicle(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    repair: Union[bool, 'RepairArgsFromVehicleRecursive1']
    technician: Union[bool, 'UserArgsFromVehicleRecursive1']


class StatusHistoryIncludeFromVehicleRecursive1(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    repair: Union[bool, 'RepairArgsFromVehicleRecursive2']
    technician: Union[bool, 'UserArgsFromVehicleRecursive2']


class StatusHistoryIncludeFromVehicleRecursive2(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    repair: Union[bool, 'RepairArgsFromVehicleRecursive3']
    technician: Union[bool, 'UserArgsFromVehicleRecursive3']


class StatusHistoryIncludeFromVehicleRecursive3(TypedDict, total=False):
    """Relational arguments for Vehicle"""
    repair: Union[bool, 'RepairArgsFromVehicleRecursive4']
    technician: Union[bool, 'UserArgsFromVehicleRecursive4']


class StatusHistoryIncludeFromVehicleRecursive4(TypedDict, total=False):
    """Relational arguments for Vehicle"""

    

class StatusHistoryArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    
    

class FindManyStatusHistoryArgsFromVehicle(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromVehicleRecursive1(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromVehicleRecursive2(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromVehicleRecursive3(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromVehicleRecursive4(TypedDict, total=False):
    """Arguments for Vehicle"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyVehicleArgs = FindManyVehicleArgsFromVehicle
FindFirstVehicleArgs = FindManyVehicleArgsFromVehicle


    

class VehicleWhereInput(TypedDict, total=False):
    """Vehicle arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    make: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    year: Union[_int, 'types.IntFilter']
    vehicleType: Union[_str, 'types.StringFilter']
    licensePlate: Union[_str, 'types.StringFilter']
    vin: Union[_str, 'types.StringFilter']
    color: Union[None, _str, 'types.StringFilter']
    mileage: Union[_int, 'types.IntFilter']
    fuelType: Union[None, _str, 'types.StringFilter']
    transmission: Union[None, _str, 'types.StringFilter']
    engine: Union[None, _str, 'types.StringFilter']
    features: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    maintenances: 'MaintenanceListRelationFilter'
    drivingRecords: 'DrivingRecordListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VehicleWhereInputRecursive1', List['VehicleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VehicleWhereInputRecursive1']
    OR: List['VehicleWhereInputRecursive1']
    NOT: List['VehicleWhereInputRecursive1']


class VehicleWhereInputRecursive1(TypedDict, total=False):
    """Vehicle arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    make: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    year: Union[_int, 'types.IntFilter']
    vehicleType: Union[_str, 'types.StringFilter']
    licensePlate: Union[_str, 'types.StringFilter']
    vin: Union[_str, 'types.StringFilter']
    color: Union[None, _str, 'types.StringFilter']
    mileage: Union[_int, 'types.IntFilter']
    fuelType: Union[None, _str, 'types.StringFilter']
    transmission: Union[None, _str, 'types.StringFilter']
    engine: Union[None, _str, 'types.StringFilter']
    features: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    maintenances: 'MaintenanceListRelationFilter'
    drivingRecords: 'DrivingRecordListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VehicleWhereInputRecursive2', List['VehicleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VehicleWhereInputRecursive2']
    OR: List['VehicleWhereInputRecursive2']
    NOT: List['VehicleWhereInputRecursive2']


class VehicleWhereInputRecursive2(TypedDict, total=False):
    """Vehicle arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    make: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    year: Union[_int, 'types.IntFilter']
    vehicleType: Union[_str, 'types.StringFilter']
    licensePlate: Union[_str, 'types.StringFilter']
    vin: Union[_str, 'types.StringFilter']
    color: Union[None, _str, 'types.StringFilter']
    mileage: Union[_int, 'types.IntFilter']
    fuelType: Union[None, _str, 'types.StringFilter']
    transmission: Union[None, _str, 'types.StringFilter']
    engine: Union[None, _str, 'types.StringFilter']
    features: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    maintenances: 'MaintenanceListRelationFilter'
    drivingRecords: 'DrivingRecordListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VehicleWhereInputRecursive3', List['VehicleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VehicleWhereInputRecursive3']
    OR: List['VehicleWhereInputRecursive3']
    NOT: List['VehicleWhereInputRecursive3']


class VehicleWhereInputRecursive3(TypedDict, total=False):
    """Vehicle arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    make: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    year: Union[_int, 'types.IntFilter']
    vehicleType: Union[_str, 'types.StringFilter']
    licensePlate: Union[_str, 'types.StringFilter']
    vin: Union[_str, 'types.StringFilter']
    color: Union[None, _str, 'types.StringFilter']
    mileage: Union[_int, 'types.IntFilter']
    fuelType: Union[None, _str, 'types.StringFilter']
    transmission: Union[None, _str, 'types.StringFilter']
    engine: Union[None, _str, 'types.StringFilter']
    features: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    maintenances: 'MaintenanceListRelationFilter'
    drivingRecords: 'DrivingRecordListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VehicleWhereInputRecursive4', List['VehicleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VehicleWhereInputRecursive4']
    OR: List['VehicleWhereInputRecursive4']
    NOT: List['VehicleWhereInputRecursive4']


class VehicleWhereInputRecursive4(TypedDict, total=False):
    """Vehicle arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    make: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    year: Union[_int, 'types.IntFilter']
    vehicleType: Union[_str, 'types.StringFilter']
    licensePlate: Union[_str, 'types.StringFilter']
    vin: Union[_str, 'types.StringFilter']
    color: Union[None, _str, 'types.StringFilter']
    mileage: Union[_int, 'types.IntFilter']
    fuelType: Union[None, _str, 'types.StringFilter']
    transmission: Union[None, _str, 'types.StringFilter']
    engine: Union[None, _str, 'types.StringFilter']
    features: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    maintenances: 'MaintenanceListRelationFilter'
    drivingRecords: 'DrivingRecordListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Vehicle types


    

class VehicleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Vehicle arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    make: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_int, 'types.IntWithAggregatesFilter']
    vehicleType: Union[_str, 'types.StringWithAggregatesFilter']
    licensePlate: Union[_str, 'types.StringWithAggregatesFilter']
    vin: Union[_str, 'types.StringWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    mileage: Union[_int, 'types.IntWithAggregatesFilter']
    fuelType: Union[_str, 'types.StringWithAggregatesFilter']
    transmission: Union[_str, 'types.StringWithAggregatesFilter']
    engine: Union[_str, 'types.StringWithAggregatesFilter']
    features: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VehicleScalarWhereWithAggregatesInputRecursive1']
    OR: List['VehicleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VehicleScalarWhereWithAggregatesInputRecursive1']


class VehicleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Vehicle arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    make: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_int, 'types.IntWithAggregatesFilter']
    vehicleType: Union[_str, 'types.StringWithAggregatesFilter']
    licensePlate: Union[_str, 'types.StringWithAggregatesFilter']
    vin: Union[_str, 'types.StringWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    mileage: Union[_int, 'types.IntWithAggregatesFilter']
    fuelType: Union[_str, 'types.StringWithAggregatesFilter']
    transmission: Union[_str, 'types.StringWithAggregatesFilter']
    engine: Union[_str, 'types.StringWithAggregatesFilter']
    features: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VehicleScalarWhereWithAggregatesInputRecursive2']
    OR: List['VehicleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VehicleScalarWhereWithAggregatesInputRecursive2']


class VehicleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Vehicle arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    make: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_int, 'types.IntWithAggregatesFilter']
    vehicleType: Union[_str, 'types.StringWithAggregatesFilter']
    licensePlate: Union[_str, 'types.StringWithAggregatesFilter']
    vin: Union[_str, 'types.StringWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    mileage: Union[_int, 'types.IntWithAggregatesFilter']
    fuelType: Union[_str, 'types.StringWithAggregatesFilter']
    transmission: Union[_str, 'types.StringWithAggregatesFilter']
    engine: Union[_str, 'types.StringWithAggregatesFilter']
    features: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VehicleScalarWhereWithAggregatesInputRecursive3']
    OR: List['VehicleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VehicleScalarWhereWithAggregatesInputRecursive3']


class VehicleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Vehicle arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    make: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_int, 'types.IntWithAggregatesFilter']
    vehicleType: Union[_str, 'types.StringWithAggregatesFilter']
    licensePlate: Union[_str, 'types.StringWithAggregatesFilter']
    vin: Union[_str, 'types.StringWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    mileage: Union[_int, 'types.IntWithAggregatesFilter']
    fuelType: Union[_str, 'types.StringWithAggregatesFilter']
    transmission: Union[_str, 'types.StringWithAggregatesFilter']
    engine: Union[_str, 'types.StringWithAggregatesFilter']
    features: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VehicleScalarWhereWithAggregatesInputRecursive4']
    OR: List['VehicleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VehicleScalarWhereWithAggregatesInputRecursive4']


class VehicleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Vehicle arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    make: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_int, 'types.IntWithAggregatesFilter']
    vehicleType: Union[_str, 'types.StringWithAggregatesFilter']
    licensePlate: Union[_str, 'types.StringWithAggregatesFilter']
    vin: Union[_str, 'types.StringWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    mileage: Union[_int, 'types.IntWithAggregatesFilter']
    fuelType: Union[_str, 'types.StringWithAggregatesFilter']
    transmission: Union[_str, 'types.StringWithAggregatesFilter']
    engine: Union[_str, 'types.StringWithAggregatesFilter']
    features: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VehicleGroupByOutput(TypedDict, total=False):
    id: _str
    make: _str
    model: _str
    year: _int
    vehicleType: _str
    licensePlate: _str
    vin: _str
    color: _str
    mileage: _int
    fuelType: _str
    transmission: _str
    engine: _str
    features: List[_str]
    notes: _str
    status: _str
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'VehicleSumAggregateOutput'
    _avg: 'VehicleAvgAggregateOutput'
    _min: 'VehicleMinAggregateOutput'
    _max: 'VehicleMaxAggregateOutput'
    _count: 'VehicleCountAggregateOutput'


class VehicleAvgAggregateOutput(TypedDict, total=False):
    """Vehicle output for aggregating averages"""
    year: float
    mileage: float


class VehicleSumAggregateOutput(TypedDict, total=False):
    """Vehicle output for aggregating sums"""
    year: _int
    mileage: _int


class VehicleScalarAggregateOutput(TypedDict, total=False):
    """Vehicle output including scalar fields"""
    id: _str
    make: _str
    model: _str
    year: _int
    vehicleType: _str
    licensePlate: _str
    vin: _str
    color: _str
    mileage: _int
    fuelType: _str
    transmission: _str
    engine: _str
    features: List[_str]
    notes: _str
    status: _str
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


VehicleMinAggregateOutput = VehicleScalarAggregateOutput
VehicleMaxAggregateOutput = VehicleScalarAggregateOutput


class VehicleMaxAggregateInput(TypedDict, total=False):
    """Vehicle input for aggregating by max"""
    id: bool
    make: bool
    model: bool
    year: bool
    vehicleType: bool
    licensePlate: bool
    vin: bool
    color: bool
    mileage: bool
    fuelType: bool
    transmission: bool
    engine: bool
    features: bool
    notes: bool
    status: bool
    organizationId: bool
    createdAt: bool
    updatedAt: bool


class VehicleMinAggregateInput(TypedDict, total=False):
    """Vehicle input for aggregating by min"""
    id: bool
    make: bool
    model: bool
    year: bool
    vehicleType: bool
    licensePlate: bool
    vin: bool
    color: bool
    mileage: bool
    fuelType: bool
    transmission: bool
    engine: bool
    features: bool
    notes: bool
    status: bool
    organizationId: bool
    createdAt: bool
    updatedAt: bool


class VehicleNumberAggregateInput(TypedDict, total=False):
    """Vehicle input for aggregating numbers"""
    year: bool
    mileage: bool


VehicleAvgAggregateInput = VehicleNumberAggregateInput
VehicleSumAggregateInput = VehicleNumberAggregateInput


VehicleCountAggregateInput = TypedDict(
    'VehicleCountAggregateInput',
    {
        'id': bool,
        'make': bool,
        'model': bool,
        'year': bool,
        'vehicleType': bool,
        'licensePlate': bool,
        'vin': bool,
        'color': bool,
        'mileage': bool,
        'fuelType': bool,
        'transmission': bool,
        'engine': bool,
        'features': bool,
        'notes': bool,
        'status': bool,
        'organizationId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

VehicleCountAggregateOutput = TypedDict(
    'VehicleCountAggregateOutput',
    {
        'id': int,
        'make': int,
        'model': int,
        'year': int,
        'vehicleType': int,
        'licensePlate': int,
        'vin': int,
        'color': int,
        'mileage': int,
        'fuelType': int,
        'transmission': int,
        'engine': int,
        'features': int,
        'notes': int,
        'status': int,
        'organizationId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


VehicleKeys = Literal[
    'id',
    'make',
    'model',
    'year',
    'vehicleType',
    'licensePlate',
    'vin',
    'color',
    'mileage',
    'fuelType',
    'transmission',
    'engine',
    'features',
    'notes',
    'status',
    'organizationId',
    'organization',
    'maintenances',
    'drivingRecords',
    'createdAt',
    'updatedAt',
]
VehicleScalarFieldKeys = Literal[
    'id',
    'make',
    'model',
    'year',
    'vehicleType',
    'licensePlate',
    'vin',
    'color',
    'mileage',
    'fuelType',
    'transmission',
    'engine',
    'features',
    'notes',
    'status',
    'organizationId',
    'createdAt',
    'updatedAt',
]
VehicleScalarFieldKeysT = TypeVar('VehicleScalarFieldKeysT', bound=VehicleScalarFieldKeys)

VehicleRelationalFieldKeys = Literal[
        'organization',
        'maintenances',
        'drivingRecords',
    ]

# Maintenance types

class MaintenanceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Maintenance create method"""
    id: _str
    description: Optional[_str]
    status: 'enums.MaintenanceStatus'
    endDate: Optional[datetime.datetime]
    mileageAtService: Optional[_int]
    cost: Optional[_float]
    provider: Optional[_str]
    providerContact: Optional[_str]
    documents: List[_str]
    notes: Optional[_str]
    vehicleId: _str
    vehicle: 'VehicleCreateNestedWithoutRelationsInput'
    organizationId: _str
    organization: 'OrganizationCreateNestedWithoutRelationsInput'
    parts: 'MaintenancePartCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MaintenanceCreateInput(MaintenanceOptionalCreateInput):
    """Required arguments to the Maintenance create method"""
    title: _str
    maintenanceType: 'enums.MaintenanceType'
    startDate: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MaintenanceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Maintenance create method, without relations"""
    id: _str
    description: Optional[_str]
    status: 'enums.MaintenanceStatus'
    endDate: Optional[datetime.datetime]
    mileageAtService: Optional[_int]
    cost: Optional[_float]
    provider: Optional[_str]
    providerContact: Optional[_str]
    documents: List[_str]
    notes: Optional[_str]
    vehicleId: _str
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MaintenanceCreateWithoutRelationsInput(MaintenanceOptionalCreateWithoutRelationsInput):
    """Required arguments to the Maintenance create method, without relations"""
    title: _str
    maintenanceType: 'enums.MaintenanceType'
    startDate: datetime.datetime

class MaintenanceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MaintenanceCreateWithoutRelationsInput'
    where: 'MaintenanceWhereUniqueInput'

class MaintenanceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MaintenanceCreateWithoutRelationsInput'
    connect: 'MaintenanceWhereUniqueInput'
    connect_or_create: 'MaintenanceConnectOrCreateWithoutRelationsInput'


class MaintenanceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MaintenanceCreateWithoutRelationsInput', List['MaintenanceCreateWithoutRelationsInput']]
    connect: Union['MaintenanceWhereUniqueInput', List['MaintenanceWhereUniqueInput']]
    connect_or_create: Union['MaintenanceConnectOrCreateWithoutRelationsInput', List['MaintenanceConnectOrCreateWithoutRelationsInput']]

_MaintenanceWhereUnique_id_Input = TypedDict(
    '_MaintenanceWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MaintenanceWhereUniqueInput = _MaintenanceWhereUnique_id_Input


class MaintenanceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    description: Optional[_str]
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: datetime.datetime
    endDate: Optional[datetime.datetime]
    mileageAtService: Optional[Union[AtomicIntInput, _int]]
    cost: Optional[Union[AtomicFloatInput, _float]]
    provider: Optional[_str]
    providerContact: Optional[_str]
    documents: 'types.StringListUpdate'
    notes: Optional[_str]
    vehicle: 'VehicleUpdateOneWithoutRelationsInput'
    organization: 'OrganizationUpdateOneWithoutRelationsInput'
    parts: 'MaintenancePartUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MaintenanceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    description: Optional[_str]
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: datetime.datetime
    endDate: Optional[datetime.datetime]
    mileageAtService: Optional[Union[AtomicIntInput, _int]]
    cost: Optional[Union[AtomicFloatInput, _float]]
    provider: Optional[_str]
    providerContact: Optional[_str]
    documents: 'types.StringListUpdate'
    notes: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MaintenanceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MaintenanceCreateWithoutRelationsInput']
    connect: List['MaintenanceWhereUniqueInput']
    connect_or_create: List['MaintenanceConnectOrCreateWithoutRelationsInput']
    set: List['MaintenanceWhereUniqueInput']
    disconnect: List['MaintenanceWhereUniqueInput']
    delete: List['MaintenanceWhereUniqueInput']

    # TODO
    # update: List['MaintenanceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MaintenanceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MaintenanceScalarWhereInput']
    # upsert: List['MaintenanceUpserteWithWhereUniqueWithoutRelationsInput']


class MaintenanceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MaintenanceCreateWithoutRelationsInput'
    connect: 'MaintenanceWhereUniqueInput'
    connect_or_create: 'MaintenanceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MaintenanceUpdateInput'
    # upsert: 'MaintenanceUpsertWithoutRelationsInput'


class MaintenanceUpsertInput(TypedDict):
    create: 'MaintenanceCreateInput'
    update: 'MaintenanceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Maintenance_id_OrderByInput = TypedDict(
    '_Maintenance_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Maintenance_title_OrderByInput = TypedDict(
    '_Maintenance_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Maintenance_description_OrderByInput = TypedDict(
    '_Maintenance_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Maintenance_maintenanceType_OrderByInput = TypedDict(
    '_Maintenance_maintenanceType_OrderByInput',
    {
        'maintenanceType': 'SortOrder',
    },
    total=True
)

_Maintenance_status_OrderByInput = TypedDict(
    '_Maintenance_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Maintenance_startDate_OrderByInput = TypedDict(
    '_Maintenance_startDate_OrderByInput',
    {
        'startDate': 'SortOrder',
    },
    total=True
)

_Maintenance_endDate_OrderByInput = TypedDict(
    '_Maintenance_endDate_OrderByInput',
    {
        'endDate': 'SortOrder',
    },
    total=True
)

_Maintenance_mileageAtService_OrderByInput = TypedDict(
    '_Maintenance_mileageAtService_OrderByInput',
    {
        'mileageAtService': 'SortOrder',
    },
    total=True
)

_Maintenance_cost_OrderByInput = TypedDict(
    '_Maintenance_cost_OrderByInput',
    {
        'cost': 'SortOrder',
    },
    total=True
)

_Maintenance_provider_OrderByInput = TypedDict(
    '_Maintenance_provider_OrderByInput',
    {
        'provider': 'SortOrder',
    },
    total=True
)

_Maintenance_providerContact_OrderByInput = TypedDict(
    '_Maintenance_providerContact_OrderByInput',
    {
        'providerContact': 'SortOrder',
    },
    total=True
)

_Maintenance_documents_OrderByInput = TypedDict(
    '_Maintenance_documents_OrderByInput',
    {
        'documents': 'SortOrder',
    },
    total=True
)

_Maintenance_notes_OrderByInput = TypedDict(
    '_Maintenance_notes_OrderByInput',
    {
        'notes': 'SortOrder',
    },
    total=True
)

_Maintenance_vehicleId_OrderByInput = TypedDict(
    '_Maintenance_vehicleId_OrderByInput',
    {
        'vehicleId': 'SortOrder',
    },
    total=True
)

_Maintenance_organizationId_OrderByInput = TypedDict(
    '_Maintenance_organizationId_OrderByInput',
    {
        'organizationId': 'SortOrder',
    },
    total=True
)

_Maintenance_createdAt_OrderByInput = TypedDict(
    '_Maintenance_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Maintenance_updatedAt_OrderByInput = TypedDict(
    '_Maintenance_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Maintenance_RelevanceInner = TypedDict(
    '_Maintenance_RelevanceInner',
    {
        'fields': 'List[MaintenanceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Maintenance_RelevanceOrderByInput = TypedDict(
    '_Maintenance_RelevanceOrderByInput',
    {
        '_relevance': '_Maintenance_RelevanceInner',
    },
    total=True
)

MaintenanceOrderByInput = Union[
    '_Maintenance_id_OrderByInput',
    '_Maintenance_title_OrderByInput',
    '_Maintenance_description_OrderByInput',
    '_Maintenance_maintenanceType_OrderByInput',
    '_Maintenance_status_OrderByInput',
    '_Maintenance_startDate_OrderByInput',
    '_Maintenance_endDate_OrderByInput',
    '_Maintenance_mileageAtService_OrderByInput',
    '_Maintenance_cost_OrderByInput',
    '_Maintenance_provider_OrderByInput',
    '_Maintenance_providerContact_OrderByInput',
    '_Maintenance_documents_OrderByInput',
    '_Maintenance_notes_OrderByInput',
    '_Maintenance_vehicleId_OrderByInput',
    '_Maintenance_organizationId_OrderByInput',
    '_Maintenance_createdAt_OrderByInput',
    '_Maintenance_updatedAt_OrderByInput',
    '_Maintenance_RelevanceOrderByInput',
]



# recursive Maintenance types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MaintenanceRelationFilter = TypedDict(
    'MaintenanceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MaintenanceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MaintenanceInclude(TypedDict, total=False):
    """Maintenance relational arguments"""
    vehicle: Union[bool, 'VehicleArgsFromMaintenance']
    organization: Union[bool, 'OrganizationArgsFromMaintenance']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromMaintenance']


    

class UserIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenanceRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenanceRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromMaintenanceRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromMaintenanceRecursive1']


class UserIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenanceRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenanceRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromMaintenanceRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromMaintenanceRecursive2']


class UserIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenanceRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenanceRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromMaintenanceRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromMaintenanceRecursive3']


class UserIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenanceRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenanceRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromMaintenanceRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromMaintenanceRecursive4']


class UserIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class UserArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyUserArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenanceRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromMaintenanceRecursive1']


class PermissionIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenanceRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromMaintenanceRecursive2']


class PermissionIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenanceRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromMaintenanceRecursive3']


class PermissionIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenanceRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromMaintenanceRecursive4']


class PermissionIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class PermissionArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyPermissionArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    user: Union[bool, 'UserArgsFromMaintenanceRecursive1']
    permission: Union[bool, 'PermissionArgsFromMaintenanceRecursive1']


class UserPermissionIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    user: Union[bool, 'UserArgsFromMaintenanceRecursive2']
    permission: Union[bool, 'PermissionArgsFromMaintenanceRecursive2']


class UserPermissionIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    user: Union[bool, 'UserArgsFromMaintenanceRecursive3']
    permission: Union[bool, 'PermissionArgsFromMaintenanceRecursive3']


class UserPermissionIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    user: Union[bool, 'UserArgsFromMaintenanceRecursive4']
    permission: Union[bool, 'PermissionArgsFromMaintenanceRecursive4']


class UserPermissionIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class UserPermissionArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyUserPermissionArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    permission: Union[bool, 'PermissionArgsFromMaintenanceRecursive1']


class RolePermissionIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    permission: Union[bool, 'PermissionArgsFromMaintenanceRecursive2']


class RolePermissionIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    permission: Union[bool, 'PermissionArgsFromMaintenanceRecursive3']


class RolePermissionIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    permission: Union[bool, 'PermissionArgsFromMaintenanceRecursive4']


class RolePermissionIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class RolePermissionArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyRolePermissionArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenanceRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromMaintenanceRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromMaintenanceRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenanceRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromMaintenanceRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenanceRecursive1']


class OrganizationIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenanceRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromMaintenanceRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromMaintenanceRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenanceRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromMaintenanceRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenanceRecursive2']


class OrganizationIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenanceRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromMaintenanceRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromMaintenanceRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenanceRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromMaintenanceRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenanceRecursive3']


class OrganizationIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenanceRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromMaintenanceRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromMaintenanceRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenanceRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromMaintenanceRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenanceRecursive4']


class OrganizationIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class OrganizationArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyOrganizationArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    user: Union[bool, 'UserArgsFromMaintenanceRecursive1']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive1']


class OrganizationMemberIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    user: Union[bool, 'UserArgsFromMaintenanceRecursive2']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive2']


class OrganizationMemberIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    user: Union[bool, 'UserArgsFromMaintenanceRecursive3']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive3']


class OrganizationMemberIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    user: Union[bool, 'UserArgsFromMaintenanceRecursive4']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive4']


class OrganizationMemberIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class OrganizationMemberArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyOrganizationMemberArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromMaintenanceRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenanceRecursive1']


class DriverIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromMaintenanceRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenanceRecursive2']


class DriverIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromMaintenanceRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenanceRecursive3']


class DriverIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromMaintenanceRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenanceRecursive4']


class DriverIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class DriverArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyDriverArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenanceRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenanceRecursive1']


class VehicleIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenanceRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenanceRecursive2']


class VehicleIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenanceRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenanceRecursive3']


class VehicleIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenanceRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenanceRecursive4']


class VehicleIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class VehicleArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyVehicleArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    vehicle: Union[bool, 'VehicleArgsFromMaintenanceRecursive1']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromMaintenanceRecursive1']


class MaintenanceIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    vehicle: Union[bool, 'VehicleArgsFromMaintenanceRecursive2']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromMaintenanceRecursive2']


class MaintenanceIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    vehicle: Union[bool, 'VehicleArgsFromMaintenanceRecursive3']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromMaintenanceRecursive3']


class MaintenanceIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    vehicle: Union[bool, 'VehicleArgsFromMaintenanceRecursive4']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromMaintenanceRecursive4']


class MaintenanceIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class MaintenanceArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyMaintenanceArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    maintenance: Union[bool, 'MaintenanceArgsFromMaintenanceRecursive1']


class MaintenancePartIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    maintenance: Union[bool, 'MaintenanceArgsFromMaintenanceRecursive2']


class MaintenancePartIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    maintenance: Union[bool, 'MaintenanceArgsFromMaintenanceRecursive3']


class MaintenancePartIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    maintenance: Union[bool, 'MaintenanceArgsFromMaintenanceRecursive4']


class MaintenancePartIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class MaintenancePartArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyMaintenancePartArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    driver: Union[bool, 'DriverArgsFromMaintenanceRecursive1']


class DriverPerformanceIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    driver: Union[bool, 'DriverArgsFromMaintenanceRecursive2']


class DriverPerformanceIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    driver: Union[bool, 'DriverArgsFromMaintenanceRecursive3']


class DriverPerformanceIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    driver: Union[bool, 'DriverArgsFromMaintenanceRecursive4']


class DriverPerformanceIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class DriverPerformanceArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyDriverPerformanceArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    driver: Union[bool, 'DriverArgsFromMaintenanceRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromMaintenanceRecursive1']


class DrivingRecordIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    driver: Union[bool, 'DriverArgsFromMaintenanceRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromMaintenanceRecursive2']


class DrivingRecordIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    driver: Union[bool, 'DriverArgsFromMaintenanceRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromMaintenanceRecursive3']


class DrivingRecordIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    driver: Union[bool, 'DriverArgsFromMaintenanceRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromMaintenanceRecursive4']


class DrivingRecordIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class DrivingRecordArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyDrivingRecordArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenanceRecursive1']


class ERPSyncConfigIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenanceRecursive2']


class ERPSyncConfigIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenanceRecursive3']


class ERPSyncConfigIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenanceRecursive4']


class ERPSyncConfigIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class ERPSyncConfigArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyERPSyncConfigArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    config: Union[bool, 'ERPSyncConfigArgsFromMaintenanceRecursive1']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive1']


class ERPSyncLogIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    config: Union[bool, 'ERPSyncConfigArgsFromMaintenanceRecursive2']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive2']


class ERPSyncLogIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    config: Union[bool, 'ERPSyncConfigArgsFromMaintenanceRecursive3']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive3']


class ERPSyncLogIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    config: Union[bool, 'ERPSyncConfigArgsFromMaintenanceRecursive4']
    organization: Union[bool, 'OrganizationArgsFromMaintenanceRecursive4']


class ERPSyncLogIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class ERPSyncLogArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyERPSyncLogArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    technician: Union[bool, 'UserArgsFromMaintenanceRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromMaintenanceRecursive1']


class RepairIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    technician: Union[bool, 'UserArgsFromMaintenanceRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromMaintenanceRecursive2']


class RepairIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    technician: Union[bool, 'UserArgsFromMaintenanceRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromMaintenanceRecursive3']


class RepairIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    technician: Union[bool, 'UserArgsFromMaintenanceRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromMaintenanceRecursive4']


class RepairIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class RepairArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyRepairArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromMaintenance(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    repair: Union[bool, 'RepairArgsFromMaintenanceRecursive1']
    technician: Union[bool, 'UserArgsFromMaintenanceRecursive1']


class StatusHistoryIncludeFromMaintenanceRecursive1(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    repair: Union[bool, 'RepairArgsFromMaintenanceRecursive2']
    technician: Union[bool, 'UserArgsFromMaintenanceRecursive2']


class StatusHistoryIncludeFromMaintenanceRecursive2(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    repair: Union[bool, 'RepairArgsFromMaintenanceRecursive3']
    technician: Union[bool, 'UserArgsFromMaintenanceRecursive3']


class StatusHistoryIncludeFromMaintenanceRecursive3(TypedDict, total=False):
    """Relational arguments for Maintenance"""
    repair: Union[bool, 'RepairArgsFromMaintenanceRecursive4']
    technician: Union[bool, 'UserArgsFromMaintenanceRecursive4']


class StatusHistoryIncludeFromMaintenanceRecursive4(TypedDict, total=False):
    """Relational arguments for Maintenance"""

    

class StatusHistoryArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    
    

class FindManyStatusHistoryArgsFromMaintenance(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromMaintenanceRecursive1(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromMaintenanceRecursive2(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromMaintenanceRecursive3(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromMaintenanceRecursive4(TypedDict, total=False):
    """Arguments for Maintenance"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyMaintenanceArgs = FindManyMaintenanceArgsFromMaintenance
FindFirstMaintenanceArgs = FindManyMaintenanceArgsFromMaintenance


    

class MaintenanceWhereInput(TypedDict, total=False):
    """Maintenance arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mileageAtService: Union[None, _int, 'types.IntFilter']
    cost: Union[None, _float, 'types.FloatFilter']
    provider: Union[None, _str, 'types.StringFilter']
    providerContact: Union[None, _str, 'types.StringFilter']
    documents: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    vehicleId: Union[_str, 'types.StringFilter']
    vehicle: 'VehicleRelationFilter'
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    parts: 'MaintenancePartListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaintenanceWhereInputRecursive1', List['MaintenanceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MaintenanceWhereInputRecursive1']
    OR: List['MaintenanceWhereInputRecursive1']
    NOT: List['MaintenanceWhereInputRecursive1']


class MaintenanceWhereInputRecursive1(TypedDict, total=False):
    """Maintenance arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mileageAtService: Union[None, _int, 'types.IntFilter']
    cost: Union[None, _float, 'types.FloatFilter']
    provider: Union[None, _str, 'types.StringFilter']
    providerContact: Union[None, _str, 'types.StringFilter']
    documents: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    vehicleId: Union[_str, 'types.StringFilter']
    vehicle: 'VehicleRelationFilter'
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    parts: 'MaintenancePartListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaintenanceWhereInputRecursive2', List['MaintenanceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MaintenanceWhereInputRecursive2']
    OR: List['MaintenanceWhereInputRecursive2']
    NOT: List['MaintenanceWhereInputRecursive2']


class MaintenanceWhereInputRecursive2(TypedDict, total=False):
    """Maintenance arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mileageAtService: Union[None, _int, 'types.IntFilter']
    cost: Union[None, _float, 'types.FloatFilter']
    provider: Union[None, _str, 'types.StringFilter']
    providerContact: Union[None, _str, 'types.StringFilter']
    documents: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    vehicleId: Union[_str, 'types.StringFilter']
    vehicle: 'VehicleRelationFilter'
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    parts: 'MaintenancePartListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaintenanceWhereInputRecursive3', List['MaintenanceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MaintenanceWhereInputRecursive3']
    OR: List['MaintenanceWhereInputRecursive3']
    NOT: List['MaintenanceWhereInputRecursive3']


class MaintenanceWhereInputRecursive3(TypedDict, total=False):
    """Maintenance arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mileageAtService: Union[None, _int, 'types.IntFilter']
    cost: Union[None, _float, 'types.FloatFilter']
    provider: Union[None, _str, 'types.StringFilter']
    providerContact: Union[None, _str, 'types.StringFilter']
    documents: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    vehicleId: Union[_str, 'types.StringFilter']
    vehicle: 'VehicleRelationFilter'
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    parts: 'MaintenancePartListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaintenanceWhereInputRecursive4', List['MaintenanceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MaintenanceWhereInputRecursive4']
    OR: List['MaintenanceWhereInputRecursive4']
    NOT: List['MaintenanceWhereInputRecursive4']


class MaintenanceWhereInputRecursive4(TypedDict, total=False):
    """Maintenance arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mileageAtService: Union[None, _int, 'types.IntFilter']
    cost: Union[None, _float, 'types.FloatFilter']
    provider: Union[None, _str, 'types.StringFilter']
    providerContact: Union[None, _str, 'types.StringFilter']
    documents: 'types.StringListFilter'
    notes: Union[None, _str, 'types.StringFilter']
    vehicleId: Union[_str, 'types.StringFilter']
    vehicle: 'VehicleRelationFilter'
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    parts: 'MaintenancePartListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Maintenance types


    

class MaintenanceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Maintenance arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mileageAtService: Union[_int, 'types.IntWithAggregatesFilter']
    cost: Union[_float, 'types.FloatWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerContact: Union[_str, 'types.StringWithAggregatesFilter']
    documents: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    vehicleId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaintenanceScalarWhereWithAggregatesInputRecursive1']
    OR: List['MaintenanceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MaintenanceScalarWhereWithAggregatesInputRecursive1']


class MaintenanceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Maintenance arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mileageAtService: Union[_int, 'types.IntWithAggregatesFilter']
    cost: Union[_float, 'types.FloatWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerContact: Union[_str, 'types.StringWithAggregatesFilter']
    documents: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    vehicleId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaintenanceScalarWhereWithAggregatesInputRecursive2']
    OR: List['MaintenanceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MaintenanceScalarWhereWithAggregatesInputRecursive2']


class MaintenanceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Maintenance arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mileageAtService: Union[_int, 'types.IntWithAggregatesFilter']
    cost: Union[_float, 'types.FloatWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerContact: Union[_str, 'types.StringWithAggregatesFilter']
    documents: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    vehicleId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaintenanceScalarWhereWithAggregatesInputRecursive3']
    OR: List['MaintenanceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MaintenanceScalarWhereWithAggregatesInputRecursive3']


class MaintenanceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Maintenance arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mileageAtService: Union[_int, 'types.IntWithAggregatesFilter']
    cost: Union[_float, 'types.FloatWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerContact: Union[_str, 'types.StringWithAggregatesFilter']
    documents: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    vehicleId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaintenanceScalarWhereWithAggregatesInputRecursive4']
    OR: List['MaintenanceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MaintenanceScalarWhereWithAggregatesInputRecursive4']


class MaintenanceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Maintenance arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mileageAtService: Union[_int, 'types.IntWithAggregatesFilter']
    cost: Union[_float, 'types.FloatWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerContact: Union[_str, 'types.StringWithAggregatesFilter']
    documents: Union[_str, 'types.StringWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    vehicleId: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class MaintenanceGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    description: _str
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: datetime.datetime
    endDate: datetime.datetime
    mileageAtService: _int
    cost: _float
    provider: _str
    providerContact: _str
    documents: List[_str]
    notes: _str
    vehicleId: _str
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'MaintenanceSumAggregateOutput'
    _avg: 'MaintenanceAvgAggregateOutput'
    _min: 'MaintenanceMinAggregateOutput'
    _max: 'MaintenanceMaxAggregateOutput'
    _count: 'MaintenanceCountAggregateOutput'


class MaintenanceAvgAggregateOutput(TypedDict, total=False):
    """Maintenance output for aggregating averages"""
    mileageAtService: float
    cost: float


class MaintenanceSumAggregateOutput(TypedDict, total=False):
    """Maintenance output for aggregating sums"""
    mileageAtService: _int
    cost: _float


class MaintenanceScalarAggregateOutput(TypedDict, total=False):
    """Maintenance output including scalar fields"""
    id: _str
    title: _str
    description: _str
    maintenanceType: 'enums.MaintenanceType'
    status: 'enums.MaintenanceStatus'
    startDate: datetime.datetime
    endDate: datetime.datetime
    mileageAtService: _int
    cost: _float
    provider: _str
    providerContact: _str
    documents: List[_str]
    notes: _str
    vehicleId: _str
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


MaintenanceMinAggregateOutput = MaintenanceScalarAggregateOutput
MaintenanceMaxAggregateOutput = MaintenanceScalarAggregateOutput


class MaintenanceMaxAggregateInput(TypedDict, total=False):
    """Maintenance input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    maintenanceType: bool
    status: bool
    startDate: bool
    endDate: bool
    mileageAtService: bool
    cost: bool
    provider: bool
    providerContact: bool
    documents: bool
    notes: bool
    vehicleId: bool
    organizationId: bool
    createdAt: bool
    updatedAt: bool


class MaintenanceMinAggregateInput(TypedDict, total=False):
    """Maintenance input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    maintenanceType: bool
    status: bool
    startDate: bool
    endDate: bool
    mileageAtService: bool
    cost: bool
    provider: bool
    providerContact: bool
    documents: bool
    notes: bool
    vehicleId: bool
    organizationId: bool
    createdAt: bool
    updatedAt: bool


class MaintenanceNumberAggregateInput(TypedDict, total=False):
    """Maintenance input for aggregating numbers"""
    mileageAtService: bool
    cost: bool


MaintenanceAvgAggregateInput = MaintenanceNumberAggregateInput
MaintenanceSumAggregateInput = MaintenanceNumberAggregateInput


MaintenanceCountAggregateInput = TypedDict(
    'MaintenanceCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'maintenanceType': bool,
        'status': bool,
        'startDate': bool,
        'endDate': bool,
        'mileageAtService': bool,
        'cost': bool,
        'provider': bool,
        'providerContact': bool,
        'documents': bool,
        'notes': bool,
        'vehicleId': bool,
        'organizationId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

MaintenanceCountAggregateOutput = TypedDict(
    'MaintenanceCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'maintenanceType': int,
        'status': int,
        'startDate': int,
        'endDate': int,
        'mileageAtService': int,
        'cost': int,
        'provider': int,
        'providerContact': int,
        'documents': int,
        'notes': int,
        'vehicleId': int,
        'organizationId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


MaintenanceKeys = Literal[
    'id',
    'title',
    'description',
    'maintenanceType',
    'status',
    'startDate',
    'endDate',
    'mileageAtService',
    'cost',
    'provider',
    'providerContact',
    'documents',
    'notes',
    'vehicleId',
    'vehicle',
    'organizationId',
    'organization',
    'parts',
    'createdAt',
    'updatedAt',
]
MaintenanceScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'maintenanceType',
    'status',
    'startDate',
    'endDate',
    'mileageAtService',
    'cost',
    'provider',
    'providerContact',
    'documents',
    'notes',
    'vehicleId',
    'organizationId',
    'createdAt',
    'updatedAt',
]
MaintenanceScalarFieldKeysT = TypeVar('MaintenanceScalarFieldKeysT', bound=MaintenanceScalarFieldKeys)

MaintenanceRelationalFieldKeys = Literal[
        'vehicle',
        'organization',
        'parts',
    ]

# MaintenancePart types

class MaintenancePartOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the MaintenancePart create method"""
    id: _str
    partNumber: Optional[_str]
    unitPrice: Optional[_float]
    totalPrice: Optional[_float]
    maintenanceId: _str
    maintenance: 'MaintenanceCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MaintenancePartCreateInput(MaintenancePartOptionalCreateInput):
    """Required arguments to the MaintenancePart create method"""
    name: _str
    quantity: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MaintenancePartOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the MaintenancePart create method, without relations"""
    id: _str
    partNumber: Optional[_str]
    unitPrice: Optional[_float]
    totalPrice: Optional[_float]
    maintenanceId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MaintenancePartCreateWithoutRelationsInput(MaintenancePartOptionalCreateWithoutRelationsInput):
    """Required arguments to the MaintenancePart create method, without relations"""
    name: _str
    quantity: _int

class MaintenancePartConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MaintenancePartCreateWithoutRelationsInput'
    where: 'MaintenancePartWhereUniqueInput'

class MaintenancePartCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MaintenancePartCreateWithoutRelationsInput'
    connect: 'MaintenancePartWhereUniqueInput'
    connect_or_create: 'MaintenancePartConnectOrCreateWithoutRelationsInput'


class MaintenancePartCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MaintenancePartCreateWithoutRelationsInput', List['MaintenancePartCreateWithoutRelationsInput']]
    connect: Union['MaintenancePartWhereUniqueInput', List['MaintenancePartWhereUniqueInput']]
    connect_or_create: Union['MaintenancePartConnectOrCreateWithoutRelationsInput', List['MaintenancePartConnectOrCreateWithoutRelationsInput']]

_MaintenancePartWhereUnique_id_Input = TypedDict(
    '_MaintenancePartWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MaintenancePartWhereUniqueInput = _MaintenancePartWhereUnique_id_Input


class MaintenancePartUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    partNumber: Optional[_str]
    quantity: Union[AtomicIntInput, _int]
    unitPrice: Optional[Union[AtomicFloatInput, _float]]
    totalPrice: Optional[Union[AtomicFloatInput, _float]]
    maintenance: 'MaintenanceUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MaintenancePartUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    partNumber: Optional[_str]
    quantity: Union[AtomicIntInput, _int]
    unitPrice: Optional[Union[AtomicFloatInput, _float]]
    totalPrice: Optional[Union[AtomicFloatInput, _float]]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MaintenancePartUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MaintenancePartCreateWithoutRelationsInput']
    connect: List['MaintenancePartWhereUniqueInput']
    connect_or_create: List['MaintenancePartConnectOrCreateWithoutRelationsInput']
    set: List['MaintenancePartWhereUniqueInput']
    disconnect: List['MaintenancePartWhereUniqueInput']
    delete: List['MaintenancePartWhereUniqueInput']

    # TODO
    # update: List['MaintenancePartUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MaintenancePartUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MaintenancePartScalarWhereInput']
    # upsert: List['MaintenancePartUpserteWithWhereUniqueWithoutRelationsInput']


class MaintenancePartUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MaintenancePartCreateWithoutRelationsInput'
    connect: 'MaintenancePartWhereUniqueInput'
    connect_or_create: 'MaintenancePartConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MaintenancePartUpdateInput'
    # upsert: 'MaintenancePartUpsertWithoutRelationsInput'


class MaintenancePartUpsertInput(TypedDict):
    create: 'MaintenancePartCreateInput'
    update: 'MaintenancePartUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_MaintenancePart_id_OrderByInput = TypedDict(
    '_MaintenancePart_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_MaintenancePart_name_OrderByInput = TypedDict(
    '_MaintenancePart_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_MaintenancePart_partNumber_OrderByInput = TypedDict(
    '_MaintenancePart_partNumber_OrderByInput',
    {
        'partNumber': 'SortOrder',
    },
    total=True
)

_MaintenancePart_quantity_OrderByInput = TypedDict(
    '_MaintenancePart_quantity_OrderByInput',
    {
        'quantity': 'SortOrder',
    },
    total=True
)

_MaintenancePart_unitPrice_OrderByInput = TypedDict(
    '_MaintenancePart_unitPrice_OrderByInput',
    {
        'unitPrice': 'SortOrder',
    },
    total=True
)

_MaintenancePart_totalPrice_OrderByInput = TypedDict(
    '_MaintenancePart_totalPrice_OrderByInput',
    {
        'totalPrice': 'SortOrder',
    },
    total=True
)

_MaintenancePart_maintenanceId_OrderByInput = TypedDict(
    '_MaintenancePart_maintenanceId_OrderByInput',
    {
        'maintenanceId': 'SortOrder',
    },
    total=True
)

_MaintenancePart_createdAt_OrderByInput = TypedDict(
    '_MaintenancePart_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_MaintenancePart_updatedAt_OrderByInput = TypedDict(
    '_MaintenancePart_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_MaintenancePart_RelevanceInner = TypedDict(
    '_MaintenancePart_RelevanceInner',
    {
        'fields': 'List[MaintenancePartScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_MaintenancePart_RelevanceOrderByInput = TypedDict(
    '_MaintenancePart_RelevanceOrderByInput',
    {
        '_relevance': '_MaintenancePart_RelevanceInner',
    },
    total=True
)

MaintenancePartOrderByInput = Union[
    '_MaintenancePart_id_OrderByInput',
    '_MaintenancePart_name_OrderByInput',
    '_MaintenancePart_partNumber_OrderByInput',
    '_MaintenancePart_quantity_OrderByInput',
    '_MaintenancePart_unitPrice_OrderByInput',
    '_MaintenancePart_totalPrice_OrderByInput',
    '_MaintenancePart_maintenanceId_OrderByInput',
    '_MaintenancePart_createdAt_OrderByInput',
    '_MaintenancePart_updatedAt_OrderByInput',
    '_MaintenancePart_RelevanceOrderByInput',
]



# recursive MaintenancePart types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MaintenancePartRelationFilter = TypedDict(
    'MaintenancePartRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MaintenancePartListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MaintenancePartInclude(TypedDict, total=False):
    """MaintenancePart relational arguments"""
    maintenance: Union[bool, 'MaintenanceArgsFromMaintenancePart']


    

class UserIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenancePartRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenancePartRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromMaintenancePartRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromMaintenancePartRecursive1']


class UserIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenancePartRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenancePartRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromMaintenancePartRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromMaintenancePartRecursive2']


class UserIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenancePartRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenancePartRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromMaintenancePartRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromMaintenancePartRecursive3']


class UserIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenancePartRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenancePartRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromMaintenancePartRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromMaintenancePartRecursive4']


class UserIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class UserArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyUserArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenancePartRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromMaintenancePartRecursive1']


class PermissionIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenancePartRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromMaintenancePartRecursive2']


class PermissionIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenancePartRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromMaintenancePartRecursive3']


class PermissionIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromMaintenancePartRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromMaintenancePartRecursive4']


class PermissionIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class PermissionArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyPermissionArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    user: Union[bool, 'UserArgsFromMaintenancePartRecursive1']
    permission: Union[bool, 'PermissionArgsFromMaintenancePartRecursive1']


class UserPermissionIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    user: Union[bool, 'UserArgsFromMaintenancePartRecursive2']
    permission: Union[bool, 'PermissionArgsFromMaintenancePartRecursive2']


class UserPermissionIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    user: Union[bool, 'UserArgsFromMaintenancePartRecursive3']
    permission: Union[bool, 'PermissionArgsFromMaintenancePartRecursive3']


class UserPermissionIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    user: Union[bool, 'UserArgsFromMaintenancePartRecursive4']
    permission: Union[bool, 'PermissionArgsFromMaintenancePartRecursive4']


class UserPermissionIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class UserPermissionArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyUserPermissionArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    permission: Union[bool, 'PermissionArgsFromMaintenancePartRecursive1']


class RolePermissionIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    permission: Union[bool, 'PermissionArgsFromMaintenancePartRecursive2']


class RolePermissionIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    permission: Union[bool, 'PermissionArgsFromMaintenancePartRecursive3']


class RolePermissionIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    permission: Union[bool, 'PermissionArgsFromMaintenancePartRecursive4']


class RolePermissionIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class RolePermissionArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyRolePermissionArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenancePartRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromMaintenancePartRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromMaintenancePartRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenancePartRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromMaintenancePartRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenancePartRecursive1']


class OrganizationIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenancePartRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromMaintenancePartRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromMaintenancePartRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenancePartRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromMaintenancePartRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenancePartRecursive2']


class OrganizationIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenancePartRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromMaintenancePartRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromMaintenancePartRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenancePartRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromMaintenancePartRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenancePartRecursive3']


class OrganizationIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromMaintenancePartRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromMaintenancePartRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromMaintenancePartRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenancePartRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromMaintenancePartRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenancePartRecursive4']


class OrganizationIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class OrganizationArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyOrganizationArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    user: Union[bool, 'UserArgsFromMaintenancePartRecursive1']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive1']


class OrganizationMemberIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    user: Union[bool, 'UserArgsFromMaintenancePartRecursive2']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive2']


class OrganizationMemberIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    user: Union[bool, 'UserArgsFromMaintenancePartRecursive3']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive3']


class OrganizationMemberIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    user: Union[bool, 'UserArgsFromMaintenancePartRecursive4']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive4']


class OrganizationMemberIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class OrganizationMemberArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyOrganizationMemberArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromMaintenancePartRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenancePartRecursive1']


class DriverIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromMaintenancePartRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenancePartRecursive2']


class DriverIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromMaintenancePartRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenancePartRecursive3']


class DriverIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromMaintenancePartRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenancePartRecursive4']


class DriverIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class DriverArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyDriverArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenancePartRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenancePartRecursive1']


class VehicleIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenancePartRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenancePartRecursive2']


class VehicleIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenancePartRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenancePartRecursive3']


class VehicleIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromMaintenancePartRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromMaintenancePartRecursive4']


class VehicleIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class VehicleArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyVehicleArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    vehicle: Union[bool, 'VehicleArgsFromMaintenancePartRecursive1']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromMaintenancePartRecursive1']


class MaintenanceIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    vehicle: Union[bool, 'VehicleArgsFromMaintenancePartRecursive2']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromMaintenancePartRecursive2']


class MaintenanceIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    vehicle: Union[bool, 'VehicleArgsFromMaintenancePartRecursive3']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromMaintenancePartRecursive3']


class MaintenanceIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    vehicle: Union[bool, 'VehicleArgsFromMaintenancePartRecursive4']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromMaintenancePartRecursive4']


class MaintenanceIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class MaintenanceArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyMaintenanceArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    maintenance: Union[bool, 'MaintenanceArgsFromMaintenancePartRecursive1']


class MaintenancePartIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    maintenance: Union[bool, 'MaintenanceArgsFromMaintenancePartRecursive2']


class MaintenancePartIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    maintenance: Union[bool, 'MaintenanceArgsFromMaintenancePartRecursive3']


class MaintenancePartIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    maintenance: Union[bool, 'MaintenanceArgsFromMaintenancePartRecursive4']


class MaintenancePartIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class MaintenancePartArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyMaintenancePartArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    driver: Union[bool, 'DriverArgsFromMaintenancePartRecursive1']


class DriverPerformanceIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    driver: Union[bool, 'DriverArgsFromMaintenancePartRecursive2']


class DriverPerformanceIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    driver: Union[bool, 'DriverArgsFromMaintenancePartRecursive3']


class DriverPerformanceIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    driver: Union[bool, 'DriverArgsFromMaintenancePartRecursive4']


class DriverPerformanceIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class DriverPerformanceArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyDriverPerformanceArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    driver: Union[bool, 'DriverArgsFromMaintenancePartRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromMaintenancePartRecursive1']


class DrivingRecordIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    driver: Union[bool, 'DriverArgsFromMaintenancePartRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromMaintenancePartRecursive2']


class DrivingRecordIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    driver: Union[bool, 'DriverArgsFromMaintenancePartRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromMaintenancePartRecursive3']


class DrivingRecordIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    driver: Union[bool, 'DriverArgsFromMaintenancePartRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromMaintenancePartRecursive4']


class DrivingRecordIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class DrivingRecordArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyDrivingRecordArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenancePartRecursive1']


class ERPSyncConfigIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenancePartRecursive2']


class ERPSyncConfigIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenancePartRecursive3']


class ERPSyncConfigIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromMaintenancePartRecursive4']


class ERPSyncConfigIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class ERPSyncConfigArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyERPSyncConfigArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    config: Union[bool, 'ERPSyncConfigArgsFromMaintenancePartRecursive1']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive1']


class ERPSyncLogIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    config: Union[bool, 'ERPSyncConfigArgsFromMaintenancePartRecursive2']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive2']


class ERPSyncLogIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    config: Union[bool, 'ERPSyncConfigArgsFromMaintenancePartRecursive3']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive3']


class ERPSyncLogIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    config: Union[bool, 'ERPSyncConfigArgsFromMaintenancePartRecursive4']
    organization: Union[bool, 'OrganizationArgsFromMaintenancePartRecursive4']


class ERPSyncLogIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class ERPSyncLogArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyERPSyncLogArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    technician: Union[bool, 'UserArgsFromMaintenancePartRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromMaintenancePartRecursive1']


class RepairIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    technician: Union[bool, 'UserArgsFromMaintenancePartRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromMaintenancePartRecursive2']


class RepairIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    technician: Union[bool, 'UserArgsFromMaintenancePartRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromMaintenancePartRecursive3']


class RepairIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    technician: Union[bool, 'UserArgsFromMaintenancePartRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromMaintenancePartRecursive4']


class RepairIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class RepairArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyRepairArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromMaintenancePart(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    repair: Union[bool, 'RepairArgsFromMaintenancePartRecursive1']
    technician: Union[bool, 'UserArgsFromMaintenancePartRecursive1']


class StatusHistoryIncludeFromMaintenancePartRecursive1(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    repair: Union[bool, 'RepairArgsFromMaintenancePartRecursive2']
    technician: Union[bool, 'UserArgsFromMaintenancePartRecursive2']


class StatusHistoryIncludeFromMaintenancePartRecursive2(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    repair: Union[bool, 'RepairArgsFromMaintenancePartRecursive3']
    technician: Union[bool, 'UserArgsFromMaintenancePartRecursive3']


class StatusHistoryIncludeFromMaintenancePartRecursive3(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""
    repair: Union[bool, 'RepairArgsFromMaintenancePartRecursive4']
    technician: Union[bool, 'UserArgsFromMaintenancePartRecursive4']


class StatusHistoryIncludeFromMaintenancePartRecursive4(TypedDict, total=False):
    """Relational arguments for MaintenancePart"""

    

class StatusHistoryArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    
    

class FindManyStatusHistoryArgsFromMaintenancePart(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromMaintenancePartRecursive1(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromMaintenancePartRecursive2(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromMaintenancePartRecursive3(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromMaintenancePartRecursive4(TypedDict, total=False):
    """Arguments for MaintenancePart"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyMaintenancePartArgs = FindManyMaintenancePartArgsFromMaintenancePart
FindFirstMaintenancePartArgs = FindManyMaintenancePartArgsFromMaintenancePart


    

class MaintenancePartWhereInput(TypedDict, total=False):
    """MaintenancePart arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    partNumber: Union[None, _str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    unitPrice: Union[None, _float, 'types.FloatFilter']
    totalPrice: Union[None, _float, 'types.FloatFilter']
    maintenanceId: Union[_str, 'types.StringFilter']
    maintenance: 'MaintenanceRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaintenancePartWhereInputRecursive1', List['MaintenancePartWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MaintenancePartWhereInputRecursive1']
    OR: List['MaintenancePartWhereInputRecursive1']
    NOT: List['MaintenancePartWhereInputRecursive1']


class MaintenancePartWhereInputRecursive1(TypedDict, total=False):
    """MaintenancePart arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    partNumber: Union[None, _str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    unitPrice: Union[None, _float, 'types.FloatFilter']
    totalPrice: Union[None, _float, 'types.FloatFilter']
    maintenanceId: Union[_str, 'types.StringFilter']
    maintenance: 'MaintenanceRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaintenancePartWhereInputRecursive2', List['MaintenancePartWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MaintenancePartWhereInputRecursive2']
    OR: List['MaintenancePartWhereInputRecursive2']
    NOT: List['MaintenancePartWhereInputRecursive2']


class MaintenancePartWhereInputRecursive2(TypedDict, total=False):
    """MaintenancePart arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    partNumber: Union[None, _str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    unitPrice: Union[None, _float, 'types.FloatFilter']
    totalPrice: Union[None, _float, 'types.FloatFilter']
    maintenanceId: Union[_str, 'types.StringFilter']
    maintenance: 'MaintenanceRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaintenancePartWhereInputRecursive3', List['MaintenancePartWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MaintenancePartWhereInputRecursive3']
    OR: List['MaintenancePartWhereInputRecursive3']
    NOT: List['MaintenancePartWhereInputRecursive3']


class MaintenancePartWhereInputRecursive3(TypedDict, total=False):
    """MaintenancePart arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    partNumber: Union[None, _str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    unitPrice: Union[None, _float, 'types.FloatFilter']
    totalPrice: Union[None, _float, 'types.FloatFilter']
    maintenanceId: Union[_str, 'types.StringFilter']
    maintenance: 'MaintenanceRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['MaintenancePartWhereInputRecursive4', List['MaintenancePartWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MaintenancePartWhereInputRecursive4']
    OR: List['MaintenancePartWhereInputRecursive4']
    NOT: List['MaintenancePartWhereInputRecursive4']


class MaintenancePartWhereInputRecursive4(TypedDict, total=False):
    """MaintenancePart arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    partNumber: Union[None, _str, 'types.StringFilter']
    quantity: Union[_int, 'types.IntFilter']
    unitPrice: Union[None, _float, 'types.FloatFilter']
    totalPrice: Union[None, _float, 'types.FloatFilter']
    maintenanceId: Union[_str, 'types.StringFilter']
    maintenance: 'MaintenanceRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate MaintenancePart types


    

class MaintenancePartScalarWhereWithAggregatesInput(TypedDict, total=False):
    """MaintenancePart arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    partNumber: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    unitPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    totalPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    maintenanceId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaintenancePartScalarWhereWithAggregatesInputRecursive1']
    OR: List['MaintenancePartScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MaintenancePartScalarWhereWithAggregatesInputRecursive1']


class MaintenancePartScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """MaintenancePart arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    partNumber: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    unitPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    totalPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    maintenanceId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaintenancePartScalarWhereWithAggregatesInputRecursive2']
    OR: List['MaintenancePartScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MaintenancePartScalarWhereWithAggregatesInputRecursive2']


class MaintenancePartScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """MaintenancePart arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    partNumber: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    unitPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    totalPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    maintenanceId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaintenancePartScalarWhereWithAggregatesInputRecursive3']
    OR: List['MaintenancePartScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MaintenancePartScalarWhereWithAggregatesInputRecursive3']


class MaintenancePartScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """MaintenancePart arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    partNumber: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    unitPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    totalPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    maintenanceId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MaintenancePartScalarWhereWithAggregatesInputRecursive4']
    OR: List['MaintenancePartScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MaintenancePartScalarWhereWithAggregatesInputRecursive4']


class MaintenancePartScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """MaintenancePart arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    partNumber: Union[_str, 'types.StringWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    unitPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    totalPrice: Union[_float, 'types.FloatWithAggregatesFilter']
    maintenanceId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class MaintenancePartGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    partNumber: _str
    quantity: _int
    unitPrice: _float
    totalPrice: _float
    maintenanceId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'MaintenancePartSumAggregateOutput'
    _avg: 'MaintenancePartAvgAggregateOutput'
    _min: 'MaintenancePartMinAggregateOutput'
    _max: 'MaintenancePartMaxAggregateOutput'
    _count: 'MaintenancePartCountAggregateOutput'


class MaintenancePartAvgAggregateOutput(TypedDict, total=False):
    """MaintenancePart output for aggregating averages"""
    quantity: float
    unitPrice: float
    totalPrice: float


class MaintenancePartSumAggregateOutput(TypedDict, total=False):
    """MaintenancePart output for aggregating sums"""
    quantity: _int
    unitPrice: _float
    totalPrice: _float


class MaintenancePartScalarAggregateOutput(TypedDict, total=False):
    """MaintenancePart output including scalar fields"""
    id: _str
    name: _str
    partNumber: _str
    quantity: _int
    unitPrice: _float
    totalPrice: _float
    maintenanceId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


MaintenancePartMinAggregateOutput = MaintenancePartScalarAggregateOutput
MaintenancePartMaxAggregateOutput = MaintenancePartScalarAggregateOutput


class MaintenancePartMaxAggregateInput(TypedDict, total=False):
    """MaintenancePart input for aggregating by max"""
    id: bool
    name: bool
    partNumber: bool
    quantity: bool
    unitPrice: bool
    totalPrice: bool
    maintenanceId: bool
    createdAt: bool
    updatedAt: bool


class MaintenancePartMinAggregateInput(TypedDict, total=False):
    """MaintenancePart input for aggregating by min"""
    id: bool
    name: bool
    partNumber: bool
    quantity: bool
    unitPrice: bool
    totalPrice: bool
    maintenanceId: bool
    createdAt: bool
    updatedAt: bool


class MaintenancePartNumberAggregateInput(TypedDict, total=False):
    """MaintenancePart input for aggregating numbers"""
    quantity: bool
    unitPrice: bool
    totalPrice: bool


MaintenancePartAvgAggregateInput = MaintenancePartNumberAggregateInput
MaintenancePartSumAggregateInput = MaintenancePartNumberAggregateInput


MaintenancePartCountAggregateInput = TypedDict(
    'MaintenancePartCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'partNumber': bool,
        'quantity': bool,
        'unitPrice': bool,
        'totalPrice': bool,
        'maintenanceId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

MaintenancePartCountAggregateOutput = TypedDict(
    'MaintenancePartCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'partNumber': int,
        'quantity': int,
        'unitPrice': int,
        'totalPrice': int,
        'maintenanceId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


MaintenancePartKeys = Literal[
    'id',
    'name',
    'partNumber',
    'quantity',
    'unitPrice',
    'totalPrice',
    'maintenanceId',
    'maintenance',
    'createdAt',
    'updatedAt',
]
MaintenancePartScalarFieldKeys = Literal[
    'id',
    'name',
    'partNumber',
    'quantity',
    'unitPrice',
    'totalPrice',
    'maintenanceId',
    'createdAt',
    'updatedAt',
]
MaintenancePartScalarFieldKeysT = TypeVar('MaintenancePartScalarFieldKeysT', bound=MaintenancePartScalarFieldKeys)

MaintenancePartRelationalFieldKeys = Literal[
        'maintenance',
    ]

# DriverPerformance types

class DriverPerformanceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the DriverPerformance create method"""
    id: _str
    driverId: _str
    driver: 'DriverCreateNestedWithoutRelationsInput'
    avgSpeed: Optional[_float]
    maxSpeed: Optional[_float]
    hardBrakeCount: Optional[_int]
    hardAccelerationCount: Optional[_int]
    idlingDuration: Optional[_int]
    fuelConsumption: Optional[_float]
    avgFuelEfficiency: Optional[_float]
    co2Emission: Optional[_float]
    safetyScore: Optional[_int]
    ecoScore: Optional[_int]
    overallScore: Optional[_int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class DriverPerformanceCreateInput(DriverPerformanceOptionalCreateInput):
    """Required arguments to the DriverPerformance create method"""
    periodStart: datetime.datetime
    periodEnd: datetime.datetime
    totalDistance: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DriverPerformanceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the DriverPerformance create method, without relations"""
    id: _str
    driverId: _str
    avgSpeed: Optional[_float]
    maxSpeed: Optional[_float]
    hardBrakeCount: Optional[_int]
    hardAccelerationCount: Optional[_int]
    idlingDuration: Optional[_int]
    fuelConsumption: Optional[_float]
    avgFuelEfficiency: Optional[_float]
    co2Emission: Optional[_float]
    safetyScore: Optional[_int]
    ecoScore: Optional[_int]
    overallScore: Optional[_int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class DriverPerformanceCreateWithoutRelationsInput(DriverPerformanceOptionalCreateWithoutRelationsInput):
    """Required arguments to the DriverPerformance create method, without relations"""
    periodStart: datetime.datetime
    periodEnd: datetime.datetime
    totalDistance: _float

class DriverPerformanceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'DriverPerformanceCreateWithoutRelationsInput'
    where: 'DriverPerformanceWhereUniqueInput'

class DriverPerformanceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DriverPerformanceCreateWithoutRelationsInput'
    connect: 'DriverPerformanceWhereUniqueInput'
    connect_or_create: 'DriverPerformanceConnectOrCreateWithoutRelationsInput'


class DriverPerformanceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DriverPerformanceCreateWithoutRelationsInput', List['DriverPerformanceCreateWithoutRelationsInput']]
    connect: Union['DriverPerformanceWhereUniqueInput', List['DriverPerformanceWhereUniqueInput']]
    connect_or_create: Union['DriverPerformanceConnectOrCreateWithoutRelationsInput', List['DriverPerformanceConnectOrCreateWithoutRelationsInput']]

_DriverPerformanceWhereUnique_id_Input = TypedDict(
    '_DriverPerformanceWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_DriverPerformanceCompounddriverId_periodStart_periodEndKeyInner = TypedDict(
    '_DriverPerformanceCompounddriverId_periodStart_periodEndKeyInner',
    {
        'driverId': '_str',
        'periodStart': 'datetime.datetime',
        'periodEnd': 'datetime.datetime',
    },
    total=True
)

_DriverPerformanceCompounddriverId_periodStart_periodEndKey = TypedDict(
    '_DriverPerformanceCompounddriverId_periodStart_periodEndKey',
    {
        'driverId_periodStart_periodEnd': '_DriverPerformanceCompounddriverId_periodStart_periodEndKeyInner',
    },
    total=True
)

DriverPerformanceWhereUniqueInput = Union[
    '_DriverPerformanceWhereUnique_id_Input',
    '_DriverPerformanceCompounddriverId_periodStart_periodEndKey',
]


class DriverPerformanceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    driver: 'DriverUpdateOneWithoutRelationsInput'
    periodStart: datetime.datetime
    periodEnd: datetime.datetime
    totalDistance: Union[AtomicFloatInput, _float]
    avgSpeed: Optional[Union[AtomicFloatInput, _float]]
    maxSpeed: Optional[Union[AtomicFloatInput, _float]]
    hardBrakeCount: Optional[Union[AtomicIntInput, _int]]
    hardAccelerationCount: Optional[Union[AtomicIntInput, _int]]
    idlingDuration: Optional[Union[AtomicIntInput, _int]]
    fuelConsumption: Optional[Union[AtomicFloatInput, _float]]
    avgFuelEfficiency: Optional[Union[AtomicFloatInput, _float]]
    co2Emission: Optional[Union[AtomicFloatInput, _float]]
    safetyScore: Optional[Union[AtomicIntInput, _int]]
    ecoScore: Optional[Union[AtomicIntInput, _int]]
    overallScore: Optional[Union[AtomicIntInput, _int]]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class DriverPerformanceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    periodStart: datetime.datetime
    periodEnd: datetime.datetime
    totalDistance: Union[AtomicFloatInput, _float]
    avgSpeed: Optional[Union[AtomicFloatInput, _float]]
    maxSpeed: Optional[Union[AtomicFloatInput, _float]]
    hardBrakeCount: Optional[Union[AtomicIntInput, _int]]
    hardAccelerationCount: Optional[Union[AtomicIntInput, _int]]
    idlingDuration: Optional[Union[AtomicIntInput, _int]]
    fuelConsumption: Optional[Union[AtomicFloatInput, _float]]
    avgFuelEfficiency: Optional[Union[AtomicFloatInput, _float]]
    co2Emission: Optional[Union[AtomicFloatInput, _float]]
    safetyScore: Optional[Union[AtomicIntInput, _int]]
    ecoScore: Optional[Union[AtomicIntInput, _int]]
    overallScore: Optional[Union[AtomicIntInput, _int]]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class DriverPerformanceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DriverPerformanceCreateWithoutRelationsInput']
    connect: List['DriverPerformanceWhereUniqueInput']
    connect_or_create: List['DriverPerformanceConnectOrCreateWithoutRelationsInput']
    set: List['DriverPerformanceWhereUniqueInput']
    disconnect: List['DriverPerformanceWhereUniqueInput']
    delete: List['DriverPerformanceWhereUniqueInput']

    # TODO
    # update: List['DriverPerformanceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DriverPerformanceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DriverPerformanceScalarWhereInput']
    # upsert: List['DriverPerformanceUpserteWithWhereUniqueWithoutRelationsInput']


class DriverPerformanceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DriverPerformanceCreateWithoutRelationsInput'
    connect: 'DriverPerformanceWhereUniqueInput'
    connect_or_create: 'DriverPerformanceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DriverPerformanceUpdateInput'
    # upsert: 'DriverPerformanceUpsertWithoutRelationsInput'


class DriverPerformanceUpsertInput(TypedDict):
    create: 'DriverPerformanceCreateInput'
    update: 'DriverPerformanceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_DriverPerformance_id_OrderByInput = TypedDict(
    '_DriverPerformance_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_DriverPerformance_driverId_OrderByInput = TypedDict(
    '_DriverPerformance_driverId_OrderByInput',
    {
        'driverId': 'SortOrder',
    },
    total=True
)

_DriverPerformance_periodStart_OrderByInput = TypedDict(
    '_DriverPerformance_periodStart_OrderByInput',
    {
        'periodStart': 'SortOrder',
    },
    total=True
)

_DriverPerformance_periodEnd_OrderByInput = TypedDict(
    '_DriverPerformance_periodEnd_OrderByInput',
    {
        'periodEnd': 'SortOrder',
    },
    total=True
)

_DriverPerformance_totalDistance_OrderByInput = TypedDict(
    '_DriverPerformance_totalDistance_OrderByInput',
    {
        'totalDistance': 'SortOrder',
    },
    total=True
)

_DriverPerformance_avgSpeed_OrderByInput = TypedDict(
    '_DriverPerformance_avgSpeed_OrderByInput',
    {
        'avgSpeed': 'SortOrder',
    },
    total=True
)

_DriverPerformance_maxSpeed_OrderByInput = TypedDict(
    '_DriverPerformance_maxSpeed_OrderByInput',
    {
        'maxSpeed': 'SortOrder',
    },
    total=True
)

_DriverPerformance_hardBrakeCount_OrderByInput = TypedDict(
    '_DriverPerformance_hardBrakeCount_OrderByInput',
    {
        'hardBrakeCount': 'SortOrder',
    },
    total=True
)

_DriverPerformance_hardAccelerationCount_OrderByInput = TypedDict(
    '_DriverPerformance_hardAccelerationCount_OrderByInput',
    {
        'hardAccelerationCount': 'SortOrder',
    },
    total=True
)

_DriverPerformance_idlingDuration_OrderByInput = TypedDict(
    '_DriverPerformance_idlingDuration_OrderByInput',
    {
        'idlingDuration': 'SortOrder',
    },
    total=True
)

_DriverPerformance_fuelConsumption_OrderByInput = TypedDict(
    '_DriverPerformance_fuelConsumption_OrderByInput',
    {
        'fuelConsumption': 'SortOrder',
    },
    total=True
)

_DriverPerformance_avgFuelEfficiency_OrderByInput = TypedDict(
    '_DriverPerformance_avgFuelEfficiency_OrderByInput',
    {
        'avgFuelEfficiency': 'SortOrder',
    },
    total=True
)

_DriverPerformance_co2Emission_OrderByInput = TypedDict(
    '_DriverPerformance_co2Emission_OrderByInput',
    {
        'co2Emission': 'SortOrder',
    },
    total=True
)

_DriverPerformance_safetyScore_OrderByInput = TypedDict(
    '_DriverPerformance_safetyScore_OrderByInput',
    {
        'safetyScore': 'SortOrder',
    },
    total=True
)

_DriverPerformance_ecoScore_OrderByInput = TypedDict(
    '_DriverPerformance_ecoScore_OrderByInput',
    {
        'ecoScore': 'SortOrder',
    },
    total=True
)

_DriverPerformance_overallScore_OrderByInput = TypedDict(
    '_DriverPerformance_overallScore_OrderByInput',
    {
        'overallScore': 'SortOrder',
    },
    total=True
)

_DriverPerformance_createdAt_OrderByInput = TypedDict(
    '_DriverPerformance_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_DriverPerformance_updatedAt_OrderByInput = TypedDict(
    '_DriverPerformance_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_DriverPerformance_RelevanceInner = TypedDict(
    '_DriverPerformance_RelevanceInner',
    {
        'fields': 'List[DriverPerformanceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_DriverPerformance_RelevanceOrderByInput = TypedDict(
    '_DriverPerformance_RelevanceOrderByInput',
    {
        '_relevance': '_DriverPerformance_RelevanceInner',
    },
    total=True
)

DriverPerformanceOrderByInput = Union[
    '_DriverPerformance_id_OrderByInput',
    '_DriverPerformance_driverId_OrderByInput',
    '_DriverPerformance_periodStart_OrderByInput',
    '_DriverPerformance_periodEnd_OrderByInput',
    '_DriverPerformance_totalDistance_OrderByInput',
    '_DriverPerformance_avgSpeed_OrderByInput',
    '_DriverPerformance_maxSpeed_OrderByInput',
    '_DriverPerformance_hardBrakeCount_OrderByInput',
    '_DriverPerformance_hardAccelerationCount_OrderByInput',
    '_DriverPerformance_idlingDuration_OrderByInput',
    '_DriverPerformance_fuelConsumption_OrderByInput',
    '_DriverPerformance_avgFuelEfficiency_OrderByInput',
    '_DriverPerformance_co2Emission_OrderByInput',
    '_DriverPerformance_safetyScore_OrderByInput',
    '_DriverPerformance_ecoScore_OrderByInput',
    '_DriverPerformance_overallScore_OrderByInput',
    '_DriverPerformance_createdAt_OrderByInput',
    '_DriverPerformance_updatedAt_OrderByInput',
    '_DriverPerformance_RelevanceOrderByInput',
]



# recursive DriverPerformance types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DriverPerformanceRelationFilter = TypedDict(
    'DriverPerformanceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DriverPerformanceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DriverPerformanceInclude(TypedDict, total=False):
    """DriverPerformance relational arguments"""
    driver: Union[bool, 'DriverArgsFromDriverPerformance']


    

class UserIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDriverPerformanceRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDriverPerformanceRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromDriverPerformanceRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDriverPerformanceRecursive1']


class UserIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDriverPerformanceRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDriverPerformanceRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromDriverPerformanceRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDriverPerformanceRecursive2']


class UserIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDriverPerformanceRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDriverPerformanceRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromDriverPerformanceRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDriverPerformanceRecursive3']


class UserIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDriverPerformanceRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDriverPerformanceRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromDriverPerformanceRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDriverPerformanceRecursive4']


class UserIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class UserArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyUserArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDriverPerformanceRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDriverPerformanceRecursive1']


class PermissionIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDriverPerformanceRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDriverPerformanceRecursive2']


class PermissionIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDriverPerformanceRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDriverPerformanceRecursive3']


class PermissionIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDriverPerformanceRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDriverPerformanceRecursive4']


class PermissionIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class PermissionArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyPermissionArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    user: Union[bool, 'UserArgsFromDriverPerformanceRecursive1']
    permission: Union[bool, 'PermissionArgsFromDriverPerformanceRecursive1']


class UserPermissionIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    user: Union[bool, 'UserArgsFromDriverPerformanceRecursive2']
    permission: Union[bool, 'PermissionArgsFromDriverPerformanceRecursive2']


class UserPermissionIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    user: Union[bool, 'UserArgsFromDriverPerformanceRecursive3']
    permission: Union[bool, 'PermissionArgsFromDriverPerformanceRecursive3']


class UserPermissionIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    user: Union[bool, 'UserArgsFromDriverPerformanceRecursive4']
    permission: Union[bool, 'PermissionArgsFromDriverPerformanceRecursive4']


class UserPermissionIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class UserPermissionArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyUserPermissionArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    permission: Union[bool, 'PermissionArgsFromDriverPerformanceRecursive1']


class RolePermissionIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    permission: Union[bool, 'PermissionArgsFromDriverPerformanceRecursive2']


class RolePermissionIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    permission: Union[bool, 'PermissionArgsFromDriverPerformanceRecursive3']


class RolePermissionIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    permission: Union[bool, 'PermissionArgsFromDriverPerformanceRecursive4']


class RolePermissionIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class RolePermissionArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyRolePermissionArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDriverPerformanceRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromDriverPerformanceRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDriverPerformanceRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverPerformanceRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDriverPerformanceRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverPerformanceRecursive1']


class OrganizationIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDriverPerformanceRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromDriverPerformanceRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDriverPerformanceRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverPerformanceRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDriverPerformanceRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverPerformanceRecursive2']


class OrganizationIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDriverPerformanceRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromDriverPerformanceRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDriverPerformanceRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverPerformanceRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDriverPerformanceRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverPerformanceRecursive3']


class OrganizationIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDriverPerformanceRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromDriverPerformanceRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDriverPerformanceRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverPerformanceRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDriverPerformanceRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverPerformanceRecursive4']


class OrganizationIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class OrganizationArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyOrganizationArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    user: Union[bool, 'UserArgsFromDriverPerformanceRecursive1']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive1']


class OrganizationMemberIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    user: Union[bool, 'UserArgsFromDriverPerformanceRecursive2']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive2']


class OrganizationMemberIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    user: Union[bool, 'UserArgsFromDriverPerformanceRecursive3']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive3']


class OrganizationMemberIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    user: Union[bool, 'UserArgsFromDriverPerformanceRecursive4']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive4']


class OrganizationMemberIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class OrganizationMemberArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyOrganizationMemberArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDriverPerformanceRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverPerformanceRecursive1']


class DriverIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDriverPerformanceRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverPerformanceRecursive2']


class DriverIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDriverPerformanceRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverPerformanceRecursive3']


class DriverIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDriverPerformanceRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverPerformanceRecursive4']


class DriverIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class DriverArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyDriverArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverPerformanceRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverPerformanceRecursive1']


class VehicleIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverPerformanceRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverPerformanceRecursive2']


class VehicleIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverPerformanceRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverPerformanceRecursive3']


class VehicleIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDriverPerformanceRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDriverPerformanceRecursive4']


class VehicleIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class VehicleArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyVehicleArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    vehicle: Union[bool, 'VehicleArgsFromDriverPerformanceRecursive1']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDriverPerformanceRecursive1']


class MaintenanceIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    vehicle: Union[bool, 'VehicleArgsFromDriverPerformanceRecursive2']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDriverPerformanceRecursive2']


class MaintenanceIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    vehicle: Union[bool, 'VehicleArgsFromDriverPerformanceRecursive3']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDriverPerformanceRecursive3']


class MaintenanceIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    vehicle: Union[bool, 'VehicleArgsFromDriverPerformanceRecursive4']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDriverPerformanceRecursive4']


class MaintenanceIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class MaintenanceArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyMaintenanceArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    maintenance: Union[bool, 'MaintenanceArgsFromDriverPerformanceRecursive1']


class MaintenancePartIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    maintenance: Union[bool, 'MaintenanceArgsFromDriverPerformanceRecursive2']


class MaintenancePartIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    maintenance: Union[bool, 'MaintenanceArgsFromDriverPerformanceRecursive3']


class MaintenancePartIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    maintenance: Union[bool, 'MaintenanceArgsFromDriverPerformanceRecursive4']


class MaintenancePartIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class MaintenancePartArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyMaintenancePartArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    driver: Union[bool, 'DriverArgsFromDriverPerformanceRecursive1']


class DriverPerformanceIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    driver: Union[bool, 'DriverArgsFromDriverPerformanceRecursive2']


class DriverPerformanceIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    driver: Union[bool, 'DriverArgsFromDriverPerformanceRecursive3']


class DriverPerformanceIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    driver: Union[bool, 'DriverArgsFromDriverPerformanceRecursive4']


class DriverPerformanceIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class DriverPerformanceArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyDriverPerformanceArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    driver: Union[bool, 'DriverArgsFromDriverPerformanceRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromDriverPerformanceRecursive1']


class DrivingRecordIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    driver: Union[bool, 'DriverArgsFromDriverPerformanceRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromDriverPerformanceRecursive2']


class DrivingRecordIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    driver: Union[bool, 'DriverArgsFromDriverPerformanceRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromDriverPerformanceRecursive3']


class DrivingRecordIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    driver: Union[bool, 'DriverArgsFromDriverPerformanceRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromDriverPerformanceRecursive4']


class DrivingRecordIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class DrivingRecordArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyDrivingRecordArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverPerformanceRecursive1']


class ERPSyncConfigIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverPerformanceRecursive2']


class ERPSyncConfigIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverPerformanceRecursive3']


class ERPSyncConfigIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDriverPerformanceRecursive4']


class ERPSyncConfigIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class ERPSyncConfigArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyERPSyncConfigArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    config: Union[bool, 'ERPSyncConfigArgsFromDriverPerformanceRecursive1']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive1']


class ERPSyncLogIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    config: Union[bool, 'ERPSyncConfigArgsFromDriverPerformanceRecursive2']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive2']


class ERPSyncLogIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    config: Union[bool, 'ERPSyncConfigArgsFromDriverPerformanceRecursive3']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive3']


class ERPSyncLogIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    config: Union[bool, 'ERPSyncConfigArgsFromDriverPerformanceRecursive4']
    organization: Union[bool, 'OrganizationArgsFromDriverPerformanceRecursive4']


class ERPSyncLogIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class ERPSyncLogArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyERPSyncLogArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    technician: Union[bool, 'UserArgsFromDriverPerformanceRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDriverPerformanceRecursive1']


class RepairIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    technician: Union[bool, 'UserArgsFromDriverPerformanceRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDriverPerformanceRecursive2']


class RepairIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    technician: Union[bool, 'UserArgsFromDriverPerformanceRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDriverPerformanceRecursive3']


class RepairIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    technician: Union[bool, 'UserArgsFromDriverPerformanceRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDriverPerformanceRecursive4']


class RepairIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class RepairArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyRepairArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromDriverPerformance(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    repair: Union[bool, 'RepairArgsFromDriverPerformanceRecursive1']
    technician: Union[bool, 'UserArgsFromDriverPerformanceRecursive1']


class StatusHistoryIncludeFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    repair: Union[bool, 'RepairArgsFromDriverPerformanceRecursive2']
    technician: Union[bool, 'UserArgsFromDriverPerformanceRecursive2']


class StatusHistoryIncludeFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    repair: Union[bool, 'RepairArgsFromDriverPerformanceRecursive3']
    technician: Union[bool, 'UserArgsFromDriverPerformanceRecursive3']


class StatusHistoryIncludeFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""
    repair: Union[bool, 'RepairArgsFromDriverPerformanceRecursive4']
    technician: Union[bool, 'UserArgsFromDriverPerformanceRecursive4']


class StatusHistoryIncludeFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Relational arguments for DriverPerformance"""

    

class StatusHistoryArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    
    

class FindManyStatusHistoryArgsFromDriverPerformance(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromDriverPerformanceRecursive1(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromDriverPerformanceRecursive2(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromDriverPerformanceRecursive3(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromDriverPerformanceRecursive4(TypedDict, total=False):
    """Arguments for DriverPerformance"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyDriverPerformanceArgs = FindManyDriverPerformanceArgsFromDriverPerformance
FindFirstDriverPerformanceArgs = FindManyDriverPerformanceArgsFromDriverPerformance


    

class DriverPerformanceWhereInput(TypedDict, total=False):
    """DriverPerformance arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    driverId: Union[_str, 'types.StringFilter']
    driver: 'DriverRelationFilter'
    periodStart: Union[datetime.datetime, 'types.DateTimeFilter']
    periodEnd: Union[datetime.datetime, 'types.DateTimeFilter']
    totalDistance: Union[_float, 'types.FloatFilter']
    avgSpeed: Union[None, _float, 'types.FloatFilter']
    maxSpeed: Union[None, _float, 'types.FloatFilter']
    hardBrakeCount: Union[None, _int, 'types.IntFilter']
    hardAccelerationCount: Union[None, _int, 'types.IntFilter']
    idlingDuration: Union[None, _int, 'types.IntFilter']
    fuelConsumption: Union[None, _float, 'types.FloatFilter']
    avgFuelEfficiency: Union[None, _float, 'types.FloatFilter']
    co2Emission: Union[None, _float, 'types.FloatFilter']
    safetyScore: Union[None, _int, 'types.IntFilter']
    ecoScore: Union[None, _int, 'types.IntFilter']
    overallScore: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DriverPerformanceWhereInputRecursive1', List['DriverPerformanceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DriverPerformanceWhereInputRecursive1']
    OR: List['DriverPerformanceWhereInputRecursive1']
    NOT: List['DriverPerformanceWhereInputRecursive1']


class DriverPerformanceWhereInputRecursive1(TypedDict, total=False):
    """DriverPerformance arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    driverId: Union[_str, 'types.StringFilter']
    driver: 'DriverRelationFilter'
    periodStart: Union[datetime.datetime, 'types.DateTimeFilter']
    periodEnd: Union[datetime.datetime, 'types.DateTimeFilter']
    totalDistance: Union[_float, 'types.FloatFilter']
    avgSpeed: Union[None, _float, 'types.FloatFilter']
    maxSpeed: Union[None, _float, 'types.FloatFilter']
    hardBrakeCount: Union[None, _int, 'types.IntFilter']
    hardAccelerationCount: Union[None, _int, 'types.IntFilter']
    idlingDuration: Union[None, _int, 'types.IntFilter']
    fuelConsumption: Union[None, _float, 'types.FloatFilter']
    avgFuelEfficiency: Union[None, _float, 'types.FloatFilter']
    co2Emission: Union[None, _float, 'types.FloatFilter']
    safetyScore: Union[None, _int, 'types.IntFilter']
    ecoScore: Union[None, _int, 'types.IntFilter']
    overallScore: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DriverPerformanceWhereInputRecursive2', List['DriverPerformanceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DriverPerformanceWhereInputRecursive2']
    OR: List['DriverPerformanceWhereInputRecursive2']
    NOT: List['DriverPerformanceWhereInputRecursive2']


class DriverPerformanceWhereInputRecursive2(TypedDict, total=False):
    """DriverPerformance arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    driverId: Union[_str, 'types.StringFilter']
    driver: 'DriverRelationFilter'
    periodStart: Union[datetime.datetime, 'types.DateTimeFilter']
    periodEnd: Union[datetime.datetime, 'types.DateTimeFilter']
    totalDistance: Union[_float, 'types.FloatFilter']
    avgSpeed: Union[None, _float, 'types.FloatFilter']
    maxSpeed: Union[None, _float, 'types.FloatFilter']
    hardBrakeCount: Union[None, _int, 'types.IntFilter']
    hardAccelerationCount: Union[None, _int, 'types.IntFilter']
    idlingDuration: Union[None, _int, 'types.IntFilter']
    fuelConsumption: Union[None, _float, 'types.FloatFilter']
    avgFuelEfficiency: Union[None, _float, 'types.FloatFilter']
    co2Emission: Union[None, _float, 'types.FloatFilter']
    safetyScore: Union[None, _int, 'types.IntFilter']
    ecoScore: Union[None, _int, 'types.IntFilter']
    overallScore: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DriverPerformanceWhereInputRecursive3', List['DriverPerformanceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DriverPerformanceWhereInputRecursive3']
    OR: List['DriverPerformanceWhereInputRecursive3']
    NOT: List['DriverPerformanceWhereInputRecursive3']


class DriverPerformanceWhereInputRecursive3(TypedDict, total=False):
    """DriverPerformance arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    driverId: Union[_str, 'types.StringFilter']
    driver: 'DriverRelationFilter'
    periodStart: Union[datetime.datetime, 'types.DateTimeFilter']
    periodEnd: Union[datetime.datetime, 'types.DateTimeFilter']
    totalDistance: Union[_float, 'types.FloatFilter']
    avgSpeed: Union[None, _float, 'types.FloatFilter']
    maxSpeed: Union[None, _float, 'types.FloatFilter']
    hardBrakeCount: Union[None, _int, 'types.IntFilter']
    hardAccelerationCount: Union[None, _int, 'types.IntFilter']
    idlingDuration: Union[None, _int, 'types.IntFilter']
    fuelConsumption: Union[None, _float, 'types.FloatFilter']
    avgFuelEfficiency: Union[None, _float, 'types.FloatFilter']
    co2Emission: Union[None, _float, 'types.FloatFilter']
    safetyScore: Union[None, _int, 'types.IntFilter']
    ecoScore: Union[None, _int, 'types.IntFilter']
    overallScore: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DriverPerformanceWhereInputRecursive4', List['DriverPerformanceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DriverPerformanceWhereInputRecursive4']
    OR: List['DriverPerformanceWhereInputRecursive4']
    NOT: List['DriverPerformanceWhereInputRecursive4']


class DriverPerformanceWhereInputRecursive4(TypedDict, total=False):
    """DriverPerformance arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    driverId: Union[_str, 'types.StringFilter']
    driver: 'DriverRelationFilter'
    periodStart: Union[datetime.datetime, 'types.DateTimeFilter']
    periodEnd: Union[datetime.datetime, 'types.DateTimeFilter']
    totalDistance: Union[_float, 'types.FloatFilter']
    avgSpeed: Union[None, _float, 'types.FloatFilter']
    maxSpeed: Union[None, _float, 'types.FloatFilter']
    hardBrakeCount: Union[None, _int, 'types.IntFilter']
    hardAccelerationCount: Union[None, _int, 'types.IntFilter']
    idlingDuration: Union[None, _int, 'types.IntFilter']
    fuelConsumption: Union[None, _float, 'types.FloatFilter']
    avgFuelEfficiency: Union[None, _float, 'types.FloatFilter']
    co2Emission: Union[None, _float, 'types.FloatFilter']
    safetyScore: Union[None, _int, 'types.IntFilter']
    ecoScore: Union[None, _int, 'types.IntFilter']
    overallScore: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate DriverPerformance types


    

class DriverPerformanceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """DriverPerformance arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    periodStart: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    periodEnd: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    totalDistance: Union[_float, 'types.FloatWithAggregatesFilter']
    avgSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    hardBrakeCount: Union[_int, 'types.IntWithAggregatesFilter']
    hardAccelerationCount: Union[_int, 'types.IntWithAggregatesFilter']
    idlingDuration: Union[_int, 'types.IntWithAggregatesFilter']
    fuelConsumption: Union[_float, 'types.FloatWithAggregatesFilter']
    avgFuelEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    co2Emission: Union[_float, 'types.FloatWithAggregatesFilter']
    safetyScore: Union[_int, 'types.IntWithAggregatesFilter']
    ecoScore: Union[_int, 'types.IntWithAggregatesFilter']
    overallScore: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive1']
    OR: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive1']


class DriverPerformanceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """DriverPerformance arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    periodStart: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    periodEnd: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    totalDistance: Union[_float, 'types.FloatWithAggregatesFilter']
    avgSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    hardBrakeCount: Union[_int, 'types.IntWithAggregatesFilter']
    hardAccelerationCount: Union[_int, 'types.IntWithAggregatesFilter']
    idlingDuration: Union[_int, 'types.IntWithAggregatesFilter']
    fuelConsumption: Union[_float, 'types.FloatWithAggregatesFilter']
    avgFuelEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    co2Emission: Union[_float, 'types.FloatWithAggregatesFilter']
    safetyScore: Union[_int, 'types.IntWithAggregatesFilter']
    ecoScore: Union[_int, 'types.IntWithAggregatesFilter']
    overallScore: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive2']
    OR: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive2']


class DriverPerformanceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """DriverPerformance arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    periodStart: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    periodEnd: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    totalDistance: Union[_float, 'types.FloatWithAggregatesFilter']
    avgSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    hardBrakeCount: Union[_int, 'types.IntWithAggregatesFilter']
    hardAccelerationCount: Union[_int, 'types.IntWithAggregatesFilter']
    idlingDuration: Union[_int, 'types.IntWithAggregatesFilter']
    fuelConsumption: Union[_float, 'types.FloatWithAggregatesFilter']
    avgFuelEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    co2Emission: Union[_float, 'types.FloatWithAggregatesFilter']
    safetyScore: Union[_int, 'types.IntWithAggregatesFilter']
    ecoScore: Union[_int, 'types.IntWithAggregatesFilter']
    overallScore: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive3']
    OR: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive3']


class DriverPerformanceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """DriverPerformance arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    periodStart: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    periodEnd: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    totalDistance: Union[_float, 'types.FloatWithAggregatesFilter']
    avgSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    hardBrakeCount: Union[_int, 'types.IntWithAggregatesFilter']
    hardAccelerationCount: Union[_int, 'types.IntWithAggregatesFilter']
    idlingDuration: Union[_int, 'types.IntWithAggregatesFilter']
    fuelConsumption: Union[_float, 'types.FloatWithAggregatesFilter']
    avgFuelEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    co2Emission: Union[_float, 'types.FloatWithAggregatesFilter']
    safetyScore: Union[_int, 'types.IntWithAggregatesFilter']
    ecoScore: Union[_int, 'types.IntWithAggregatesFilter']
    overallScore: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive4']
    OR: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DriverPerformanceScalarWhereWithAggregatesInputRecursive4']


class DriverPerformanceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """DriverPerformance arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    periodStart: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    periodEnd: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    totalDistance: Union[_float, 'types.FloatWithAggregatesFilter']
    avgSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    hardBrakeCount: Union[_int, 'types.IntWithAggregatesFilter']
    hardAccelerationCount: Union[_int, 'types.IntWithAggregatesFilter']
    idlingDuration: Union[_int, 'types.IntWithAggregatesFilter']
    fuelConsumption: Union[_float, 'types.FloatWithAggregatesFilter']
    avgFuelEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    co2Emission: Union[_float, 'types.FloatWithAggregatesFilter']
    safetyScore: Union[_int, 'types.IntWithAggregatesFilter']
    ecoScore: Union[_int, 'types.IntWithAggregatesFilter']
    overallScore: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class DriverPerformanceGroupByOutput(TypedDict, total=False):
    id: _str
    driverId: _str
    periodStart: datetime.datetime
    periodEnd: datetime.datetime
    totalDistance: _float
    avgSpeed: _float
    maxSpeed: _float
    hardBrakeCount: _int
    hardAccelerationCount: _int
    idlingDuration: _int
    fuelConsumption: _float
    avgFuelEfficiency: _float
    co2Emission: _float
    safetyScore: _int
    ecoScore: _int
    overallScore: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'DriverPerformanceSumAggregateOutput'
    _avg: 'DriverPerformanceAvgAggregateOutput'
    _min: 'DriverPerformanceMinAggregateOutput'
    _max: 'DriverPerformanceMaxAggregateOutput'
    _count: 'DriverPerformanceCountAggregateOutput'


class DriverPerformanceAvgAggregateOutput(TypedDict, total=False):
    """DriverPerformance output for aggregating averages"""
    totalDistance: float
    avgSpeed: float
    maxSpeed: float
    hardBrakeCount: float
    hardAccelerationCount: float
    idlingDuration: float
    fuelConsumption: float
    avgFuelEfficiency: float
    co2Emission: float
    safetyScore: float
    ecoScore: float
    overallScore: float


class DriverPerformanceSumAggregateOutput(TypedDict, total=False):
    """DriverPerformance output for aggregating sums"""
    totalDistance: _float
    avgSpeed: _float
    maxSpeed: _float
    hardBrakeCount: _int
    hardAccelerationCount: _int
    idlingDuration: _int
    fuelConsumption: _float
    avgFuelEfficiency: _float
    co2Emission: _float
    safetyScore: _int
    ecoScore: _int
    overallScore: _int


class DriverPerformanceScalarAggregateOutput(TypedDict, total=False):
    """DriverPerformance output including scalar fields"""
    id: _str
    driverId: _str
    periodStart: datetime.datetime
    periodEnd: datetime.datetime
    totalDistance: _float
    avgSpeed: _float
    maxSpeed: _float
    hardBrakeCount: _int
    hardAccelerationCount: _int
    idlingDuration: _int
    fuelConsumption: _float
    avgFuelEfficiency: _float
    co2Emission: _float
    safetyScore: _int
    ecoScore: _int
    overallScore: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


DriverPerformanceMinAggregateOutput = DriverPerformanceScalarAggregateOutput
DriverPerformanceMaxAggregateOutput = DriverPerformanceScalarAggregateOutput


class DriverPerformanceMaxAggregateInput(TypedDict, total=False):
    """DriverPerformance input for aggregating by max"""
    id: bool
    driverId: bool
    periodStart: bool
    periodEnd: bool
    totalDistance: bool
    avgSpeed: bool
    maxSpeed: bool
    hardBrakeCount: bool
    hardAccelerationCount: bool
    idlingDuration: bool
    fuelConsumption: bool
    avgFuelEfficiency: bool
    co2Emission: bool
    safetyScore: bool
    ecoScore: bool
    overallScore: bool
    createdAt: bool
    updatedAt: bool


class DriverPerformanceMinAggregateInput(TypedDict, total=False):
    """DriverPerformance input for aggregating by min"""
    id: bool
    driverId: bool
    periodStart: bool
    periodEnd: bool
    totalDistance: bool
    avgSpeed: bool
    maxSpeed: bool
    hardBrakeCount: bool
    hardAccelerationCount: bool
    idlingDuration: bool
    fuelConsumption: bool
    avgFuelEfficiency: bool
    co2Emission: bool
    safetyScore: bool
    ecoScore: bool
    overallScore: bool
    createdAt: bool
    updatedAt: bool


class DriverPerformanceNumberAggregateInput(TypedDict, total=False):
    """DriverPerformance input for aggregating numbers"""
    totalDistance: bool
    avgSpeed: bool
    maxSpeed: bool
    hardBrakeCount: bool
    hardAccelerationCount: bool
    idlingDuration: bool
    fuelConsumption: bool
    avgFuelEfficiency: bool
    co2Emission: bool
    safetyScore: bool
    ecoScore: bool
    overallScore: bool


DriverPerformanceAvgAggregateInput = DriverPerformanceNumberAggregateInput
DriverPerformanceSumAggregateInput = DriverPerformanceNumberAggregateInput


DriverPerformanceCountAggregateInput = TypedDict(
    'DriverPerformanceCountAggregateInput',
    {
        'id': bool,
        'driverId': bool,
        'periodStart': bool,
        'periodEnd': bool,
        'totalDistance': bool,
        'avgSpeed': bool,
        'maxSpeed': bool,
        'hardBrakeCount': bool,
        'hardAccelerationCount': bool,
        'idlingDuration': bool,
        'fuelConsumption': bool,
        'avgFuelEfficiency': bool,
        'co2Emission': bool,
        'safetyScore': bool,
        'ecoScore': bool,
        'overallScore': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

DriverPerformanceCountAggregateOutput = TypedDict(
    'DriverPerformanceCountAggregateOutput',
    {
        'id': int,
        'driverId': int,
        'periodStart': int,
        'periodEnd': int,
        'totalDistance': int,
        'avgSpeed': int,
        'maxSpeed': int,
        'hardBrakeCount': int,
        'hardAccelerationCount': int,
        'idlingDuration': int,
        'fuelConsumption': int,
        'avgFuelEfficiency': int,
        'co2Emission': int,
        'safetyScore': int,
        'ecoScore': int,
        'overallScore': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


DriverPerformanceKeys = Literal[
    'id',
    'driverId',
    'driver',
    'periodStart',
    'periodEnd',
    'totalDistance',
    'avgSpeed',
    'maxSpeed',
    'hardBrakeCount',
    'hardAccelerationCount',
    'idlingDuration',
    'fuelConsumption',
    'avgFuelEfficiency',
    'co2Emission',
    'safetyScore',
    'ecoScore',
    'overallScore',
    'createdAt',
    'updatedAt',
]
DriverPerformanceScalarFieldKeys = Literal[
    'id',
    'driverId',
    'periodStart',
    'periodEnd',
    'totalDistance',
    'avgSpeed',
    'maxSpeed',
    'hardBrakeCount',
    'hardAccelerationCount',
    'idlingDuration',
    'fuelConsumption',
    'avgFuelEfficiency',
    'co2Emission',
    'safetyScore',
    'ecoScore',
    'overallScore',
    'createdAt',
    'updatedAt',
]
DriverPerformanceScalarFieldKeysT = TypeVar('DriverPerformanceScalarFieldKeysT', bound=DriverPerformanceScalarFieldKeys)

DriverPerformanceRelationalFieldKeys = Literal[
        'driver',
    ]

# DrivingRecord types

class DrivingRecordOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the DrivingRecord create method"""
    id: _str
    driverId: _str
    driver: 'DriverCreateNestedWithoutRelationsInput'
    vehicleId: _str
    vehicle: 'VehicleCreateNestedWithoutRelationsInput'
    startLocation: Optional[_str]
    endLocation: Optional[_str]
    avgSpeed: Optional[_float]
    maxSpeed: Optional[_float]
    fuelConsumption: Optional[_float]
    hardBrakeCount: Optional[_int]
    hardAccelCount: Optional[_int]
    idlingDuration: Optional[_int]
    routeData: Optional['fields.Json']
    notes: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class DrivingRecordCreateInput(DrivingRecordOptionalCreateInput):
    """Required arguments to the DrivingRecord create method"""
    startTime: datetime.datetime
    endTime: datetime.datetime
    distance: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DrivingRecordOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the DrivingRecord create method, without relations"""
    id: _str
    driverId: _str
    vehicleId: _str
    startLocation: Optional[_str]
    endLocation: Optional[_str]
    avgSpeed: Optional[_float]
    maxSpeed: Optional[_float]
    fuelConsumption: Optional[_float]
    hardBrakeCount: Optional[_int]
    hardAccelCount: Optional[_int]
    idlingDuration: Optional[_int]
    routeData: Optional['fields.Json']
    notes: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class DrivingRecordCreateWithoutRelationsInput(DrivingRecordOptionalCreateWithoutRelationsInput):
    """Required arguments to the DrivingRecord create method, without relations"""
    startTime: datetime.datetime
    endTime: datetime.datetime
    distance: _float

class DrivingRecordConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'DrivingRecordCreateWithoutRelationsInput'
    where: 'DrivingRecordWhereUniqueInput'

class DrivingRecordCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DrivingRecordCreateWithoutRelationsInput'
    connect: 'DrivingRecordWhereUniqueInput'
    connect_or_create: 'DrivingRecordConnectOrCreateWithoutRelationsInput'


class DrivingRecordCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DrivingRecordCreateWithoutRelationsInput', List['DrivingRecordCreateWithoutRelationsInput']]
    connect: Union['DrivingRecordWhereUniqueInput', List['DrivingRecordWhereUniqueInput']]
    connect_or_create: Union['DrivingRecordConnectOrCreateWithoutRelationsInput', List['DrivingRecordConnectOrCreateWithoutRelationsInput']]

_DrivingRecordWhereUnique_id_Input = TypedDict(
    '_DrivingRecordWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

DrivingRecordWhereUniqueInput = _DrivingRecordWhereUnique_id_Input


class DrivingRecordUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    driver: 'DriverUpdateOneWithoutRelationsInput'
    vehicle: 'VehicleUpdateOneWithoutRelationsInput'
    startTime: datetime.datetime
    endTime: datetime.datetime
    startLocation: Optional[_str]
    endLocation: Optional[_str]
    distance: Union[AtomicFloatInput, _float]
    avgSpeed: Optional[Union[AtomicFloatInput, _float]]
    maxSpeed: Optional[Union[AtomicFloatInput, _float]]
    fuelConsumption: Optional[Union[AtomicFloatInput, _float]]
    hardBrakeCount: Optional[Union[AtomicIntInput, _int]]
    hardAccelCount: Optional[Union[AtomicIntInput, _int]]
    idlingDuration: Optional[Union[AtomicIntInput, _int]]
    routeData: Optional['fields.Json']
    notes: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class DrivingRecordUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    startTime: datetime.datetime
    endTime: datetime.datetime
    startLocation: Optional[_str]
    endLocation: Optional[_str]
    distance: Union[AtomicFloatInput, _float]
    avgSpeed: Optional[Union[AtomicFloatInput, _float]]
    maxSpeed: Optional[Union[AtomicFloatInput, _float]]
    fuelConsumption: Optional[Union[AtomicFloatInput, _float]]
    hardBrakeCount: Optional[Union[AtomicIntInput, _int]]
    hardAccelCount: Optional[Union[AtomicIntInput, _int]]
    idlingDuration: Optional[Union[AtomicIntInput, _int]]
    routeData: Optional['fields.Json']
    notes: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class DrivingRecordUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DrivingRecordCreateWithoutRelationsInput']
    connect: List['DrivingRecordWhereUniqueInput']
    connect_or_create: List['DrivingRecordConnectOrCreateWithoutRelationsInput']
    set: List['DrivingRecordWhereUniqueInput']
    disconnect: List['DrivingRecordWhereUniqueInput']
    delete: List['DrivingRecordWhereUniqueInput']

    # TODO
    # update: List['DrivingRecordUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DrivingRecordUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DrivingRecordScalarWhereInput']
    # upsert: List['DrivingRecordUpserteWithWhereUniqueWithoutRelationsInput']


class DrivingRecordUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DrivingRecordCreateWithoutRelationsInput'
    connect: 'DrivingRecordWhereUniqueInput'
    connect_or_create: 'DrivingRecordConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DrivingRecordUpdateInput'
    # upsert: 'DrivingRecordUpsertWithoutRelationsInput'


class DrivingRecordUpsertInput(TypedDict):
    create: 'DrivingRecordCreateInput'
    update: 'DrivingRecordUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_DrivingRecord_id_OrderByInput = TypedDict(
    '_DrivingRecord_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_DrivingRecord_driverId_OrderByInput = TypedDict(
    '_DrivingRecord_driverId_OrderByInput',
    {
        'driverId': 'SortOrder',
    },
    total=True
)

_DrivingRecord_vehicleId_OrderByInput = TypedDict(
    '_DrivingRecord_vehicleId_OrderByInput',
    {
        'vehicleId': 'SortOrder',
    },
    total=True
)

_DrivingRecord_startTime_OrderByInput = TypedDict(
    '_DrivingRecord_startTime_OrderByInput',
    {
        'startTime': 'SortOrder',
    },
    total=True
)

_DrivingRecord_endTime_OrderByInput = TypedDict(
    '_DrivingRecord_endTime_OrderByInput',
    {
        'endTime': 'SortOrder',
    },
    total=True
)

_DrivingRecord_startLocation_OrderByInput = TypedDict(
    '_DrivingRecord_startLocation_OrderByInput',
    {
        'startLocation': 'SortOrder',
    },
    total=True
)

_DrivingRecord_endLocation_OrderByInput = TypedDict(
    '_DrivingRecord_endLocation_OrderByInput',
    {
        'endLocation': 'SortOrder',
    },
    total=True
)

_DrivingRecord_distance_OrderByInput = TypedDict(
    '_DrivingRecord_distance_OrderByInput',
    {
        'distance': 'SortOrder',
    },
    total=True
)

_DrivingRecord_avgSpeed_OrderByInput = TypedDict(
    '_DrivingRecord_avgSpeed_OrderByInput',
    {
        'avgSpeed': 'SortOrder',
    },
    total=True
)

_DrivingRecord_maxSpeed_OrderByInput = TypedDict(
    '_DrivingRecord_maxSpeed_OrderByInput',
    {
        'maxSpeed': 'SortOrder',
    },
    total=True
)

_DrivingRecord_fuelConsumption_OrderByInput = TypedDict(
    '_DrivingRecord_fuelConsumption_OrderByInput',
    {
        'fuelConsumption': 'SortOrder',
    },
    total=True
)

_DrivingRecord_hardBrakeCount_OrderByInput = TypedDict(
    '_DrivingRecord_hardBrakeCount_OrderByInput',
    {
        'hardBrakeCount': 'SortOrder',
    },
    total=True
)

_DrivingRecord_hardAccelCount_OrderByInput = TypedDict(
    '_DrivingRecord_hardAccelCount_OrderByInput',
    {
        'hardAccelCount': 'SortOrder',
    },
    total=True
)

_DrivingRecord_idlingDuration_OrderByInput = TypedDict(
    '_DrivingRecord_idlingDuration_OrderByInput',
    {
        'idlingDuration': 'SortOrder',
    },
    total=True
)

_DrivingRecord_routeData_OrderByInput = TypedDict(
    '_DrivingRecord_routeData_OrderByInput',
    {
        'routeData': 'SortOrder',
    },
    total=True
)

_DrivingRecord_notes_OrderByInput = TypedDict(
    '_DrivingRecord_notes_OrderByInput',
    {
        'notes': 'SortOrder',
    },
    total=True
)

_DrivingRecord_createdAt_OrderByInput = TypedDict(
    '_DrivingRecord_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_DrivingRecord_updatedAt_OrderByInput = TypedDict(
    '_DrivingRecord_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_DrivingRecord_RelevanceInner = TypedDict(
    '_DrivingRecord_RelevanceInner',
    {
        'fields': 'List[DrivingRecordScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_DrivingRecord_RelevanceOrderByInput = TypedDict(
    '_DrivingRecord_RelevanceOrderByInput',
    {
        '_relevance': '_DrivingRecord_RelevanceInner',
    },
    total=True
)

DrivingRecordOrderByInput = Union[
    '_DrivingRecord_id_OrderByInput',
    '_DrivingRecord_driverId_OrderByInput',
    '_DrivingRecord_vehicleId_OrderByInput',
    '_DrivingRecord_startTime_OrderByInput',
    '_DrivingRecord_endTime_OrderByInput',
    '_DrivingRecord_startLocation_OrderByInput',
    '_DrivingRecord_endLocation_OrderByInput',
    '_DrivingRecord_distance_OrderByInput',
    '_DrivingRecord_avgSpeed_OrderByInput',
    '_DrivingRecord_maxSpeed_OrderByInput',
    '_DrivingRecord_fuelConsumption_OrderByInput',
    '_DrivingRecord_hardBrakeCount_OrderByInput',
    '_DrivingRecord_hardAccelCount_OrderByInput',
    '_DrivingRecord_idlingDuration_OrderByInput',
    '_DrivingRecord_routeData_OrderByInput',
    '_DrivingRecord_notes_OrderByInput',
    '_DrivingRecord_createdAt_OrderByInput',
    '_DrivingRecord_updatedAt_OrderByInput',
    '_DrivingRecord_RelevanceOrderByInput',
]



# recursive DrivingRecord types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DrivingRecordRelationFilter = TypedDict(
    'DrivingRecordRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DrivingRecordListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DrivingRecordInclude(TypedDict, total=False):
    """DrivingRecord relational arguments"""
    driver: Union[bool, 'DriverArgsFromDrivingRecord']
    vehicle: Union[bool, 'VehicleArgsFromDrivingRecord']


    

class UserIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDrivingRecordRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDrivingRecordRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromDrivingRecordRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDrivingRecordRecursive1']


class UserIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDrivingRecordRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDrivingRecordRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromDrivingRecordRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDrivingRecordRecursive2']


class UserIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDrivingRecordRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDrivingRecordRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromDrivingRecordRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDrivingRecordRecursive3']


class UserIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromDrivingRecordRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromDrivingRecordRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromDrivingRecordRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromDrivingRecordRecursive4']


class UserIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class UserArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyUserArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDrivingRecordRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDrivingRecordRecursive1']


class PermissionIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDrivingRecordRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDrivingRecordRecursive2']


class PermissionIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDrivingRecordRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDrivingRecordRecursive3']


class PermissionIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromDrivingRecordRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromDrivingRecordRecursive4']


class PermissionIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class PermissionArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyPermissionArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    user: Union[bool, 'UserArgsFromDrivingRecordRecursive1']
    permission: Union[bool, 'PermissionArgsFromDrivingRecordRecursive1']


class UserPermissionIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    user: Union[bool, 'UserArgsFromDrivingRecordRecursive2']
    permission: Union[bool, 'PermissionArgsFromDrivingRecordRecursive2']


class UserPermissionIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    user: Union[bool, 'UserArgsFromDrivingRecordRecursive3']
    permission: Union[bool, 'PermissionArgsFromDrivingRecordRecursive3']


class UserPermissionIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    user: Union[bool, 'UserArgsFromDrivingRecordRecursive4']
    permission: Union[bool, 'PermissionArgsFromDrivingRecordRecursive4']


class UserPermissionIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class UserPermissionArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyUserPermissionArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    permission: Union[bool, 'PermissionArgsFromDrivingRecordRecursive1']


class RolePermissionIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    permission: Union[bool, 'PermissionArgsFromDrivingRecordRecursive2']


class RolePermissionIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    permission: Union[bool, 'PermissionArgsFromDrivingRecordRecursive3']


class RolePermissionIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    permission: Union[bool, 'PermissionArgsFromDrivingRecordRecursive4']


class RolePermissionIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class RolePermissionArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyRolePermissionArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDrivingRecordRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromDrivingRecordRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDrivingRecordRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDrivingRecordRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDrivingRecordRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDrivingRecordRecursive1']


class OrganizationIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDrivingRecordRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromDrivingRecordRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDrivingRecordRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDrivingRecordRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDrivingRecordRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDrivingRecordRecursive2']


class OrganizationIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDrivingRecordRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromDrivingRecordRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDrivingRecordRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDrivingRecordRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDrivingRecordRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDrivingRecordRecursive3']


class OrganizationIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromDrivingRecordRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromDrivingRecordRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromDrivingRecordRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDrivingRecordRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromDrivingRecordRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDrivingRecordRecursive4']


class OrganizationIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class OrganizationArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyOrganizationArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    user: Union[bool, 'UserArgsFromDrivingRecordRecursive1']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive1']


class OrganizationMemberIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    user: Union[bool, 'UserArgsFromDrivingRecordRecursive2']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive2']


class OrganizationMemberIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    user: Union[bool, 'UserArgsFromDrivingRecordRecursive3']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive3']


class OrganizationMemberIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    user: Union[bool, 'UserArgsFromDrivingRecordRecursive4']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive4']


class OrganizationMemberIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class OrganizationMemberArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyOrganizationMemberArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDrivingRecordRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDrivingRecordRecursive1']


class DriverIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDrivingRecordRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDrivingRecordRecursive2']


class DriverIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDrivingRecordRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDrivingRecordRecursive3']


class DriverIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromDrivingRecordRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDrivingRecordRecursive4']


class DriverIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class DriverArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyDriverArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDrivingRecordRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDrivingRecordRecursive1']


class VehicleIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDrivingRecordRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDrivingRecordRecursive2']


class VehicleIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDrivingRecordRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDrivingRecordRecursive3']


class VehicleIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromDrivingRecordRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromDrivingRecordRecursive4']


class VehicleIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class VehicleArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyVehicleArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    vehicle: Union[bool, 'VehicleArgsFromDrivingRecordRecursive1']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDrivingRecordRecursive1']


class MaintenanceIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    vehicle: Union[bool, 'VehicleArgsFromDrivingRecordRecursive2']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDrivingRecordRecursive2']


class MaintenanceIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    vehicle: Union[bool, 'VehicleArgsFromDrivingRecordRecursive3']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDrivingRecordRecursive3']


class MaintenanceIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    vehicle: Union[bool, 'VehicleArgsFromDrivingRecordRecursive4']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromDrivingRecordRecursive4']


class MaintenanceIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class MaintenanceArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyMaintenanceArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    maintenance: Union[bool, 'MaintenanceArgsFromDrivingRecordRecursive1']


class MaintenancePartIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    maintenance: Union[bool, 'MaintenanceArgsFromDrivingRecordRecursive2']


class MaintenancePartIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    maintenance: Union[bool, 'MaintenanceArgsFromDrivingRecordRecursive3']


class MaintenancePartIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    maintenance: Union[bool, 'MaintenanceArgsFromDrivingRecordRecursive4']


class MaintenancePartIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class MaintenancePartArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyMaintenancePartArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    driver: Union[bool, 'DriverArgsFromDrivingRecordRecursive1']


class DriverPerformanceIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    driver: Union[bool, 'DriverArgsFromDrivingRecordRecursive2']


class DriverPerformanceIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    driver: Union[bool, 'DriverArgsFromDrivingRecordRecursive3']


class DriverPerformanceIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    driver: Union[bool, 'DriverArgsFromDrivingRecordRecursive4']


class DriverPerformanceIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class DriverPerformanceArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyDriverPerformanceArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    driver: Union[bool, 'DriverArgsFromDrivingRecordRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromDrivingRecordRecursive1']


class DrivingRecordIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    driver: Union[bool, 'DriverArgsFromDrivingRecordRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromDrivingRecordRecursive2']


class DrivingRecordIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    driver: Union[bool, 'DriverArgsFromDrivingRecordRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromDrivingRecordRecursive3']


class DrivingRecordIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    driver: Union[bool, 'DriverArgsFromDrivingRecordRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromDrivingRecordRecursive4']


class DrivingRecordIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class DrivingRecordArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyDrivingRecordArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDrivingRecordRecursive1']


class ERPSyncConfigIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDrivingRecordRecursive2']


class ERPSyncConfigIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDrivingRecordRecursive3']


class ERPSyncConfigIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromDrivingRecordRecursive4']


class ERPSyncConfigIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class ERPSyncConfigArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyERPSyncConfigArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    config: Union[bool, 'ERPSyncConfigArgsFromDrivingRecordRecursive1']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive1']


class ERPSyncLogIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    config: Union[bool, 'ERPSyncConfigArgsFromDrivingRecordRecursive2']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive2']


class ERPSyncLogIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    config: Union[bool, 'ERPSyncConfigArgsFromDrivingRecordRecursive3']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive3']


class ERPSyncLogIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    config: Union[bool, 'ERPSyncConfigArgsFromDrivingRecordRecursive4']
    organization: Union[bool, 'OrganizationArgsFromDrivingRecordRecursive4']


class ERPSyncLogIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class ERPSyncLogArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyERPSyncLogArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    technician: Union[bool, 'UserArgsFromDrivingRecordRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDrivingRecordRecursive1']


class RepairIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    technician: Union[bool, 'UserArgsFromDrivingRecordRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDrivingRecordRecursive2']


class RepairIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    technician: Union[bool, 'UserArgsFromDrivingRecordRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDrivingRecordRecursive3']


class RepairIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    technician: Union[bool, 'UserArgsFromDrivingRecordRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromDrivingRecordRecursive4']


class RepairIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class RepairArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyRepairArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromDrivingRecord(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    repair: Union[bool, 'RepairArgsFromDrivingRecordRecursive1']
    technician: Union[bool, 'UserArgsFromDrivingRecordRecursive1']


class StatusHistoryIncludeFromDrivingRecordRecursive1(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    repair: Union[bool, 'RepairArgsFromDrivingRecordRecursive2']
    technician: Union[bool, 'UserArgsFromDrivingRecordRecursive2']


class StatusHistoryIncludeFromDrivingRecordRecursive2(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    repair: Union[bool, 'RepairArgsFromDrivingRecordRecursive3']
    technician: Union[bool, 'UserArgsFromDrivingRecordRecursive3']


class StatusHistoryIncludeFromDrivingRecordRecursive3(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""
    repair: Union[bool, 'RepairArgsFromDrivingRecordRecursive4']
    technician: Union[bool, 'UserArgsFromDrivingRecordRecursive4']


class StatusHistoryIncludeFromDrivingRecordRecursive4(TypedDict, total=False):
    """Relational arguments for DrivingRecord"""

    

class StatusHistoryArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    
    

class FindManyStatusHistoryArgsFromDrivingRecord(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromDrivingRecordRecursive1(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromDrivingRecordRecursive2(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromDrivingRecordRecursive3(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromDrivingRecordRecursive4(TypedDict, total=False):
    """Arguments for DrivingRecord"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyDrivingRecordArgs = FindManyDrivingRecordArgsFromDrivingRecord
FindFirstDrivingRecordArgs = FindManyDrivingRecordArgsFromDrivingRecord


    

class DrivingRecordWhereInput(TypedDict, total=False):
    """DrivingRecord arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    driverId: Union[_str, 'types.StringFilter']
    driver: 'DriverRelationFilter'
    vehicleId: Union[_str, 'types.StringFilter']
    vehicle: 'VehicleRelationFilter'
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeFilter']
    startLocation: Union[None, _str, 'types.StringFilter']
    endLocation: Union[None, _str, 'types.StringFilter']
    distance: Union[_float, 'types.FloatFilter']
    avgSpeed: Union[None, _float, 'types.FloatFilter']
    maxSpeed: Union[None, _float, 'types.FloatFilter']
    fuelConsumption: Union[None, _float, 'types.FloatFilter']
    hardBrakeCount: Union[None, _int, 'types.IntFilter']
    hardAccelCount: Union[None, _int, 'types.IntFilter']
    idlingDuration: Union[None, _int, 'types.IntFilter']
    routeData: Union[None, 'fields.Json', 'types.JsonFilter']
    notes: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DrivingRecordWhereInputRecursive1', List['DrivingRecordWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DrivingRecordWhereInputRecursive1']
    OR: List['DrivingRecordWhereInputRecursive1']
    NOT: List['DrivingRecordWhereInputRecursive1']


class DrivingRecordWhereInputRecursive1(TypedDict, total=False):
    """DrivingRecord arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    driverId: Union[_str, 'types.StringFilter']
    driver: 'DriverRelationFilter'
    vehicleId: Union[_str, 'types.StringFilter']
    vehicle: 'VehicleRelationFilter'
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeFilter']
    startLocation: Union[None, _str, 'types.StringFilter']
    endLocation: Union[None, _str, 'types.StringFilter']
    distance: Union[_float, 'types.FloatFilter']
    avgSpeed: Union[None, _float, 'types.FloatFilter']
    maxSpeed: Union[None, _float, 'types.FloatFilter']
    fuelConsumption: Union[None, _float, 'types.FloatFilter']
    hardBrakeCount: Union[None, _int, 'types.IntFilter']
    hardAccelCount: Union[None, _int, 'types.IntFilter']
    idlingDuration: Union[None, _int, 'types.IntFilter']
    routeData: Union[None, 'fields.Json', 'types.JsonFilter']
    notes: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DrivingRecordWhereInputRecursive2', List['DrivingRecordWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DrivingRecordWhereInputRecursive2']
    OR: List['DrivingRecordWhereInputRecursive2']
    NOT: List['DrivingRecordWhereInputRecursive2']


class DrivingRecordWhereInputRecursive2(TypedDict, total=False):
    """DrivingRecord arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    driverId: Union[_str, 'types.StringFilter']
    driver: 'DriverRelationFilter'
    vehicleId: Union[_str, 'types.StringFilter']
    vehicle: 'VehicleRelationFilter'
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeFilter']
    startLocation: Union[None, _str, 'types.StringFilter']
    endLocation: Union[None, _str, 'types.StringFilter']
    distance: Union[_float, 'types.FloatFilter']
    avgSpeed: Union[None, _float, 'types.FloatFilter']
    maxSpeed: Union[None, _float, 'types.FloatFilter']
    fuelConsumption: Union[None, _float, 'types.FloatFilter']
    hardBrakeCount: Union[None, _int, 'types.IntFilter']
    hardAccelCount: Union[None, _int, 'types.IntFilter']
    idlingDuration: Union[None, _int, 'types.IntFilter']
    routeData: Union[None, 'fields.Json', 'types.JsonFilter']
    notes: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DrivingRecordWhereInputRecursive3', List['DrivingRecordWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DrivingRecordWhereInputRecursive3']
    OR: List['DrivingRecordWhereInputRecursive3']
    NOT: List['DrivingRecordWhereInputRecursive3']


class DrivingRecordWhereInputRecursive3(TypedDict, total=False):
    """DrivingRecord arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    driverId: Union[_str, 'types.StringFilter']
    driver: 'DriverRelationFilter'
    vehicleId: Union[_str, 'types.StringFilter']
    vehicle: 'VehicleRelationFilter'
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeFilter']
    startLocation: Union[None, _str, 'types.StringFilter']
    endLocation: Union[None, _str, 'types.StringFilter']
    distance: Union[_float, 'types.FloatFilter']
    avgSpeed: Union[None, _float, 'types.FloatFilter']
    maxSpeed: Union[None, _float, 'types.FloatFilter']
    fuelConsumption: Union[None, _float, 'types.FloatFilter']
    hardBrakeCount: Union[None, _int, 'types.IntFilter']
    hardAccelCount: Union[None, _int, 'types.IntFilter']
    idlingDuration: Union[None, _int, 'types.IntFilter']
    routeData: Union[None, 'fields.Json', 'types.JsonFilter']
    notes: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['DrivingRecordWhereInputRecursive4', List['DrivingRecordWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DrivingRecordWhereInputRecursive4']
    OR: List['DrivingRecordWhereInputRecursive4']
    NOT: List['DrivingRecordWhereInputRecursive4']


class DrivingRecordWhereInputRecursive4(TypedDict, total=False):
    """DrivingRecord arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    driverId: Union[_str, 'types.StringFilter']
    driver: 'DriverRelationFilter'
    vehicleId: Union[_str, 'types.StringFilter']
    vehicle: 'VehicleRelationFilter'
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeFilter']
    startLocation: Union[None, _str, 'types.StringFilter']
    endLocation: Union[None, _str, 'types.StringFilter']
    distance: Union[_float, 'types.FloatFilter']
    avgSpeed: Union[None, _float, 'types.FloatFilter']
    maxSpeed: Union[None, _float, 'types.FloatFilter']
    fuelConsumption: Union[None, _float, 'types.FloatFilter']
    hardBrakeCount: Union[None, _int, 'types.IntFilter']
    hardAccelCount: Union[None, _int, 'types.IntFilter']
    idlingDuration: Union[None, _int, 'types.IntFilter']
    routeData: Union[None, 'fields.Json', 'types.JsonFilter']
    notes: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate DrivingRecord types


    

class DrivingRecordScalarWhereWithAggregatesInput(TypedDict, total=False):
    """DrivingRecord arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    vehicleId: Union[_str, 'types.StringWithAggregatesFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    startLocation: Union[_str, 'types.StringWithAggregatesFilter']
    endLocation: Union[_str, 'types.StringWithAggregatesFilter']
    distance: Union[_float, 'types.FloatWithAggregatesFilter']
    avgSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    fuelConsumption: Union[_float, 'types.FloatWithAggregatesFilter']
    hardBrakeCount: Union[_int, 'types.IntWithAggregatesFilter']
    hardAccelCount: Union[_int, 'types.IntWithAggregatesFilter']
    idlingDuration: Union[_int, 'types.IntWithAggregatesFilter']
    routeData: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DrivingRecordScalarWhereWithAggregatesInputRecursive1']
    OR: List['DrivingRecordScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DrivingRecordScalarWhereWithAggregatesInputRecursive1']


class DrivingRecordScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """DrivingRecord arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    vehicleId: Union[_str, 'types.StringWithAggregatesFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    startLocation: Union[_str, 'types.StringWithAggregatesFilter']
    endLocation: Union[_str, 'types.StringWithAggregatesFilter']
    distance: Union[_float, 'types.FloatWithAggregatesFilter']
    avgSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    fuelConsumption: Union[_float, 'types.FloatWithAggregatesFilter']
    hardBrakeCount: Union[_int, 'types.IntWithAggregatesFilter']
    hardAccelCount: Union[_int, 'types.IntWithAggregatesFilter']
    idlingDuration: Union[_int, 'types.IntWithAggregatesFilter']
    routeData: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DrivingRecordScalarWhereWithAggregatesInputRecursive2']
    OR: List['DrivingRecordScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DrivingRecordScalarWhereWithAggregatesInputRecursive2']


class DrivingRecordScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """DrivingRecord arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    vehicleId: Union[_str, 'types.StringWithAggregatesFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    startLocation: Union[_str, 'types.StringWithAggregatesFilter']
    endLocation: Union[_str, 'types.StringWithAggregatesFilter']
    distance: Union[_float, 'types.FloatWithAggregatesFilter']
    avgSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    fuelConsumption: Union[_float, 'types.FloatWithAggregatesFilter']
    hardBrakeCount: Union[_int, 'types.IntWithAggregatesFilter']
    hardAccelCount: Union[_int, 'types.IntWithAggregatesFilter']
    idlingDuration: Union[_int, 'types.IntWithAggregatesFilter']
    routeData: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DrivingRecordScalarWhereWithAggregatesInputRecursive3']
    OR: List['DrivingRecordScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DrivingRecordScalarWhereWithAggregatesInputRecursive3']


class DrivingRecordScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """DrivingRecord arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    vehicleId: Union[_str, 'types.StringWithAggregatesFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    startLocation: Union[_str, 'types.StringWithAggregatesFilter']
    endLocation: Union[_str, 'types.StringWithAggregatesFilter']
    distance: Union[_float, 'types.FloatWithAggregatesFilter']
    avgSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    fuelConsumption: Union[_float, 'types.FloatWithAggregatesFilter']
    hardBrakeCount: Union[_int, 'types.IntWithAggregatesFilter']
    hardAccelCount: Union[_int, 'types.IntWithAggregatesFilter']
    idlingDuration: Union[_int, 'types.IntWithAggregatesFilter']
    routeData: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DrivingRecordScalarWhereWithAggregatesInputRecursive4']
    OR: List['DrivingRecordScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DrivingRecordScalarWhereWithAggregatesInputRecursive4']


class DrivingRecordScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """DrivingRecord arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    driverId: Union[_str, 'types.StringWithAggregatesFilter']
    vehicleId: Union[_str, 'types.StringWithAggregatesFilter']
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    startLocation: Union[_str, 'types.StringWithAggregatesFilter']
    endLocation: Union[_str, 'types.StringWithAggregatesFilter']
    distance: Union[_float, 'types.FloatWithAggregatesFilter']
    avgSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    maxSpeed: Union[_float, 'types.FloatWithAggregatesFilter']
    fuelConsumption: Union[_float, 'types.FloatWithAggregatesFilter']
    hardBrakeCount: Union[_int, 'types.IntWithAggregatesFilter']
    hardAccelCount: Union[_int, 'types.IntWithAggregatesFilter']
    idlingDuration: Union[_int, 'types.IntWithAggregatesFilter']
    routeData: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class DrivingRecordGroupByOutput(TypedDict, total=False):
    id: _str
    driverId: _str
    vehicleId: _str
    startTime: datetime.datetime
    endTime: datetime.datetime
    startLocation: _str
    endLocation: _str
    distance: _float
    avgSpeed: _float
    maxSpeed: _float
    fuelConsumption: _float
    hardBrakeCount: _int
    hardAccelCount: _int
    idlingDuration: _int
    routeData: 'fields.Json'
    notes: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'DrivingRecordSumAggregateOutput'
    _avg: 'DrivingRecordAvgAggregateOutput'
    _min: 'DrivingRecordMinAggregateOutput'
    _max: 'DrivingRecordMaxAggregateOutput'
    _count: 'DrivingRecordCountAggregateOutput'


class DrivingRecordAvgAggregateOutput(TypedDict, total=False):
    """DrivingRecord output for aggregating averages"""
    distance: float
    avgSpeed: float
    maxSpeed: float
    fuelConsumption: float
    hardBrakeCount: float
    hardAccelCount: float
    idlingDuration: float


class DrivingRecordSumAggregateOutput(TypedDict, total=False):
    """DrivingRecord output for aggregating sums"""
    distance: _float
    avgSpeed: _float
    maxSpeed: _float
    fuelConsumption: _float
    hardBrakeCount: _int
    hardAccelCount: _int
    idlingDuration: _int


class DrivingRecordScalarAggregateOutput(TypedDict, total=False):
    """DrivingRecord output including scalar fields"""
    id: _str
    driverId: _str
    vehicleId: _str
    startTime: datetime.datetime
    endTime: datetime.datetime
    startLocation: _str
    endLocation: _str
    distance: _float
    avgSpeed: _float
    maxSpeed: _float
    fuelConsumption: _float
    hardBrakeCount: _int
    hardAccelCount: _int
    idlingDuration: _int
    routeData: 'fields.Json'
    notes: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


DrivingRecordMinAggregateOutput = DrivingRecordScalarAggregateOutput
DrivingRecordMaxAggregateOutput = DrivingRecordScalarAggregateOutput


class DrivingRecordMaxAggregateInput(TypedDict, total=False):
    """DrivingRecord input for aggregating by max"""
    id: bool
    driverId: bool
    vehicleId: bool
    startTime: bool
    endTime: bool
    startLocation: bool
    endLocation: bool
    distance: bool
    avgSpeed: bool
    maxSpeed: bool
    fuelConsumption: bool
    hardBrakeCount: bool
    hardAccelCount: bool
    idlingDuration: bool
    routeData: bool
    notes: bool
    createdAt: bool
    updatedAt: bool


class DrivingRecordMinAggregateInput(TypedDict, total=False):
    """DrivingRecord input for aggregating by min"""
    id: bool
    driverId: bool
    vehicleId: bool
    startTime: bool
    endTime: bool
    startLocation: bool
    endLocation: bool
    distance: bool
    avgSpeed: bool
    maxSpeed: bool
    fuelConsumption: bool
    hardBrakeCount: bool
    hardAccelCount: bool
    idlingDuration: bool
    routeData: bool
    notes: bool
    createdAt: bool
    updatedAt: bool


class DrivingRecordNumberAggregateInput(TypedDict, total=False):
    """DrivingRecord input for aggregating numbers"""
    distance: bool
    avgSpeed: bool
    maxSpeed: bool
    fuelConsumption: bool
    hardBrakeCount: bool
    hardAccelCount: bool
    idlingDuration: bool


DrivingRecordAvgAggregateInput = DrivingRecordNumberAggregateInput
DrivingRecordSumAggregateInput = DrivingRecordNumberAggregateInput


DrivingRecordCountAggregateInput = TypedDict(
    'DrivingRecordCountAggregateInput',
    {
        'id': bool,
        'driverId': bool,
        'vehicleId': bool,
        'startTime': bool,
        'endTime': bool,
        'startLocation': bool,
        'endLocation': bool,
        'distance': bool,
        'avgSpeed': bool,
        'maxSpeed': bool,
        'fuelConsumption': bool,
        'hardBrakeCount': bool,
        'hardAccelCount': bool,
        'idlingDuration': bool,
        'routeData': bool,
        'notes': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

DrivingRecordCountAggregateOutput = TypedDict(
    'DrivingRecordCountAggregateOutput',
    {
        'id': int,
        'driverId': int,
        'vehicleId': int,
        'startTime': int,
        'endTime': int,
        'startLocation': int,
        'endLocation': int,
        'distance': int,
        'avgSpeed': int,
        'maxSpeed': int,
        'fuelConsumption': int,
        'hardBrakeCount': int,
        'hardAccelCount': int,
        'idlingDuration': int,
        'routeData': int,
        'notes': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


DrivingRecordKeys = Literal[
    'id',
    'driverId',
    'driver',
    'vehicleId',
    'vehicle',
    'startTime',
    'endTime',
    'startLocation',
    'endLocation',
    'distance',
    'avgSpeed',
    'maxSpeed',
    'fuelConsumption',
    'hardBrakeCount',
    'hardAccelCount',
    'idlingDuration',
    'routeData',
    'notes',
    'createdAt',
    'updatedAt',
]
DrivingRecordScalarFieldKeys = Literal[
    'id',
    'driverId',
    'vehicleId',
    'startTime',
    'endTime',
    'startLocation',
    'endLocation',
    'distance',
    'avgSpeed',
    'maxSpeed',
    'fuelConsumption',
    'hardBrakeCount',
    'hardAccelCount',
    'idlingDuration',
    'routeData',
    'notes',
    'createdAt',
    'updatedAt',
]
DrivingRecordScalarFieldKeysT = TypeVar('DrivingRecordScalarFieldKeysT', bound=DrivingRecordScalarFieldKeys)

DrivingRecordRelationalFieldKeys = Literal[
        'driver',
        'vehicle',
    ]

# ERPSyncConfig types

class ERPSyncConfigOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ERPSyncConfig create method"""
    id: _str
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Optional[_int]
    syncEnabled: _bool
    lastSyncTime: Optional[datetime.datetime]
    mappingConfig: 'fields.Json'
    filters: 'fields.Json'
    organizationId: _str
    organization: 'OrganizationCreateNestedWithoutRelationsInput'
    syncLogs: 'ERPSyncLogCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ERPSyncConfigCreateInput(ERPSyncConfigOptionalCreateInput):
    """Required arguments to the ERPSyncConfig create method"""
    name: _str
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: _str
    username: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ERPSyncConfigOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ERPSyncConfig create method, without relations"""
    id: _str
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Optional[_int]
    syncEnabled: _bool
    lastSyncTime: Optional[datetime.datetime]
    mappingConfig: 'fields.Json'
    filters: 'fields.Json'
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ERPSyncConfigCreateWithoutRelationsInput(ERPSyncConfigOptionalCreateWithoutRelationsInput):
    """Required arguments to the ERPSyncConfig create method, without relations"""
    name: _str
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: _str
    username: _str
    password: _str

class ERPSyncConfigConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ERPSyncConfigCreateWithoutRelationsInput'
    where: 'ERPSyncConfigWhereUniqueInput'

class ERPSyncConfigCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ERPSyncConfigCreateWithoutRelationsInput'
    connect: 'ERPSyncConfigWhereUniqueInput'
    connect_or_create: 'ERPSyncConfigConnectOrCreateWithoutRelationsInput'


class ERPSyncConfigCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ERPSyncConfigCreateWithoutRelationsInput', List['ERPSyncConfigCreateWithoutRelationsInput']]
    connect: Union['ERPSyncConfigWhereUniqueInput', List['ERPSyncConfigWhereUniqueInput']]
    connect_or_create: Union['ERPSyncConfigConnectOrCreateWithoutRelationsInput', List['ERPSyncConfigConnectOrCreateWithoutRelationsInput']]

_ERPSyncConfigWhereUnique_id_Input = TypedDict(
    '_ERPSyncConfigWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ERPSyncConfigWhereUniqueInput = _ERPSyncConfigWhereUnique_id_Input


class ERPSyncConfigUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: _str
    username: _str
    password: _str
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Optional[Union[AtomicIntInput, _int]]
    syncEnabled: _bool
    lastSyncTime: Optional[datetime.datetime]
    mappingConfig: 'fields.Json'
    filters: 'fields.Json'
    organization: 'OrganizationUpdateOneWithoutRelationsInput'
    syncLogs: 'ERPSyncLogUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ERPSyncConfigUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: _str
    username: _str
    password: _str
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Optional[Union[AtomicIntInput, _int]]
    syncEnabled: _bool
    lastSyncTime: Optional[datetime.datetime]
    mappingConfig: 'fields.Json'
    filters: 'fields.Json'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ERPSyncConfigUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ERPSyncConfigCreateWithoutRelationsInput']
    connect: List['ERPSyncConfigWhereUniqueInput']
    connect_or_create: List['ERPSyncConfigConnectOrCreateWithoutRelationsInput']
    set: List['ERPSyncConfigWhereUniqueInput']
    disconnect: List['ERPSyncConfigWhereUniqueInput']
    delete: List['ERPSyncConfigWhereUniqueInput']

    # TODO
    # update: List['ERPSyncConfigUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ERPSyncConfigUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ERPSyncConfigScalarWhereInput']
    # upsert: List['ERPSyncConfigUpserteWithWhereUniqueWithoutRelationsInput']


class ERPSyncConfigUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ERPSyncConfigCreateWithoutRelationsInput'
    connect: 'ERPSyncConfigWhereUniqueInput'
    connect_or_create: 'ERPSyncConfigConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ERPSyncConfigUpdateInput'
    # upsert: 'ERPSyncConfigUpsertWithoutRelationsInput'


class ERPSyncConfigUpsertInput(TypedDict):
    create: 'ERPSyncConfigCreateInput'
    update: 'ERPSyncConfigUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ERPSyncConfig_id_OrderByInput = TypedDict(
    '_ERPSyncConfig_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_name_OrderByInput = TypedDict(
    '_ERPSyncConfig_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_erpSystem_OrderByInput = TypedDict(
    '_ERPSyncConfig_erpSystem_OrderByInput',
    {
        'erpSystem': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_connectionUrl_OrderByInput = TypedDict(
    '_ERPSyncConfig_connectionUrl_OrderByInput',
    {
        'connectionUrl': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_username_OrderByInput = TypedDict(
    '_ERPSyncConfig_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_password_OrderByInput = TypedDict(
    '_ERPSyncConfig_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_syncDirection_OrderByInput = TypedDict(
    '_ERPSyncConfig_syncDirection_OrderByInput',
    {
        'syncDirection': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_syncInterval_OrderByInput = TypedDict(
    '_ERPSyncConfig_syncInterval_OrderByInput',
    {
        'syncInterval': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_syncEnabled_OrderByInput = TypedDict(
    '_ERPSyncConfig_syncEnabled_OrderByInput',
    {
        'syncEnabled': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_lastSyncTime_OrderByInput = TypedDict(
    '_ERPSyncConfig_lastSyncTime_OrderByInput',
    {
        'lastSyncTime': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_mappingConfig_OrderByInput = TypedDict(
    '_ERPSyncConfig_mappingConfig_OrderByInput',
    {
        'mappingConfig': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_filters_OrderByInput = TypedDict(
    '_ERPSyncConfig_filters_OrderByInput',
    {
        'filters': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_organizationId_OrderByInput = TypedDict(
    '_ERPSyncConfig_organizationId_OrderByInput',
    {
        'organizationId': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_createdAt_OrderByInput = TypedDict(
    '_ERPSyncConfig_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_updatedAt_OrderByInput = TypedDict(
    '_ERPSyncConfig_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_RelevanceInner = TypedDict(
    '_ERPSyncConfig_RelevanceInner',
    {
        'fields': 'List[ERPSyncConfigScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ERPSyncConfig_RelevanceOrderByInput = TypedDict(
    '_ERPSyncConfig_RelevanceOrderByInput',
    {
        '_relevance': '_ERPSyncConfig_RelevanceInner',
    },
    total=True
)

ERPSyncConfigOrderByInput = Union[
    '_ERPSyncConfig_id_OrderByInput',
    '_ERPSyncConfig_name_OrderByInput',
    '_ERPSyncConfig_erpSystem_OrderByInput',
    '_ERPSyncConfig_connectionUrl_OrderByInput',
    '_ERPSyncConfig_username_OrderByInput',
    '_ERPSyncConfig_password_OrderByInput',
    '_ERPSyncConfig_syncDirection_OrderByInput',
    '_ERPSyncConfig_syncInterval_OrderByInput',
    '_ERPSyncConfig_syncEnabled_OrderByInput',
    '_ERPSyncConfig_lastSyncTime_OrderByInput',
    '_ERPSyncConfig_mappingConfig_OrderByInput',
    '_ERPSyncConfig_filters_OrderByInput',
    '_ERPSyncConfig_organizationId_OrderByInput',
    '_ERPSyncConfig_createdAt_OrderByInput',
    '_ERPSyncConfig_updatedAt_OrderByInput',
    '_ERPSyncConfig_RelevanceOrderByInput',
]



# recursive ERPSyncConfig types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ERPSyncConfigRelationFilter = TypedDict(
    'ERPSyncConfigRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ERPSyncConfigListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ERPSyncConfigInclude(TypedDict, total=False):
    """ERPSyncConfig relational arguments"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfig']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncConfig']


    

class UserIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncConfigRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncConfigRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromERPSyncConfigRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncConfigRecursive1']


class UserIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncConfigRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncConfigRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromERPSyncConfigRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncConfigRecursive2']


class UserIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncConfigRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncConfigRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromERPSyncConfigRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncConfigRecursive3']


class UserIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncConfigRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncConfigRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromERPSyncConfigRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncConfigRecursive4']


class UserIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class UserArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyUserArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncConfigRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromERPSyncConfigRecursive1']


class PermissionIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncConfigRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromERPSyncConfigRecursive2']


class PermissionIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncConfigRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromERPSyncConfigRecursive3']


class PermissionIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncConfigRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromERPSyncConfigRecursive4']


class PermissionIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class PermissionArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyPermissionArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    user: Union[bool, 'UserArgsFromERPSyncConfigRecursive1']
    permission: Union[bool, 'PermissionArgsFromERPSyncConfigRecursive1']


class UserPermissionIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    user: Union[bool, 'UserArgsFromERPSyncConfigRecursive2']
    permission: Union[bool, 'PermissionArgsFromERPSyncConfigRecursive2']


class UserPermissionIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    user: Union[bool, 'UserArgsFromERPSyncConfigRecursive3']
    permission: Union[bool, 'PermissionArgsFromERPSyncConfigRecursive3']


class UserPermissionIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    user: Union[bool, 'UserArgsFromERPSyncConfigRecursive4']
    permission: Union[bool, 'PermissionArgsFromERPSyncConfigRecursive4']


class UserPermissionIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class UserPermissionArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyUserPermissionArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    permission: Union[bool, 'PermissionArgsFromERPSyncConfigRecursive1']


class RolePermissionIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    permission: Union[bool, 'PermissionArgsFromERPSyncConfigRecursive2']


class RolePermissionIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    permission: Union[bool, 'PermissionArgsFromERPSyncConfigRecursive3']


class RolePermissionIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    permission: Union[bool, 'PermissionArgsFromERPSyncConfigRecursive4']


class RolePermissionIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class RolePermissionArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyRolePermissionArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncConfigRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromERPSyncConfigRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromERPSyncConfigRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncConfigRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromERPSyncConfigRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncConfigRecursive1']


class OrganizationIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncConfigRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromERPSyncConfigRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromERPSyncConfigRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncConfigRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromERPSyncConfigRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncConfigRecursive2']


class OrganizationIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncConfigRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromERPSyncConfigRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromERPSyncConfigRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncConfigRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromERPSyncConfigRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncConfigRecursive3']


class OrganizationIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncConfigRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromERPSyncConfigRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromERPSyncConfigRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncConfigRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromERPSyncConfigRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncConfigRecursive4']


class OrganizationIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class OrganizationArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyOrganizationArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    user: Union[bool, 'UserArgsFromERPSyncConfigRecursive1']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive1']


class OrganizationMemberIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    user: Union[bool, 'UserArgsFromERPSyncConfigRecursive2']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive2']


class OrganizationMemberIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    user: Union[bool, 'UserArgsFromERPSyncConfigRecursive3']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive3']


class OrganizationMemberIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    user: Union[bool, 'UserArgsFromERPSyncConfigRecursive4']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive4']


class OrganizationMemberIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class OrganizationMemberArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyOrganizationMemberArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromERPSyncConfigRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncConfigRecursive1']


class DriverIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromERPSyncConfigRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncConfigRecursive2']


class DriverIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromERPSyncConfigRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncConfigRecursive3']


class DriverIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromERPSyncConfigRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncConfigRecursive4']


class DriverIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class DriverArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyDriverArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncConfigRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncConfigRecursive1']


class VehicleIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncConfigRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncConfigRecursive2']


class VehicleIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncConfigRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncConfigRecursive3']


class VehicleIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncConfigRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncConfigRecursive4']


class VehicleIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class VehicleArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyVehicleArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    vehicle: Union[bool, 'VehicleArgsFromERPSyncConfigRecursive1']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromERPSyncConfigRecursive1']


class MaintenanceIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    vehicle: Union[bool, 'VehicleArgsFromERPSyncConfigRecursive2']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromERPSyncConfigRecursive2']


class MaintenanceIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    vehicle: Union[bool, 'VehicleArgsFromERPSyncConfigRecursive3']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromERPSyncConfigRecursive3']


class MaintenanceIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    vehicle: Union[bool, 'VehicleArgsFromERPSyncConfigRecursive4']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromERPSyncConfigRecursive4']


class MaintenanceIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class MaintenanceArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyMaintenanceArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    maintenance: Union[bool, 'MaintenanceArgsFromERPSyncConfigRecursive1']


class MaintenancePartIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    maintenance: Union[bool, 'MaintenanceArgsFromERPSyncConfigRecursive2']


class MaintenancePartIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    maintenance: Union[bool, 'MaintenanceArgsFromERPSyncConfigRecursive3']


class MaintenancePartIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    maintenance: Union[bool, 'MaintenanceArgsFromERPSyncConfigRecursive4']


class MaintenancePartIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class MaintenancePartArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyMaintenancePartArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    driver: Union[bool, 'DriverArgsFromERPSyncConfigRecursive1']


class DriverPerformanceIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    driver: Union[bool, 'DriverArgsFromERPSyncConfigRecursive2']


class DriverPerformanceIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    driver: Union[bool, 'DriverArgsFromERPSyncConfigRecursive3']


class DriverPerformanceIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    driver: Union[bool, 'DriverArgsFromERPSyncConfigRecursive4']


class DriverPerformanceIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class DriverPerformanceArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyDriverPerformanceArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    driver: Union[bool, 'DriverArgsFromERPSyncConfigRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromERPSyncConfigRecursive1']


class DrivingRecordIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    driver: Union[bool, 'DriverArgsFromERPSyncConfigRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromERPSyncConfigRecursive2']


class DrivingRecordIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    driver: Union[bool, 'DriverArgsFromERPSyncConfigRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromERPSyncConfigRecursive3']


class DrivingRecordIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    driver: Union[bool, 'DriverArgsFromERPSyncConfigRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromERPSyncConfigRecursive4']


class DrivingRecordIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class DrivingRecordArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyDrivingRecordArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncConfigRecursive1']


class ERPSyncConfigIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncConfigRecursive2']


class ERPSyncConfigIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncConfigRecursive3']


class ERPSyncConfigIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncConfigRecursive4']


class ERPSyncConfigIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class ERPSyncConfigArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyERPSyncConfigArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    config: Union[bool, 'ERPSyncConfigArgsFromERPSyncConfigRecursive1']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive1']


class ERPSyncLogIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    config: Union[bool, 'ERPSyncConfigArgsFromERPSyncConfigRecursive2']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive2']


class ERPSyncLogIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    config: Union[bool, 'ERPSyncConfigArgsFromERPSyncConfigRecursive3']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive3']


class ERPSyncLogIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    config: Union[bool, 'ERPSyncConfigArgsFromERPSyncConfigRecursive4']
    organization: Union[bool, 'OrganizationArgsFromERPSyncConfigRecursive4']


class ERPSyncLogIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class ERPSyncLogArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyERPSyncLogArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    technician: Union[bool, 'UserArgsFromERPSyncConfigRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncConfigRecursive1']


class RepairIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    technician: Union[bool, 'UserArgsFromERPSyncConfigRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncConfigRecursive2']


class RepairIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    technician: Union[bool, 'UserArgsFromERPSyncConfigRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncConfigRecursive3']


class RepairIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    technician: Union[bool, 'UserArgsFromERPSyncConfigRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncConfigRecursive4']


class RepairIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class RepairArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyRepairArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromERPSyncConfig(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    repair: Union[bool, 'RepairArgsFromERPSyncConfigRecursive1']
    technician: Union[bool, 'UserArgsFromERPSyncConfigRecursive1']


class StatusHistoryIncludeFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    repair: Union[bool, 'RepairArgsFromERPSyncConfigRecursive2']
    technician: Union[bool, 'UserArgsFromERPSyncConfigRecursive2']


class StatusHistoryIncludeFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    repair: Union[bool, 'RepairArgsFromERPSyncConfigRecursive3']
    technician: Union[bool, 'UserArgsFromERPSyncConfigRecursive3']


class StatusHistoryIncludeFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""
    repair: Union[bool, 'RepairArgsFromERPSyncConfigRecursive4']
    technician: Union[bool, 'UserArgsFromERPSyncConfigRecursive4']


class StatusHistoryIncludeFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncConfig"""

    

class StatusHistoryArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    
    

class FindManyStatusHistoryArgsFromERPSyncConfig(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromERPSyncConfigRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromERPSyncConfigRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromERPSyncConfigRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromERPSyncConfigRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncConfig"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyERPSyncConfigArgs = FindManyERPSyncConfigArgsFromERPSyncConfig
FindFirstERPSyncConfigArgs = FindManyERPSyncConfigArgsFromERPSyncConfig


    

class ERPSyncConfigWhereInput(TypedDict, total=False):
    """ERPSyncConfig arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Union[None, _int, 'types.IntFilter']
    syncEnabled: Union[_bool, 'types.BooleanFilter']
    lastSyncTime: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mappingConfig: Union['fields.Json', 'types.JsonFilter']
    filters: Union['fields.Json', 'types.JsonFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    syncLogs: 'ERPSyncLogListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ERPSyncConfigWhereInputRecursive1', List['ERPSyncConfigWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ERPSyncConfigWhereInputRecursive1']
    OR: List['ERPSyncConfigWhereInputRecursive1']
    NOT: List['ERPSyncConfigWhereInputRecursive1']


class ERPSyncConfigWhereInputRecursive1(TypedDict, total=False):
    """ERPSyncConfig arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Union[None, _int, 'types.IntFilter']
    syncEnabled: Union[_bool, 'types.BooleanFilter']
    lastSyncTime: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mappingConfig: Union['fields.Json', 'types.JsonFilter']
    filters: Union['fields.Json', 'types.JsonFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    syncLogs: 'ERPSyncLogListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ERPSyncConfigWhereInputRecursive2', List['ERPSyncConfigWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ERPSyncConfigWhereInputRecursive2']
    OR: List['ERPSyncConfigWhereInputRecursive2']
    NOT: List['ERPSyncConfigWhereInputRecursive2']


class ERPSyncConfigWhereInputRecursive2(TypedDict, total=False):
    """ERPSyncConfig arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Union[None, _int, 'types.IntFilter']
    syncEnabled: Union[_bool, 'types.BooleanFilter']
    lastSyncTime: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mappingConfig: Union['fields.Json', 'types.JsonFilter']
    filters: Union['fields.Json', 'types.JsonFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    syncLogs: 'ERPSyncLogListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ERPSyncConfigWhereInputRecursive3', List['ERPSyncConfigWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ERPSyncConfigWhereInputRecursive3']
    OR: List['ERPSyncConfigWhereInputRecursive3']
    NOT: List['ERPSyncConfigWhereInputRecursive3']


class ERPSyncConfigWhereInputRecursive3(TypedDict, total=False):
    """ERPSyncConfig arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Union[None, _int, 'types.IntFilter']
    syncEnabled: Union[_bool, 'types.BooleanFilter']
    lastSyncTime: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mappingConfig: Union['fields.Json', 'types.JsonFilter']
    filters: Union['fields.Json', 'types.JsonFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    syncLogs: 'ERPSyncLogListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ERPSyncConfigWhereInputRecursive4', List['ERPSyncConfigWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ERPSyncConfigWhereInputRecursive4']
    OR: List['ERPSyncConfigWhereInputRecursive4']
    NOT: List['ERPSyncConfigWhereInputRecursive4']


class ERPSyncConfigWhereInputRecursive4(TypedDict, total=False):
    """ERPSyncConfig arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Union[None, _int, 'types.IntFilter']
    syncEnabled: Union[_bool, 'types.BooleanFilter']
    lastSyncTime: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mappingConfig: Union['fields.Json', 'types.JsonFilter']
    filters: Union['fields.Json', 'types.JsonFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    syncLogs: 'ERPSyncLogListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate ERPSyncConfig types


    

class ERPSyncConfigScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ERPSyncConfig arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Union[_int, 'types.IntWithAggregatesFilter']
    syncEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastSyncTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mappingConfig: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    filters: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive1']
    OR: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive1']


class ERPSyncConfigScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ERPSyncConfig arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Union[_int, 'types.IntWithAggregatesFilter']
    syncEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastSyncTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mappingConfig: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    filters: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive2']
    OR: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive2']


class ERPSyncConfigScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ERPSyncConfig arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Union[_int, 'types.IntWithAggregatesFilter']
    syncEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastSyncTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mappingConfig: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    filters: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive3']
    OR: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive3']


class ERPSyncConfigScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ERPSyncConfig arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Union[_int, 'types.IntWithAggregatesFilter']
    syncEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastSyncTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mappingConfig: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    filters: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive4']
    OR: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ERPSyncConfigScalarWhereWithAggregatesInputRecursive4']


class ERPSyncConfigScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ERPSyncConfig arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: Union[_int, 'types.IntWithAggregatesFilter']
    syncEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastSyncTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mappingConfig: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    filters: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ERPSyncConfigGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: _str
    username: _str
    password: _str
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: _int
    syncEnabled: _bool
    lastSyncTime: datetime.datetime
    mappingConfig: 'fields.Json'
    filters: 'fields.Json'
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ERPSyncConfigSumAggregateOutput'
    _avg: 'ERPSyncConfigAvgAggregateOutput'
    _min: 'ERPSyncConfigMinAggregateOutput'
    _max: 'ERPSyncConfigMaxAggregateOutput'
    _count: 'ERPSyncConfigCountAggregateOutput'


class ERPSyncConfigAvgAggregateOutput(TypedDict, total=False):
    """ERPSyncConfig output for aggregating averages"""
    syncInterval: float


class ERPSyncConfigSumAggregateOutput(TypedDict, total=False):
    """ERPSyncConfig output for aggregating sums"""
    syncInterval: _int


class ERPSyncConfigScalarAggregateOutput(TypedDict, total=False):
    """ERPSyncConfig output including scalar fields"""
    id: _str
    name: _str
    erpSystem: 'enums.ERPSystemType'
    connectionUrl: _str
    username: _str
    password: _str
    syncDirection: 'enums.SyncDirectionType'
    syncInterval: _int
    syncEnabled: _bool
    lastSyncTime: datetime.datetime
    mappingConfig: 'fields.Json'
    filters: 'fields.Json'
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ERPSyncConfigMinAggregateOutput = ERPSyncConfigScalarAggregateOutput
ERPSyncConfigMaxAggregateOutput = ERPSyncConfigScalarAggregateOutput


class ERPSyncConfigMaxAggregateInput(TypedDict, total=False):
    """ERPSyncConfig input for aggregating by max"""
    id: bool
    name: bool
    erpSystem: bool
    connectionUrl: bool
    username: bool
    password: bool
    syncDirection: bool
    syncInterval: bool
    syncEnabled: bool
    lastSyncTime: bool
    mappingConfig: bool
    filters: bool
    organizationId: bool
    createdAt: bool
    updatedAt: bool


class ERPSyncConfigMinAggregateInput(TypedDict, total=False):
    """ERPSyncConfig input for aggregating by min"""
    id: bool
    name: bool
    erpSystem: bool
    connectionUrl: bool
    username: bool
    password: bool
    syncDirection: bool
    syncInterval: bool
    syncEnabled: bool
    lastSyncTime: bool
    mappingConfig: bool
    filters: bool
    organizationId: bool
    createdAt: bool
    updatedAt: bool


class ERPSyncConfigNumberAggregateInput(TypedDict, total=False):
    """ERPSyncConfig input for aggregating numbers"""
    syncInterval: bool


ERPSyncConfigAvgAggregateInput = ERPSyncConfigNumberAggregateInput
ERPSyncConfigSumAggregateInput = ERPSyncConfigNumberAggregateInput


ERPSyncConfigCountAggregateInput = TypedDict(
    'ERPSyncConfigCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'erpSystem': bool,
        'connectionUrl': bool,
        'username': bool,
        'password': bool,
        'syncDirection': bool,
        'syncInterval': bool,
        'syncEnabled': bool,
        'lastSyncTime': bool,
        'mappingConfig': bool,
        'filters': bool,
        'organizationId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ERPSyncConfigCountAggregateOutput = TypedDict(
    'ERPSyncConfigCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'erpSystem': int,
        'connectionUrl': int,
        'username': int,
        'password': int,
        'syncDirection': int,
        'syncInterval': int,
        'syncEnabled': int,
        'lastSyncTime': int,
        'mappingConfig': int,
        'filters': int,
        'organizationId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ERPSyncConfigKeys = Literal[
    'id',
    'name',
    'erpSystem',
    'connectionUrl',
    'username',
    'password',
    'syncDirection',
    'syncInterval',
    'syncEnabled',
    'lastSyncTime',
    'mappingConfig',
    'filters',
    'organizationId',
    'organization',
    'syncLogs',
    'createdAt',
    'updatedAt',
]
ERPSyncConfigScalarFieldKeys = Literal[
    'id',
    'name',
    'erpSystem',
    'connectionUrl',
    'username',
    'password',
    'syncDirection',
    'syncInterval',
    'syncEnabled',
    'lastSyncTime',
    'mappingConfig',
    'filters',
    'organizationId',
    'createdAt',
    'updatedAt',
]
ERPSyncConfigScalarFieldKeysT = TypeVar('ERPSyncConfigScalarFieldKeysT', bound=ERPSyncConfigScalarFieldKeys)

ERPSyncConfigRelationalFieldKeys = Literal[
        'organization',
        'syncLogs',
    ]

# ERPSyncLog types

class ERPSyncLogOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ERPSyncLog create method"""
    id: _str
    configId: _str
    config: 'ERPSyncConfigCreateNestedWithoutRelationsInput'
    endTime: Optional[datetime.datetime]
    totalItems: Optional[_int]
    processedItems: Optional[_int]
    successItems: Optional[_int]
    failedItems: Optional[_int]
    errorDetails: Optional[_str]
    organizationId: _str
    organization: 'OrganizationCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ERPSyncLogCreateInput(ERPSyncLogOptionalCreateInput):
    """Required arguments to the ERPSyncLog create method"""
    status: 'enums.SyncStatusType'
    startTime: datetime.datetime
    direction: 'enums.SyncDirectionType'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ERPSyncLogOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ERPSyncLog create method, without relations"""
    id: _str
    configId: _str
    endTime: Optional[datetime.datetime]
    totalItems: Optional[_int]
    processedItems: Optional[_int]
    successItems: Optional[_int]
    failedItems: Optional[_int]
    errorDetails: Optional[_str]
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ERPSyncLogCreateWithoutRelationsInput(ERPSyncLogOptionalCreateWithoutRelationsInput):
    """Required arguments to the ERPSyncLog create method, without relations"""
    status: 'enums.SyncStatusType'
    startTime: datetime.datetime
    direction: 'enums.SyncDirectionType'

class ERPSyncLogConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ERPSyncLogCreateWithoutRelationsInput'
    where: 'ERPSyncLogWhereUniqueInput'

class ERPSyncLogCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ERPSyncLogCreateWithoutRelationsInput'
    connect: 'ERPSyncLogWhereUniqueInput'
    connect_or_create: 'ERPSyncLogConnectOrCreateWithoutRelationsInput'


class ERPSyncLogCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ERPSyncLogCreateWithoutRelationsInput', List['ERPSyncLogCreateWithoutRelationsInput']]
    connect: Union['ERPSyncLogWhereUniqueInput', List['ERPSyncLogWhereUniqueInput']]
    connect_or_create: Union['ERPSyncLogConnectOrCreateWithoutRelationsInput', List['ERPSyncLogConnectOrCreateWithoutRelationsInput']]

_ERPSyncLogWhereUnique_id_Input = TypedDict(
    '_ERPSyncLogWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ERPSyncLogWhereUniqueInput = _ERPSyncLogWhereUnique_id_Input


class ERPSyncLogUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    config: 'ERPSyncConfigUpdateOneWithoutRelationsInput'
    status: 'enums.SyncStatusType'
    startTime: datetime.datetime
    endTime: Optional[datetime.datetime]
    direction: 'enums.SyncDirectionType'
    totalItems: Optional[Union[AtomicIntInput, _int]]
    processedItems: Optional[Union[AtomicIntInput, _int]]
    successItems: Optional[Union[AtomicIntInput, _int]]
    failedItems: Optional[Union[AtomicIntInput, _int]]
    errorDetails: Optional[_str]
    organization: 'OrganizationUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ERPSyncLogUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    status: 'enums.SyncStatusType'
    startTime: datetime.datetime
    endTime: Optional[datetime.datetime]
    direction: 'enums.SyncDirectionType'
    totalItems: Optional[Union[AtomicIntInput, _int]]
    processedItems: Optional[Union[AtomicIntInput, _int]]
    successItems: Optional[Union[AtomicIntInput, _int]]
    failedItems: Optional[Union[AtomicIntInput, _int]]
    errorDetails: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ERPSyncLogUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ERPSyncLogCreateWithoutRelationsInput']
    connect: List['ERPSyncLogWhereUniqueInput']
    connect_or_create: List['ERPSyncLogConnectOrCreateWithoutRelationsInput']
    set: List['ERPSyncLogWhereUniqueInput']
    disconnect: List['ERPSyncLogWhereUniqueInput']
    delete: List['ERPSyncLogWhereUniqueInput']

    # TODO
    # update: List['ERPSyncLogUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ERPSyncLogUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ERPSyncLogScalarWhereInput']
    # upsert: List['ERPSyncLogUpserteWithWhereUniqueWithoutRelationsInput']


class ERPSyncLogUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ERPSyncLogCreateWithoutRelationsInput'
    connect: 'ERPSyncLogWhereUniqueInput'
    connect_or_create: 'ERPSyncLogConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ERPSyncLogUpdateInput'
    # upsert: 'ERPSyncLogUpsertWithoutRelationsInput'


class ERPSyncLogUpsertInput(TypedDict):
    create: 'ERPSyncLogCreateInput'
    update: 'ERPSyncLogUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ERPSyncLog_id_OrderByInput = TypedDict(
    '_ERPSyncLog_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_configId_OrderByInput = TypedDict(
    '_ERPSyncLog_configId_OrderByInput',
    {
        'configId': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_status_OrderByInput = TypedDict(
    '_ERPSyncLog_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_startTime_OrderByInput = TypedDict(
    '_ERPSyncLog_startTime_OrderByInput',
    {
        'startTime': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_endTime_OrderByInput = TypedDict(
    '_ERPSyncLog_endTime_OrderByInput',
    {
        'endTime': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_direction_OrderByInput = TypedDict(
    '_ERPSyncLog_direction_OrderByInput',
    {
        'direction': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_totalItems_OrderByInput = TypedDict(
    '_ERPSyncLog_totalItems_OrderByInput',
    {
        'totalItems': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_processedItems_OrderByInput = TypedDict(
    '_ERPSyncLog_processedItems_OrderByInput',
    {
        'processedItems': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_successItems_OrderByInput = TypedDict(
    '_ERPSyncLog_successItems_OrderByInput',
    {
        'successItems': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_failedItems_OrderByInput = TypedDict(
    '_ERPSyncLog_failedItems_OrderByInput',
    {
        'failedItems': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_errorDetails_OrderByInput = TypedDict(
    '_ERPSyncLog_errorDetails_OrderByInput',
    {
        'errorDetails': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_organizationId_OrderByInput = TypedDict(
    '_ERPSyncLog_organizationId_OrderByInput',
    {
        'organizationId': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_createdAt_OrderByInput = TypedDict(
    '_ERPSyncLog_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_updatedAt_OrderByInput = TypedDict(
    '_ERPSyncLog_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_RelevanceInner = TypedDict(
    '_ERPSyncLog_RelevanceInner',
    {
        'fields': 'List[ERPSyncLogScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ERPSyncLog_RelevanceOrderByInput = TypedDict(
    '_ERPSyncLog_RelevanceOrderByInput',
    {
        '_relevance': '_ERPSyncLog_RelevanceInner',
    },
    total=True
)

ERPSyncLogOrderByInput = Union[
    '_ERPSyncLog_id_OrderByInput',
    '_ERPSyncLog_configId_OrderByInput',
    '_ERPSyncLog_status_OrderByInput',
    '_ERPSyncLog_startTime_OrderByInput',
    '_ERPSyncLog_endTime_OrderByInput',
    '_ERPSyncLog_direction_OrderByInput',
    '_ERPSyncLog_totalItems_OrderByInput',
    '_ERPSyncLog_processedItems_OrderByInput',
    '_ERPSyncLog_successItems_OrderByInput',
    '_ERPSyncLog_failedItems_OrderByInput',
    '_ERPSyncLog_errorDetails_OrderByInput',
    '_ERPSyncLog_organizationId_OrderByInput',
    '_ERPSyncLog_createdAt_OrderByInput',
    '_ERPSyncLog_updatedAt_OrderByInput',
    '_ERPSyncLog_RelevanceOrderByInput',
]



# recursive ERPSyncLog types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ERPSyncLogRelationFilter = TypedDict(
    'ERPSyncLogRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ERPSyncLogListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ERPSyncLogInclude(TypedDict, total=False):
    """ERPSyncLog relational arguments"""
    config: Union[bool, 'ERPSyncConfigArgsFromERPSyncLog']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLog']


    

class UserIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncLogRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncLogRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromERPSyncLogRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncLogRecursive1']


class UserIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncLogRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncLogRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromERPSyncLogRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncLogRecursive2']


class UserIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncLogRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncLogRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromERPSyncLogRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncLogRecursive3']


class UserIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncLogRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncLogRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromERPSyncLogRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncLogRecursive4']


class UserIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class UserArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyUserArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncLogRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromERPSyncLogRecursive1']


class PermissionIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncLogRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromERPSyncLogRecursive2']


class PermissionIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncLogRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromERPSyncLogRecursive3']


class PermissionIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromERPSyncLogRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromERPSyncLogRecursive4']


class PermissionIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class PermissionArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyPermissionArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    user: Union[bool, 'UserArgsFromERPSyncLogRecursive1']
    permission: Union[bool, 'PermissionArgsFromERPSyncLogRecursive1']


class UserPermissionIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    user: Union[bool, 'UserArgsFromERPSyncLogRecursive2']
    permission: Union[bool, 'PermissionArgsFromERPSyncLogRecursive2']


class UserPermissionIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    user: Union[bool, 'UserArgsFromERPSyncLogRecursive3']
    permission: Union[bool, 'PermissionArgsFromERPSyncLogRecursive3']


class UserPermissionIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    user: Union[bool, 'UserArgsFromERPSyncLogRecursive4']
    permission: Union[bool, 'PermissionArgsFromERPSyncLogRecursive4']


class UserPermissionIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class UserPermissionArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyUserPermissionArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    permission: Union[bool, 'PermissionArgsFromERPSyncLogRecursive1']


class RolePermissionIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    permission: Union[bool, 'PermissionArgsFromERPSyncLogRecursive2']


class RolePermissionIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    permission: Union[bool, 'PermissionArgsFromERPSyncLogRecursive3']


class RolePermissionIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    permission: Union[bool, 'PermissionArgsFromERPSyncLogRecursive4']


class RolePermissionIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class RolePermissionArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyRolePermissionArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncLogRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromERPSyncLogRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromERPSyncLogRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncLogRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromERPSyncLogRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncLogRecursive1']


class OrganizationIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncLogRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromERPSyncLogRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromERPSyncLogRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncLogRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromERPSyncLogRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncLogRecursive2']


class OrganizationIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncLogRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromERPSyncLogRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromERPSyncLogRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncLogRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromERPSyncLogRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncLogRecursive3']


class OrganizationIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromERPSyncLogRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromERPSyncLogRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromERPSyncLogRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncLogRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromERPSyncLogRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncLogRecursive4']


class OrganizationIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class OrganizationArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyOrganizationArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    user: Union[bool, 'UserArgsFromERPSyncLogRecursive1']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive1']


class OrganizationMemberIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    user: Union[bool, 'UserArgsFromERPSyncLogRecursive2']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive2']


class OrganizationMemberIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    user: Union[bool, 'UserArgsFromERPSyncLogRecursive3']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive3']


class OrganizationMemberIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    user: Union[bool, 'UserArgsFromERPSyncLogRecursive4']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive4']


class OrganizationMemberIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class OrganizationMemberArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyOrganizationMemberArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromERPSyncLogRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncLogRecursive1']


class DriverIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromERPSyncLogRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncLogRecursive2']


class DriverIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromERPSyncLogRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncLogRecursive3']


class DriverIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromERPSyncLogRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncLogRecursive4']


class DriverIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class DriverArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyDriverArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncLogRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncLogRecursive1']


class VehicleIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncLogRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncLogRecursive2']


class VehicleIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncLogRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncLogRecursive3']


class VehicleIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromERPSyncLogRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromERPSyncLogRecursive4']


class VehicleIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class VehicleArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyVehicleArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    vehicle: Union[bool, 'VehicleArgsFromERPSyncLogRecursive1']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromERPSyncLogRecursive1']


class MaintenanceIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    vehicle: Union[bool, 'VehicleArgsFromERPSyncLogRecursive2']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromERPSyncLogRecursive2']


class MaintenanceIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    vehicle: Union[bool, 'VehicleArgsFromERPSyncLogRecursive3']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromERPSyncLogRecursive3']


class MaintenanceIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    vehicle: Union[bool, 'VehicleArgsFromERPSyncLogRecursive4']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromERPSyncLogRecursive4']


class MaintenanceIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class MaintenanceArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyMaintenanceArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    maintenance: Union[bool, 'MaintenanceArgsFromERPSyncLogRecursive1']


class MaintenancePartIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    maintenance: Union[bool, 'MaintenanceArgsFromERPSyncLogRecursive2']


class MaintenancePartIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    maintenance: Union[bool, 'MaintenanceArgsFromERPSyncLogRecursive3']


class MaintenancePartIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    maintenance: Union[bool, 'MaintenanceArgsFromERPSyncLogRecursive4']


class MaintenancePartIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class MaintenancePartArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyMaintenancePartArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    driver: Union[bool, 'DriverArgsFromERPSyncLogRecursive1']


class DriverPerformanceIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    driver: Union[bool, 'DriverArgsFromERPSyncLogRecursive2']


class DriverPerformanceIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    driver: Union[bool, 'DriverArgsFromERPSyncLogRecursive3']


class DriverPerformanceIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    driver: Union[bool, 'DriverArgsFromERPSyncLogRecursive4']


class DriverPerformanceIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class DriverPerformanceArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyDriverPerformanceArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    driver: Union[bool, 'DriverArgsFromERPSyncLogRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromERPSyncLogRecursive1']


class DrivingRecordIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    driver: Union[bool, 'DriverArgsFromERPSyncLogRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromERPSyncLogRecursive2']


class DrivingRecordIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    driver: Union[bool, 'DriverArgsFromERPSyncLogRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromERPSyncLogRecursive3']


class DrivingRecordIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    driver: Union[bool, 'DriverArgsFromERPSyncLogRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromERPSyncLogRecursive4']


class DrivingRecordIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class DrivingRecordArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyDrivingRecordArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncLogRecursive1']


class ERPSyncConfigIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncLogRecursive2']


class ERPSyncConfigIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncLogRecursive3']


class ERPSyncConfigIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromERPSyncLogRecursive4']


class ERPSyncConfigIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class ERPSyncConfigArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyERPSyncConfigArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    config: Union[bool, 'ERPSyncConfigArgsFromERPSyncLogRecursive1']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive1']


class ERPSyncLogIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    config: Union[bool, 'ERPSyncConfigArgsFromERPSyncLogRecursive2']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive2']


class ERPSyncLogIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    config: Union[bool, 'ERPSyncConfigArgsFromERPSyncLogRecursive3']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive3']


class ERPSyncLogIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    config: Union[bool, 'ERPSyncConfigArgsFromERPSyncLogRecursive4']
    organization: Union[bool, 'OrganizationArgsFromERPSyncLogRecursive4']


class ERPSyncLogIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class ERPSyncLogArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyERPSyncLogArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    technician: Union[bool, 'UserArgsFromERPSyncLogRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncLogRecursive1']


class RepairIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    technician: Union[bool, 'UserArgsFromERPSyncLogRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncLogRecursive2']


class RepairIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    technician: Union[bool, 'UserArgsFromERPSyncLogRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncLogRecursive3']


class RepairIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    technician: Union[bool, 'UserArgsFromERPSyncLogRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromERPSyncLogRecursive4']


class RepairIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class RepairArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyRepairArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromERPSyncLog(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    repair: Union[bool, 'RepairArgsFromERPSyncLogRecursive1']
    technician: Union[bool, 'UserArgsFromERPSyncLogRecursive1']


class StatusHistoryIncludeFromERPSyncLogRecursive1(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    repair: Union[bool, 'RepairArgsFromERPSyncLogRecursive2']
    technician: Union[bool, 'UserArgsFromERPSyncLogRecursive2']


class StatusHistoryIncludeFromERPSyncLogRecursive2(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    repair: Union[bool, 'RepairArgsFromERPSyncLogRecursive3']
    technician: Union[bool, 'UserArgsFromERPSyncLogRecursive3']


class StatusHistoryIncludeFromERPSyncLogRecursive3(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""
    repair: Union[bool, 'RepairArgsFromERPSyncLogRecursive4']
    technician: Union[bool, 'UserArgsFromERPSyncLogRecursive4']


class StatusHistoryIncludeFromERPSyncLogRecursive4(TypedDict, total=False):
    """Relational arguments for ERPSyncLog"""

    

class StatusHistoryArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    
    

class FindManyStatusHistoryArgsFromERPSyncLog(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromERPSyncLogRecursive1(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromERPSyncLogRecursive2(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromERPSyncLogRecursive3(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromERPSyncLogRecursive4(TypedDict, total=False):
    """Arguments for ERPSyncLog"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyERPSyncLogArgs = FindManyERPSyncLogArgsFromERPSyncLog
FindFirstERPSyncLogArgs = FindManyERPSyncLogArgsFromERPSyncLog


    

class ERPSyncLogWhereInput(TypedDict, total=False):
    """ERPSyncLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    configId: Union[_str, 'types.StringFilter']
    config: 'ERPSyncConfigRelationFilter'
    status: 'enums.SyncStatusType'
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[None, datetime.datetime, 'types.DateTimeFilter']
    direction: 'enums.SyncDirectionType'
    totalItems: Union[None, _int, 'types.IntFilter']
    processedItems: Union[None, _int, 'types.IntFilter']
    successItems: Union[None, _int, 'types.IntFilter']
    failedItems: Union[None, _int, 'types.IntFilter']
    errorDetails: Union[None, _str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ERPSyncLogWhereInputRecursive1', List['ERPSyncLogWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ERPSyncLogWhereInputRecursive1']
    OR: List['ERPSyncLogWhereInputRecursive1']
    NOT: List['ERPSyncLogWhereInputRecursive1']


class ERPSyncLogWhereInputRecursive1(TypedDict, total=False):
    """ERPSyncLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    configId: Union[_str, 'types.StringFilter']
    config: 'ERPSyncConfigRelationFilter'
    status: 'enums.SyncStatusType'
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[None, datetime.datetime, 'types.DateTimeFilter']
    direction: 'enums.SyncDirectionType'
    totalItems: Union[None, _int, 'types.IntFilter']
    processedItems: Union[None, _int, 'types.IntFilter']
    successItems: Union[None, _int, 'types.IntFilter']
    failedItems: Union[None, _int, 'types.IntFilter']
    errorDetails: Union[None, _str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ERPSyncLogWhereInputRecursive2', List['ERPSyncLogWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ERPSyncLogWhereInputRecursive2']
    OR: List['ERPSyncLogWhereInputRecursive2']
    NOT: List['ERPSyncLogWhereInputRecursive2']


class ERPSyncLogWhereInputRecursive2(TypedDict, total=False):
    """ERPSyncLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    configId: Union[_str, 'types.StringFilter']
    config: 'ERPSyncConfigRelationFilter'
    status: 'enums.SyncStatusType'
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[None, datetime.datetime, 'types.DateTimeFilter']
    direction: 'enums.SyncDirectionType'
    totalItems: Union[None, _int, 'types.IntFilter']
    processedItems: Union[None, _int, 'types.IntFilter']
    successItems: Union[None, _int, 'types.IntFilter']
    failedItems: Union[None, _int, 'types.IntFilter']
    errorDetails: Union[None, _str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ERPSyncLogWhereInputRecursive3', List['ERPSyncLogWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ERPSyncLogWhereInputRecursive3']
    OR: List['ERPSyncLogWhereInputRecursive3']
    NOT: List['ERPSyncLogWhereInputRecursive3']


class ERPSyncLogWhereInputRecursive3(TypedDict, total=False):
    """ERPSyncLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    configId: Union[_str, 'types.StringFilter']
    config: 'ERPSyncConfigRelationFilter'
    status: 'enums.SyncStatusType'
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[None, datetime.datetime, 'types.DateTimeFilter']
    direction: 'enums.SyncDirectionType'
    totalItems: Union[None, _int, 'types.IntFilter']
    processedItems: Union[None, _int, 'types.IntFilter']
    successItems: Union[None, _int, 'types.IntFilter']
    failedItems: Union[None, _int, 'types.IntFilter']
    errorDetails: Union[None, _str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ERPSyncLogWhereInputRecursive4', List['ERPSyncLogWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ERPSyncLogWhereInputRecursive4']
    OR: List['ERPSyncLogWhereInputRecursive4']
    NOT: List['ERPSyncLogWhereInputRecursive4']


class ERPSyncLogWhereInputRecursive4(TypedDict, total=False):
    """ERPSyncLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    configId: Union[_str, 'types.StringFilter']
    config: 'ERPSyncConfigRelationFilter'
    status: 'enums.SyncStatusType'
    startTime: Union[datetime.datetime, 'types.DateTimeFilter']
    endTime: Union[None, datetime.datetime, 'types.DateTimeFilter']
    direction: 'enums.SyncDirectionType'
    totalItems: Union[None, _int, 'types.IntFilter']
    processedItems: Union[None, _int, 'types.IntFilter']
    successItems: Union[None, _int, 'types.IntFilter']
    failedItems: Union[None, _int, 'types.IntFilter']
    errorDetails: Union[None, _str, 'types.StringFilter']
    organizationId: Union[_str, 'types.StringFilter']
    organization: 'OrganizationRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate ERPSyncLog types


    

class ERPSyncLogScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ERPSyncLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    configId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.SyncStatusType'
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    direction: 'enums.SyncDirectionType'
    totalItems: Union[_int, 'types.IntWithAggregatesFilter']
    processedItems: Union[_int, 'types.IntWithAggregatesFilter']
    successItems: Union[_int, 'types.IntWithAggregatesFilter']
    failedItems: Union[_int, 'types.IntWithAggregatesFilter']
    errorDetails: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive1']
    OR: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive1']


class ERPSyncLogScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ERPSyncLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    configId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.SyncStatusType'
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    direction: 'enums.SyncDirectionType'
    totalItems: Union[_int, 'types.IntWithAggregatesFilter']
    processedItems: Union[_int, 'types.IntWithAggregatesFilter']
    successItems: Union[_int, 'types.IntWithAggregatesFilter']
    failedItems: Union[_int, 'types.IntWithAggregatesFilter']
    errorDetails: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive2']
    OR: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive2']


class ERPSyncLogScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ERPSyncLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    configId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.SyncStatusType'
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    direction: 'enums.SyncDirectionType'
    totalItems: Union[_int, 'types.IntWithAggregatesFilter']
    processedItems: Union[_int, 'types.IntWithAggregatesFilter']
    successItems: Union[_int, 'types.IntWithAggregatesFilter']
    failedItems: Union[_int, 'types.IntWithAggregatesFilter']
    errorDetails: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive3']
    OR: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive3']


class ERPSyncLogScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ERPSyncLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    configId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.SyncStatusType'
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    direction: 'enums.SyncDirectionType'
    totalItems: Union[_int, 'types.IntWithAggregatesFilter']
    processedItems: Union[_int, 'types.IntWithAggregatesFilter']
    successItems: Union[_int, 'types.IntWithAggregatesFilter']
    failedItems: Union[_int, 'types.IntWithAggregatesFilter']
    errorDetails: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive4']
    OR: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ERPSyncLogScalarWhereWithAggregatesInputRecursive4']


class ERPSyncLogScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ERPSyncLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    configId: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.SyncStatusType'
    startTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endTime: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    direction: 'enums.SyncDirectionType'
    totalItems: Union[_int, 'types.IntWithAggregatesFilter']
    processedItems: Union[_int, 'types.IntWithAggregatesFilter']
    successItems: Union[_int, 'types.IntWithAggregatesFilter']
    failedItems: Union[_int, 'types.IntWithAggregatesFilter']
    errorDetails: Union[_str, 'types.StringWithAggregatesFilter']
    organizationId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ERPSyncLogGroupByOutput(TypedDict, total=False):
    id: _str
    configId: _str
    status: 'enums.SyncStatusType'
    startTime: datetime.datetime
    endTime: datetime.datetime
    direction: 'enums.SyncDirectionType'
    totalItems: _int
    processedItems: _int
    successItems: _int
    failedItems: _int
    errorDetails: _str
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ERPSyncLogSumAggregateOutput'
    _avg: 'ERPSyncLogAvgAggregateOutput'
    _min: 'ERPSyncLogMinAggregateOutput'
    _max: 'ERPSyncLogMaxAggregateOutput'
    _count: 'ERPSyncLogCountAggregateOutput'


class ERPSyncLogAvgAggregateOutput(TypedDict, total=False):
    """ERPSyncLog output for aggregating averages"""
    totalItems: float
    processedItems: float
    successItems: float
    failedItems: float


class ERPSyncLogSumAggregateOutput(TypedDict, total=False):
    """ERPSyncLog output for aggregating sums"""
    totalItems: _int
    processedItems: _int
    successItems: _int
    failedItems: _int


class ERPSyncLogScalarAggregateOutput(TypedDict, total=False):
    """ERPSyncLog output including scalar fields"""
    id: _str
    configId: _str
    status: 'enums.SyncStatusType'
    startTime: datetime.datetime
    endTime: datetime.datetime
    direction: 'enums.SyncDirectionType'
    totalItems: _int
    processedItems: _int
    successItems: _int
    failedItems: _int
    errorDetails: _str
    organizationId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ERPSyncLogMinAggregateOutput = ERPSyncLogScalarAggregateOutput
ERPSyncLogMaxAggregateOutput = ERPSyncLogScalarAggregateOutput


class ERPSyncLogMaxAggregateInput(TypedDict, total=False):
    """ERPSyncLog input for aggregating by max"""
    id: bool
    configId: bool
    status: bool
    startTime: bool
    endTime: bool
    direction: bool
    totalItems: bool
    processedItems: bool
    successItems: bool
    failedItems: bool
    errorDetails: bool
    organizationId: bool
    createdAt: bool
    updatedAt: bool


class ERPSyncLogMinAggregateInput(TypedDict, total=False):
    """ERPSyncLog input for aggregating by min"""
    id: bool
    configId: bool
    status: bool
    startTime: bool
    endTime: bool
    direction: bool
    totalItems: bool
    processedItems: bool
    successItems: bool
    failedItems: bool
    errorDetails: bool
    organizationId: bool
    createdAt: bool
    updatedAt: bool


class ERPSyncLogNumberAggregateInput(TypedDict, total=False):
    """ERPSyncLog input for aggregating numbers"""
    totalItems: bool
    processedItems: bool
    successItems: bool
    failedItems: bool


ERPSyncLogAvgAggregateInput = ERPSyncLogNumberAggregateInput
ERPSyncLogSumAggregateInput = ERPSyncLogNumberAggregateInput


ERPSyncLogCountAggregateInput = TypedDict(
    'ERPSyncLogCountAggregateInput',
    {
        'id': bool,
        'configId': bool,
        'status': bool,
        'startTime': bool,
        'endTime': bool,
        'direction': bool,
        'totalItems': bool,
        'processedItems': bool,
        'successItems': bool,
        'failedItems': bool,
        'errorDetails': bool,
        'organizationId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ERPSyncLogCountAggregateOutput = TypedDict(
    'ERPSyncLogCountAggregateOutput',
    {
        'id': int,
        'configId': int,
        'status': int,
        'startTime': int,
        'endTime': int,
        'direction': int,
        'totalItems': int,
        'processedItems': int,
        'successItems': int,
        'failedItems': int,
        'errorDetails': int,
        'organizationId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ERPSyncLogKeys = Literal[
    'id',
    'configId',
    'config',
    'status',
    'startTime',
    'endTime',
    'direction',
    'totalItems',
    'processedItems',
    'successItems',
    'failedItems',
    'errorDetails',
    'organizationId',
    'organization',
    'createdAt',
    'updatedAt',
]
ERPSyncLogScalarFieldKeys = Literal[
    'id',
    'configId',
    'status',
    'startTime',
    'endTime',
    'direction',
    'totalItems',
    'processedItems',
    'successItems',
    'failedItems',
    'errorDetails',
    'organizationId',
    'createdAt',
    'updatedAt',
]
ERPSyncLogScalarFieldKeysT = TypeVar('ERPSyncLogScalarFieldKeysT', bound=ERPSyncLogScalarFieldKeys)

ERPSyncLogRelationalFieldKeys = Literal[
        'config',
        'organization',
    ]

# Repair types

class RepairOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Repair create method"""
    id: _str
    technician_id: Optional[_str]
    technician: 'UserCreateNestedWithoutRelationsInput'
    reservation_id: Optional[_str]
    start_time: Optional[datetime.datetime]
    completion_time: Optional[datetime.datetime]
    status: 'enums.RepairStatus'
    parts_required: _bool
    notes: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime
    statusHistories: 'StatusHistoryCreateManyNestedWithoutRelationsInput'


class RepairCreateInput(RepairOptionalCreateInput):
    """Required arguments to the Repair create method"""
    vehicle_id: _str
    repair_type: 'enums.RepairType'
    description: _str
    estimated_hours: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RepairOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Repair create method, without relations"""
    id: _str
    technician_id: Optional[_str]
    reservation_id: Optional[_str]
    start_time: Optional[datetime.datetime]
    completion_time: Optional[datetime.datetime]
    status: 'enums.RepairStatus'
    parts_required: _bool
    notes: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class RepairCreateWithoutRelationsInput(RepairOptionalCreateWithoutRelationsInput):
    """Required arguments to the Repair create method, without relations"""
    vehicle_id: _str
    repair_type: 'enums.RepairType'
    description: _str
    estimated_hours: _float

class RepairConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'RepairCreateWithoutRelationsInput'
    where: 'RepairWhereUniqueInput'

class RepairCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RepairCreateWithoutRelationsInput'
    connect: 'RepairWhereUniqueInput'
    connect_or_create: 'RepairConnectOrCreateWithoutRelationsInput'


class RepairCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RepairCreateWithoutRelationsInput', List['RepairCreateWithoutRelationsInput']]
    connect: Union['RepairWhereUniqueInput', List['RepairWhereUniqueInput']]
    connect_or_create: Union['RepairConnectOrCreateWithoutRelationsInput', List['RepairConnectOrCreateWithoutRelationsInput']]

_RepairWhereUnique_id_Input = TypedDict(
    '_RepairWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

RepairWhereUniqueInput = _RepairWhereUnique_id_Input


class RepairUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    vehicle_id: _str
    repair_type: 'enums.RepairType'
    description: _str
    estimated_hours: Union[AtomicFloatInput, _float]
    technician: 'UserUpdateOneWithoutRelationsInput'
    reservation_id: Optional[_str]
    start_time: Optional[datetime.datetime]
    completion_time: Optional[datetime.datetime]
    status: 'enums.RepairStatus'
    parts_required: _bool
    notes: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime
    statusHistories: 'StatusHistoryUpdateManyWithoutRelationsInput'


class RepairUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    vehicle_id: _str
    repair_type: 'enums.RepairType'
    description: _str
    estimated_hours: Union[AtomicFloatInput, _float]
    reservation_id: Optional[_str]
    start_time: Optional[datetime.datetime]
    completion_time: Optional[datetime.datetime]
    status: 'enums.RepairStatus'
    parts_required: _bool
    notes: Optional[_str]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class RepairUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RepairCreateWithoutRelationsInput']
    connect: List['RepairWhereUniqueInput']
    connect_or_create: List['RepairConnectOrCreateWithoutRelationsInput']
    set: List['RepairWhereUniqueInput']
    disconnect: List['RepairWhereUniqueInput']
    delete: List['RepairWhereUniqueInput']

    # TODO
    # update: List['RepairUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RepairUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RepairScalarWhereInput']
    # upsert: List['RepairUpserteWithWhereUniqueWithoutRelationsInput']


class RepairUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RepairCreateWithoutRelationsInput'
    connect: 'RepairWhereUniqueInput'
    connect_or_create: 'RepairConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RepairUpdateInput'
    # upsert: 'RepairUpsertWithoutRelationsInput'


class RepairUpsertInput(TypedDict):
    create: 'RepairCreateInput'
    update: 'RepairUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Repair_id_OrderByInput = TypedDict(
    '_Repair_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Repair_vehicle_id_OrderByInput = TypedDict(
    '_Repair_vehicle_id_OrderByInput',
    {
        'vehicle_id': 'SortOrder',
    },
    total=True
)

_Repair_repair_type_OrderByInput = TypedDict(
    '_Repair_repair_type_OrderByInput',
    {
        'repair_type': 'SortOrder',
    },
    total=True
)

_Repair_description_OrderByInput = TypedDict(
    '_Repair_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Repair_estimated_hours_OrderByInput = TypedDict(
    '_Repair_estimated_hours_OrderByInput',
    {
        'estimated_hours': 'SortOrder',
    },
    total=True
)

_Repair_technician_id_OrderByInput = TypedDict(
    '_Repair_technician_id_OrderByInput',
    {
        'technician_id': 'SortOrder',
    },
    total=True
)

_Repair_reservation_id_OrderByInput = TypedDict(
    '_Repair_reservation_id_OrderByInput',
    {
        'reservation_id': 'SortOrder',
    },
    total=True
)

_Repair_start_time_OrderByInput = TypedDict(
    '_Repair_start_time_OrderByInput',
    {
        'start_time': 'SortOrder',
    },
    total=True
)

_Repair_completion_time_OrderByInput = TypedDict(
    '_Repair_completion_time_OrderByInput',
    {
        'completion_time': 'SortOrder',
    },
    total=True
)

_Repair_status_OrderByInput = TypedDict(
    '_Repair_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Repair_parts_required_OrderByInput = TypedDict(
    '_Repair_parts_required_OrderByInput',
    {
        'parts_required': 'SortOrder',
    },
    total=True
)

_Repair_notes_OrderByInput = TypedDict(
    '_Repair_notes_OrderByInput',
    {
        'notes': 'SortOrder',
    },
    total=True
)

_Repair_created_at_OrderByInput = TypedDict(
    '_Repair_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Repair_updated_at_OrderByInput = TypedDict(
    '_Repair_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_Repair_RelevanceInner = TypedDict(
    '_Repair_RelevanceInner',
    {
        'fields': 'List[RepairScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Repair_RelevanceOrderByInput = TypedDict(
    '_Repair_RelevanceOrderByInput',
    {
        '_relevance': '_Repair_RelevanceInner',
    },
    total=True
)

RepairOrderByInput = Union[
    '_Repair_id_OrderByInput',
    '_Repair_vehicle_id_OrderByInput',
    '_Repair_repair_type_OrderByInput',
    '_Repair_description_OrderByInput',
    '_Repair_estimated_hours_OrderByInput',
    '_Repair_technician_id_OrderByInput',
    '_Repair_reservation_id_OrderByInput',
    '_Repair_start_time_OrderByInput',
    '_Repair_completion_time_OrderByInput',
    '_Repair_status_OrderByInput',
    '_Repair_parts_required_OrderByInput',
    '_Repair_notes_OrderByInput',
    '_Repair_created_at_OrderByInput',
    '_Repair_updated_at_OrderByInput',
    '_Repair_RelevanceOrderByInput',
]



# recursive Repair types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RepairRelationFilter = TypedDict(
    'RepairRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RepairListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RepairInclude(TypedDict, total=False):
    """Repair relational arguments"""
    technician: Union[bool, 'UserArgsFromRepair']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromRepair']


    

class UserIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRepairRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRepairRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromRepairRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromRepairRecursive1']


class UserIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRepairRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRepairRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromRepairRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromRepairRecursive2']


class UserIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRepairRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRepairRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromRepairRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromRepairRecursive3']


class UserIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromRepairRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromRepairRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromRepairRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromRepairRecursive4']


class UserIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class UserArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyUserArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRepairRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRepairRecursive1']


class PermissionIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRepairRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRepairRecursive2']


class PermissionIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRepairRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRepairRecursive3']


class PermissionIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromRepairRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromRepairRecursive4']


class PermissionIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class PermissionArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyPermissionArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    user: Union[bool, 'UserArgsFromRepairRecursive1']
    permission: Union[bool, 'PermissionArgsFromRepairRecursive1']


class UserPermissionIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    user: Union[bool, 'UserArgsFromRepairRecursive2']
    permission: Union[bool, 'PermissionArgsFromRepairRecursive2']


class UserPermissionIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    user: Union[bool, 'UserArgsFromRepairRecursive3']
    permission: Union[bool, 'PermissionArgsFromRepairRecursive3']


class UserPermissionIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    user: Union[bool, 'UserArgsFromRepairRecursive4']
    permission: Union[bool, 'PermissionArgsFromRepairRecursive4']


class UserPermissionIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class UserPermissionArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyUserPermissionArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    permission: Union[bool, 'PermissionArgsFromRepairRecursive1']


class RolePermissionIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    permission: Union[bool, 'PermissionArgsFromRepairRecursive2']


class RolePermissionIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    permission: Union[bool, 'PermissionArgsFromRepairRecursive3']


class RolePermissionIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    permission: Union[bool, 'PermissionArgsFromRepairRecursive4']


class RolePermissionIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class RolePermissionArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyRolePermissionArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRepairRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromRepairRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromRepairRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRepairRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromRepairRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRepairRecursive1']


class OrganizationIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRepairRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromRepairRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromRepairRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRepairRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromRepairRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRepairRecursive2']


class OrganizationIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRepairRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromRepairRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromRepairRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRepairRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromRepairRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRepairRecursive3']


class OrganizationIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromRepairRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromRepairRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromRepairRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRepairRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromRepairRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRepairRecursive4']


class OrganizationIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class OrganizationArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyOrganizationArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    user: Union[bool, 'UserArgsFromRepairRecursive1']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive1']


class OrganizationMemberIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    user: Union[bool, 'UserArgsFromRepairRecursive2']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive2']


class OrganizationMemberIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    user: Union[bool, 'UserArgsFromRepairRecursive3']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive3']


class OrganizationMemberIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    user: Union[bool, 'UserArgsFromRepairRecursive4']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive4']


class OrganizationMemberIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class OrganizationMemberArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyOrganizationMemberArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromRepairRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRepairRecursive1']


class DriverIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromRepairRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRepairRecursive2']


class DriverIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromRepairRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRepairRecursive3']


class DriverIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromRepairRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRepairRecursive4']


class DriverIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class DriverArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyDriverArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRepairRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRepairRecursive1']


class VehicleIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRepairRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRepairRecursive2']


class VehicleIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRepairRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRepairRecursive3']


class VehicleIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromRepairRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromRepairRecursive4']


class VehicleIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class VehicleArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyVehicleArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    vehicle: Union[bool, 'VehicleArgsFromRepairRecursive1']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromRepairRecursive1']


class MaintenanceIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    vehicle: Union[bool, 'VehicleArgsFromRepairRecursive2']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromRepairRecursive2']


class MaintenanceIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    vehicle: Union[bool, 'VehicleArgsFromRepairRecursive3']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromRepairRecursive3']


class MaintenanceIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    vehicle: Union[bool, 'VehicleArgsFromRepairRecursive4']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromRepairRecursive4']


class MaintenanceIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class MaintenanceArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyMaintenanceArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    maintenance: Union[bool, 'MaintenanceArgsFromRepairRecursive1']


class MaintenancePartIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    maintenance: Union[bool, 'MaintenanceArgsFromRepairRecursive2']


class MaintenancePartIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    maintenance: Union[bool, 'MaintenanceArgsFromRepairRecursive3']


class MaintenancePartIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    maintenance: Union[bool, 'MaintenanceArgsFromRepairRecursive4']


class MaintenancePartIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class MaintenancePartArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyMaintenancePartArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    driver: Union[bool, 'DriverArgsFromRepairRecursive1']


class DriverPerformanceIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    driver: Union[bool, 'DriverArgsFromRepairRecursive2']


class DriverPerformanceIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    driver: Union[bool, 'DriverArgsFromRepairRecursive3']


class DriverPerformanceIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    driver: Union[bool, 'DriverArgsFromRepairRecursive4']


class DriverPerformanceIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class DriverPerformanceArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyDriverPerformanceArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    driver: Union[bool, 'DriverArgsFromRepairRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromRepairRecursive1']


class DrivingRecordIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    driver: Union[bool, 'DriverArgsFromRepairRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromRepairRecursive2']


class DrivingRecordIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    driver: Union[bool, 'DriverArgsFromRepairRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromRepairRecursive3']


class DrivingRecordIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    driver: Union[bool, 'DriverArgsFromRepairRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromRepairRecursive4']


class DrivingRecordIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class DrivingRecordArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyDrivingRecordArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRepairRecursive1']


class ERPSyncConfigIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRepairRecursive2']


class ERPSyncConfigIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRepairRecursive3']


class ERPSyncConfigIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromRepairRecursive4']


class ERPSyncConfigIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class ERPSyncConfigArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyERPSyncConfigArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    config: Union[bool, 'ERPSyncConfigArgsFromRepairRecursive1']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive1']


class ERPSyncLogIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    config: Union[bool, 'ERPSyncConfigArgsFromRepairRecursive2']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive2']


class ERPSyncLogIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    config: Union[bool, 'ERPSyncConfigArgsFromRepairRecursive3']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive3']


class ERPSyncLogIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    config: Union[bool, 'ERPSyncConfigArgsFromRepairRecursive4']
    organization: Union[bool, 'OrganizationArgsFromRepairRecursive4']


class ERPSyncLogIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class ERPSyncLogArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyERPSyncLogArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    technician: Union[bool, 'UserArgsFromRepairRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromRepairRecursive1']


class RepairIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    technician: Union[bool, 'UserArgsFromRepairRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromRepairRecursive2']


class RepairIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    technician: Union[bool, 'UserArgsFromRepairRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromRepairRecursive3']


class RepairIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    technician: Union[bool, 'UserArgsFromRepairRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromRepairRecursive4']


class RepairIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class RepairArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyRepairArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromRepair(TypedDict, total=False):
    """Relational arguments for Repair"""
    repair: Union[bool, 'RepairArgsFromRepairRecursive1']
    technician: Union[bool, 'UserArgsFromRepairRecursive1']


class StatusHistoryIncludeFromRepairRecursive1(TypedDict, total=False):
    """Relational arguments for Repair"""
    repair: Union[bool, 'RepairArgsFromRepairRecursive2']
    technician: Union[bool, 'UserArgsFromRepairRecursive2']


class StatusHistoryIncludeFromRepairRecursive2(TypedDict, total=False):
    """Relational arguments for Repair"""
    repair: Union[bool, 'RepairArgsFromRepairRecursive3']
    technician: Union[bool, 'UserArgsFromRepairRecursive3']


class StatusHistoryIncludeFromRepairRecursive3(TypedDict, total=False):
    """Relational arguments for Repair"""
    repair: Union[bool, 'RepairArgsFromRepairRecursive4']
    technician: Union[bool, 'UserArgsFromRepairRecursive4']


class StatusHistoryIncludeFromRepairRecursive4(TypedDict, total=False):
    """Relational arguments for Repair"""

    

class StatusHistoryArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    
    

class FindManyStatusHistoryArgsFromRepair(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromRepairRecursive1(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromRepairRecursive2(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromRepairRecursive3(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromRepairRecursive4(TypedDict, total=False):
    """Arguments for Repair"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyRepairArgs = FindManyRepairArgsFromRepair
FindFirstRepairArgs = FindManyRepairArgsFromRepair


    

class RepairWhereInput(TypedDict, total=False):
    """Repair arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    vehicle_id: Union[_str, 'types.StringFilter']
    repair_type: 'enums.RepairType'
    description: Union[_str, 'types.StringFilter']
    estimated_hours: Union[_float, 'types.FloatFilter']
    technician_id: Union[None, _str, 'types.StringFilter']
    technician: 'UserRelationFilter'
    reservation_id: Union[None, _str, 'types.StringFilter']
    start_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    completion_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.RepairStatus'
    parts_required: Union[_bool, 'types.BooleanFilter']
    notes: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    statusHistories: 'StatusHistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['RepairWhereInputRecursive1', List['RepairWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RepairWhereInputRecursive1']
    OR: List['RepairWhereInputRecursive1']
    NOT: List['RepairWhereInputRecursive1']


class RepairWhereInputRecursive1(TypedDict, total=False):
    """Repair arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    vehicle_id: Union[_str, 'types.StringFilter']
    repair_type: 'enums.RepairType'
    description: Union[_str, 'types.StringFilter']
    estimated_hours: Union[_float, 'types.FloatFilter']
    technician_id: Union[None, _str, 'types.StringFilter']
    technician: 'UserRelationFilter'
    reservation_id: Union[None, _str, 'types.StringFilter']
    start_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    completion_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.RepairStatus'
    parts_required: Union[_bool, 'types.BooleanFilter']
    notes: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    statusHistories: 'StatusHistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['RepairWhereInputRecursive2', List['RepairWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RepairWhereInputRecursive2']
    OR: List['RepairWhereInputRecursive2']
    NOT: List['RepairWhereInputRecursive2']


class RepairWhereInputRecursive2(TypedDict, total=False):
    """Repair arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    vehicle_id: Union[_str, 'types.StringFilter']
    repair_type: 'enums.RepairType'
    description: Union[_str, 'types.StringFilter']
    estimated_hours: Union[_float, 'types.FloatFilter']
    technician_id: Union[None, _str, 'types.StringFilter']
    technician: 'UserRelationFilter'
    reservation_id: Union[None, _str, 'types.StringFilter']
    start_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    completion_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.RepairStatus'
    parts_required: Union[_bool, 'types.BooleanFilter']
    notes: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    statusHistories: 'StatusHistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['RepairWhereInputRecursive3', List['RepairWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RepairWhereInputRecursive3']
    OR: List['RepairWhereInputRecursive3']
    NOT: List['RepairWhereInputRecursive3']


class RepairWhereInputRecursive3(TypedDict, total=False):
    """Repair arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    vehicle_id: Union[_str, 'types.StringFilter']
    repair_type: 'enums.RepairType'
    description: Union[_str, 'types.StringFilter']
    estimated_hours: Union[_float, 'types.FloatFilter']
    technician_id: Union[None, _str, 'types.StringFilter']
    technician: 'UserRelationFilter'
    reservation_id: Union[None, _str, 'types.StringFilter']
    start_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    completion_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.RepairStatus'
    parts_required: Union[_bool, 'types.BooleanFilter']
    notes: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    statusHistories: 'StatusHistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['RepairWhereInputRecursive4', List['RepairWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RepairWhereInputRecursive4']
    OR: List['RepairWhereInputRecursive4']
    NOT: List['RepairWhereInputRecursive4']


class RepairWhereInputRecursive4(TypedDict, total=False):
    """Repair arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    vehicle_id: Union[_str, 'types.StringFilter']
    repair_type: 'enums.RepairType'
    description: Union[_str, 'types.StringFilter']
    estimated_hours: Union[_float, 'types.FloatFilter']
    technician_id: Union[None, _str, 'types.StringFilter']
    technician: 'UserRelationFilter'
    reservation_id: Union[None, _str, 'types.StringFilter']
    start_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    completion_time: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.RepairStatus'
    parts_required: Union[_bool, 'types.BooleanFilter']
    notes: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    statusHistories: 'StatusHistoryListRelationFilter'



# aggregate Repair types


    

class RepairScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Repair arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    vehicle_id: Union[_str, 'types.StringWithAggregatesFilter']
    repair_type: 'enums.RepairType'
    description: Union[_str, 'types.StringWithAggregatesFilter']
    estimated_hours: Union[_float, 'types.FloatWithAggregatesFilter']
    technician_id: Union[_str, 'types.StringWithAggregatesFilter']
    reservation_id: Union[_str, 'types.StringWithAggregatesFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    completion_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.RepairStatus'
    parts_required: Union[_bool, 'types.BooleanWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RepairScalarWhereWithAggregatesInputRecursive1']
    OR: List['RepairScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RepairScalarWhereWithAggregatesInputRecursive1']


class RepairScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Repair arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    vehicle_id: Union[_str, 'types.StringWithAggregatesFilter']
    repair_type: 'enums.RepairType'
    description: Union[_str, 'types.StringWithAggregatesFilter']
    estimated_hours: Union[_float, 'types.FloatWithAggregatesFilter']
    technician_id: Union[_str, 'types.StringWithAggregatesFilter']
    reservation_id: Union[_str, 'types.StringWithAggregatesFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    completion_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.RepairStatus'
    parts_required: Union[_bool, 'types.BooleanWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RepairScalarWhereWithAggregatesInputRecursive2']
    OR: List['RepairScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RepairScalarWhereWithAggregatesInputRecursive2']


class RepairScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Repair arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    vehicle_id: Union[_str, 'types.StringWithAggregatesFilter']
    repair_type: 'enums.RepairType'
    description: Union[_str, 'types.StringWithAggregatesFilter']
    estimated_hours: Union[_float, 'types.FloatWithAggregatesFilter']
    technician_id: Union[_str, 'types.StringWithAggregatesFilter']
    reservation_id: Union[_str, 'types.StringWithAggregatesFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    completion_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.RepairStatus'
    parts_required: Union[_bool, 'types.BooleanWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RepairScalarWhereWithAggregatesInputRecursive3']
    OR: List['RepairScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RepairScalarWhereWithAggregatesInputRecursive3']


class RepairScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Repair arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    vehicle_id: Union[_str, 'types.StringWithAggregatesFilter']
    repair_type: 'enums.RepairType'
    description: Union[_str, 'types.StringWithAggregatesFilter']
    estimated_hours: Union[_float, 'types.FloatWithAggregatesFilter']
    technician_id: Union[_str, 'types.StringWithAggregatesFilter']
    reservation_id: Union[_str, 'types.StringWithAggregatesFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    completion_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.RepairStatus'
    parts_required: Union[_bool, 'types.BooleanWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RepairScalarWhereWithAggregatesInputRecursive4']
    OR: List['RepairScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RepairScalarWhereWithAggregatesInputRecursive4']


class RepairScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Repair arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    vehicle_id: Union[_str, 'types.StringWithAggregatesFilter']
    repair_type: 'enums.RepairType'
    description: Union[_str, 'types.StringWithAggregatesFilter']
    estimated_hours: Union[_float, 'types.FloatWithAggregatesFilter']
    technician_id: Union[_str, 'types.StringWithAggregatesFilter']
    reservation_id: Union[_str, 'types.StringWithAggregatesFilter']
    start_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    completion_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.RepairStatus'
    parts_required: Union[_bool, 'types.BooleanWithAggregatesFilter']
    notes: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class RepairGroupByOutput(TypedDict, total=False):
    id: _str
    vehicle_id: _str
    repair_type: 'enums.RepairType'
    description: _str
    estimated_hours: _float
    technician_id: _str
    reservation_id: _str
    start_time: datetime.datetime
    completion_time: datetime.datetime
    status: 'enums.RepairStatus'
    parts_required: _bool
    notes: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'RepairSumAggregateOutput'
    _avg: 'RepairAvgAggregateOutput'
    _min: 'RepairMinAggregateOutput'
    _max: 'RepairMaxAggregateOutput'
    _count: 'RepairCountAggregateOutput'


class RepairAvgAggregateOutput(TypedDict, total=False):
    """Repair output for aggregating averages"""
    estimated_hours: float


class RepairSumAggregateOutput(TypedDict, total=False):
    """Repair output for aggregating sums"""
    estimated_hours: _float


class RepairScalarAggregateOutput(TypedDict, total=False):
    """Repair output including scalar fields"""
    id: _str
    vehicle_id: _str
    repair_type: 'enums.RepairType'
    description: _str
    estimated_hours: _float
    technician_id: _str
    reservation_id: _str
    start_time: datetime.datetime
    completion_time: datetime.datetime
    status: 'enums.RepairStatus'
    parts_required: _bool
    notes: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


RepairMinAggregateOutput = RepairScalarAggregateOutput
RepairMaxAggregateOutput = RepairScalarAggregateOutput


class RepairMaxAggregateInput(TypedDict, total=False):
    """Repair input for aggregating by max"""
    id: bool
    vehicle_id: bool
    repair_type: bool
    description: bool
    estimated_hours: bool
    technician_id: bool
    reservation_id: bool
    start_time: bool
    completion_time: bool
    status: bool
    parts_required: bool
    notes: bool
    created_at: bool
    updated_at: bool


class RepairMinAggregateInput(TypedDict, total=False):
    """Repair input for aggregating by min"""
    id: bool
    vehicle_id: bool
    repair_type: bool
    description: bool
    estimated_hours: bool
    technician_id: bool
    reservation_id: bool
    start_time: bool
    completion_time: bool
    status: bool
    parts_required: bool
    notes: bool
    created_at: bool
    updated_at: bool


class RepairNumberAggregateInput(TypedDict, total=False):
    """Repair input for aggregating numbers"""
    estimated_hours: bool


RepairAvgAggregateInput = RepairNumberAggregateInput
RepairSumAggregateInput = RepairNumberAggregateInput


RepairCountAggregateInput = TypedDict(
    'RepairCountAggregateInput',
    {
        'id': bool,
        'vehicle_id': bool,
        'repair_type': bool,
        'description': bool,
        'estimated_hours': bool,
        'technician_id': bool,
        'reservation_id': bool,
        'start_time': bool,
        'completion_time': bool,
        'status': bool,
        'parts_required': bool,
        'notes': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

RepairCountAggregateOutput = TypedDict(
    'RepairCountAggregateOutput',
    {
        'id': int,
        'vehicle_id': int,
        'repair_type': int,
        'description': int,
        'estimated_hours': int,
        'technician_id': int,
        'reservation_id': int,
        'start_time': int,
        'completion_time': int,
        'status': int,
        'parts_required': int,
        'notes': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


RepairKeys = Literal[
    'id',
    'vehicle_id',
    'repair_type',
    'description',
    'estimated_hours',
    'technician_id',
    'technician',
    'reservation_id',
    'start_time',
    'completion_time',
    'status',
    'parts_required',
    'notes',
    'created_at',
    'updated_at',
    'statusHistories',
]
RepairScalarFieldKeys = Literal[
    'id',
    'vehicle_id',
    'repair_type',
    'description',
    'estimated_hours',
    'technician_id',
    'reservation_id',
    'start_time',
    'completion_time',
    'status',
    'parts_required',
    'notes',
    'created_at',
    'updated_at',
]
RepairScalarFieldKeysT = TypeVar('RepairScalarFieldKeysT', bound=RepairScalarFieldKeys)

RepairRelationalFieldKeys = Literal[
        'technician',
        'statusHistories',
    ]

# StatusHistory types

class StatusHistoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the StatusHistory create method"""
    id: _str
    repair_id: _str
    repair: 'RepairCreateNestedWithoutRelationsInput'
    timestamp: datetime.datetime
    note: Optional[_str]
    technician_id: Optional[_str]
    technician: 'UserCreateNestedWithoutRelationsInput'


class StatusHistoryCreateInput(StatusHistoryOptionalCreateInput):
    """Required arguments to the StatusHistory create method"""
    status: 'enums.RepairStatus'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class StatusHistoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the StatusHistory create method, without relations"""
    id: _str
    repair_id: _str
    timestamp: datetime.datetime
    note: Optional[_str]
    technician_id: Optional[_str]


class StatusHistoryCreateWithoutRelationsInput(StatusHistoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the StatusHistory create method, without relations"""
    status: 'enums.RepairStatus'

class StatusHistoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'StatusHistoryCreateWithoutRelationsInput'
    where: 'StatusHistoryWhereUniqueInput'

class StatusHistoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'StatusHistoryCreateWithoutRelationsInput'
    connect: 'StatusHistoryWhereUniqueInput'
    connect_or_create: 'StatusHistoryConnectOrCreateWithoutRelationsInput'


class StatusHistoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['StatusHistoryCreateWithoutRelationsInput', List['StatusHistoryCreateWithoutRelationsInput']]
    connect: Union['StatusHistoryWhereUniqueInput', List['StatusHistoryWhereUniqueInput']]
    connect_or_create: Union['StatusHistoryConnectOrCreateWithoutRelationsInput', List['StatusHistoryConnectOrCreateWithoutRelationsInput']]

_StatusHistoryWhereUnique_id_Input = TypedDict(
    '_StatusHistoryWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

StatusHistoryWhereUniqueInput = _StatusHistoryWhereUnique_id_Input


class StatusHistoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    repair: 'RepairUpdateOneWithoutRelationsInput'
    status: 'enums.RepairStatus'
    timestamp: datetime.datetime
    note: Optional[_str]
    technician: 'UserUpdateOneWithoutRelationsInput'


class StatusHistoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    status: 'enums.RepairStatus'
    timestamp: datetime.datetime
    note: Optional[_str]


class StatusHistoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['StatusHistoryCreateWithoutRelationsInput']
    connect: List['StatusHistoryWhereUniqueInput']
    connect_or_create: List['StatusHistoryConnectOrCreateWithoutRelationsInput']
    set: List['StatusHistoryWhereUniqueInput']
    disconnect: List['StatusHistoryWhereUniqueInput']
    delete: List['StatusHistoryWhereUniqueInput']

    # TODO
    # update: List['StatusHistoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['StatusHistoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['StatusHistoryScalarWhereInput']
    # upsert: List['StatusHistoryUpserteWithWhereUniqueWithoutRelationsInput']


class StatusHistoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'StatusHistoryCreateWithoutRelationsInput'
    connect: 'StatusHistoryWhereUniqueInput'
    connect_or_create: 'StatusHistoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'StatusHistoryUpdateInput'
    # upsert: 'StatusHistoryUpsertWithoutRelationsInput'


class StatusHistoryUpsertInput(TypedDict):
    create: 'StatusHistoryCreateInput'
    update: 'StatusHistoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_StatusHistory_id_OrderByInput = TypedDict(
    '_StatusHistory_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_StatusHistory_repair_id_OrderByInput = TypedDict(
    '_StatusHistory_repair_id_OrderByInput',
    {
        'repair_id': 'SortOrder',
    },
    total=True
)

_StatusHistory_status_OrderByInput = TypedDict(
    '_StatusHistory_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_StatusHistory_timestamp_OrderByInput = TypedDict(
    '_StatusHistory_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_StatusHistory_note_OrderByInput = TypedDict(
    '_StatusHistory_note_OrderByInput',
    {
        'note': 'SortOrder',
    },
    total=True
)

_StatusHistory_technician_id_OrderByInput = TypedDict(
    '_StatusHistory_technician_id_OrderByInput',
    {
        'technician_id': 'SortOrder',
    },
    total=True
)

_StatusHistory_RelevanceInner = TypedDict(
    '_StatusHistory_RelevanceInner',
    {
        'fields': 'List[StatusHistoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_StatusHistory_RelevanceOrderByInput = TypedDict(
    '_StatusHistory_RelevanceOrderByInput',
    {
        '_relevance': '_StatusHistory_RelevanceInner',
    },
    total=True
)

StatusHistoryOrderByInput = Union[
    '_StatusHistory_id_OrderByInput',
    '_StatusHistory_repair_id_OrderByInput',
    '_StatusHistory_status_OrderByInput',
    '_StatusHistory_timestamp_OrderByInput',
    '_StatusHistory_note_OrderByInput',
    '_StatusHistory_technician_id_OrderByInput',
    '_StatusHistory_RelevanceOrderByInput',
]



# recursive StatusHistory types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

StatusHistoryRelationFilter = TypedDict(
    'StatusHistoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class StatusHistoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class StatusHistoryInclude(TypedDict, total=False):
    """StatusHistory relational arguments"""
    repair: Union[bool, 'RepairArgsFromStatusHistory']
    technician: Union[bool, 'UserArgsFromStatusHistory']


    

class UserIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromStatusHistoryRecursive1']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromStatusHistoryRecursive1']
    Repair: Union[bool, 'FindManyRepairArgsFromStatusHistoryRecursive1']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromStatusHistoryRecursive1']


class UserIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromStatusHistoryRecursive2']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromStatusHistoryRecursive2']
    Repair: Union[bool, 'FindManyRepairArgsFromStatusHistoryRecursive2']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromStatusHistoryRecursive2']


class UserIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromStatusHistoryRecursive3']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromStatusHistoryRecursive3']
    Repair: Union[bool, 'FindManyRepairArgsFromStatusHistoryRecursive3']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromStatusHistoryRecursive3']


class UserIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    permissions: Union[bool, 'FindManyUserPermissionArgsFromStatusHistoryRecursive4']
    organizations: Union[bool, 'FindManyOrganizationMemberArgsFromStatusHistoryRecursive4']
    Repair: Union[bool, 'FindManyRepairArgsFromStatusHistoryRecursive4']
    StatusHistory: Union[bool, 'FindManyStatusHistoryArgsFromStatusHistoryRecursive4']


class UserIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class UserArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyUserArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PermissionIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromStatusHistoryRecursive1']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromStatusHistoryRecursive1']


class PermissionIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromStatusHistoryRecursive2']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromStatusHistoryRecursive2']


class PermissionIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromStatusHistoryRecursive3']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromStatusHistoryRecursive3']


class PermissionIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    userPermissions: Union[bool, 'FindManyUserPermissionArgsFromStatusHistoryRecursive4']
    rolePermissions: Union[bool, 'FindManyRolePermissionArgsFromStatusHistoryRecursive4']


class PermissionIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class PermissionArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyPermissionArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserPermissionIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    user: Union[bool, 'UserArgsFromStatusHistoryRecursive1']
    permission: Union[bool, 'PermissionArgsFromStatusHistoryRecursive1']


class UserPermissionIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    user: Union[bool, 'UserArgsFromStatusHistoryRecursive2']
    permission: Union[bool, 'PermissionArgsFromStatusHistoryRecursive2']


class UserPermissionIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    user: Union[bool, 'UserArgsFromStatusHistoryRecursive3']
    permission: Union[bool, 'PermissionArgsFromStatusHistoryRecursive3']


class UserPermissionIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    user: Union[bool, 'UserArgsFromStatusHistoryRecursive4']
    permission: Union[bool, 'PermissionArgsFromStatusHistoryRecursive4']


class UserPermissionIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class UserPermissionArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyUserPermissionArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class RolePermissionIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    permission: Union[bool, 'PermissionArgsFromStatusHistoryRecursive1']


class RolePermissionIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    permission: Union[bool, 'PermissionArgsFromStatusHistoryRecursive2']


class RolePermissionIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    permission: Union[bool, 'PermissionArgsFromStatusHistoryRecursive3']


class RolePermissionIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    permission: Union[bool, 'PermissionArgsFromStatusHistoryRecursive4']


class RolePermissionIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class RolePermissionArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class RolePermissionArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class RolePermissionArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class RolePermissionArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class RolePermissionArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyRolePermissionArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive1'


class FindManyRolePermissionArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive2'


class FindManyRolePermissionArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive3'


class FindManyRolePermissionArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    include: 'RolePermissionIncludeFromRolePermissionRecursive4'


class FindManyRolePermissionArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['RolePermissionOrderByInput', List['RolePermissionOrderByInput']]
    where: 'RolePermissionWhereInput'
    cursor: 'RolePermissionWhereUniqueInput'
    distinct: List['RolePermissionScalarFieldKeys']
    
    

class OrganizationIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromStatusHistoryRecursive1']
    drivers: Union[bool, 'FindManyDriverArgsFromStatusHistoryRecursive1']
    vehicles: Union[bool, 'FindManyVehicleArgsFromStatusHistoryRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromStatusHistoryRecursive1']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromStatusHistoryRecursive1']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromStatusHistoryRecursive1']


class OrganizationIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromStatusHistoryRecursive2']
    drivers: Union[bool, 'FindManyDriverArgsFromStatusHistoryRecursive2']
    vehicles: Union[bool, 'FindManyVehicleArgsFromStatusHistoryRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromStatusHistoryRecursive2']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromStatusHistoryRecursive2']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromStatusHistoryRecursive2']


class OrganizationIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromStatusHistoryRecursive3']
    drivers: Union[bool, 'FindManyDriverArgsFromStatusHistoryRecursive3']
    vehicles: Union[bool, 'FindManyVehicleArgsFromStatusHistoryRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromStatusHistoryRecursive3']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromStatusHistoryRecursive3']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromStatusHistoryRecursive3']


class OrganizationIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    members: Union[bool, 'FindManyOrganizationMemberArgsFromStatusHistoryRecursive4']
    drivers: Union[bool, 'FindManyDriverArgsFromStatusHistoryRecursive4']
    vehicles: Union[bool, 'FindManyVehicleArgsFromStatusHistoryRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromStatusHistoryRecursive4']
    erpSyncConfigs: Union[bool, 'FindManyERPSyncConfigArgsFromStatusHistoryRecursive4']
    erpSyncLogs: Union[bool, 'FindManyERPSyncLogArgsFromStatusHistoryRecursive4']


class OrganizationIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class OrganizationArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class OrganizationArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class OrganizationArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class OrganizationArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class OrganizationArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyOrganizationArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive1'


class FindManyOrganizationArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive2'


class FindManyOrganizationArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive3'


class FindManyOrganizationArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    include: 'OrganizationIncludeFromOrganizationRecursive4'


class FindManyOrganizationArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['OrganizationOrderByInput', List['OrganizationOrderByInput']]
    where: 'OrganizationWhereInput'
    cursor: 'OrganizationWhereUniqueInput'
    distinct: List['OrganizationScalarFieldKeys']
    
    

class OrganizationMemberIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    user: Union[bool, 'UserArgsFromStatusHistoryRecursive1']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive1']


class OrganizationMemberIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    user: Union[bool, 'UserArgsFromStatusHistoryRecursive2']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive2']


class OrganizationMemberIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    user: Union[bool, 'UserArgsFromStatusHistoryRecursive3']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive3']


class OrganizationMemberIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    user: Union[bool, 'UserArgsFromStatusHistoryRecursive4']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive4']


class OrganizationMemberIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class OrganizationMemberArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class OrganizationMemberArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class OrganizationMemberArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class OrganizationMemberArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class OrganizationMemberArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyOrganizationMemberArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive1'


class FindManyOrganizationMemberArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive2'


class FindManyOrganizationMemberArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive3'


class FindManyOrganizationMemberArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    include: 'OrganizationMemberIncludeFromOrganizationMemberRecursive4'


class FindManyOrganizationMemberArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['OrganizationMemberOrderByInput', List['OrganizationMemberOrderByInput']]
    where: 'OrganizationMemberWhereInput'
    cursor: 'OrganizationMemberWhereUniqueInput'
    distinct: List['OrganizationMemberScalarFieldKeys']
    
    

class DriverIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive1']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromStatusHistoryRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromStatusHistoryRecursive1']


class DriverIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive2']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromStatusHistoryRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromStatusHistoryRecursive2']


class DriverIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive3']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromStatusHistoryRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromStatusHistoryRecursive3']


class DriverIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive4']
    performanceData: Union[bool, 'FindManyDriverPerformanceArgsFromStatusHistoryRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromStatusHistoryRecursive4']


class DriverIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class DriverArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DriverIncludeFromDriverRecursive1'


class DriverArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DriverIncludeFromDriverRecursive2'


class DriverArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DriverIncludeFromDriverRecursive3'


class DriverArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DriverIncludeFromDriverRecursive4'


class DriverArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyDriverArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive1'


class FindManyDriverArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive2'


class FindManyDriverArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive3'


class FindManyDriverArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    include: 'DriverIncludeFromDriverRecursive4'


class FindManyDriverArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DriverOrderByInput', List['DriverOrderByInput']]
    where: 'DriverWhereInput'
    cursor: 'DriverWhereUniqueInput'
    distinct: List['DriverScalarFieldKeys']
    
    

class VehicleIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive1']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromStatusHistoryRecursive1']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromStatusHistoryRecursive1']


class VehicleIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive2']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromStatusHistoryRecursive2']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromStatusHistoryRecursive2']


class VehicleIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive3']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromStatusHistoryRecursive3']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromStatusHistoryRecursive3']


class VehicleIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive4']
    maintenances: Union[bool, 'FindManyMaintenanceArgsFromStatusHistoryRecursive4']
    drivingRecords: Union[bool, 'FindManyDrivingRecordArgsFromStatusHistoryRecursive4']


class VehicleIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class VehicleArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'VehicleIncludeFromVehicleRecursive1'


class VehicleArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'VehicleIncludeFromVehicleRecursive2'


class VehicleArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'VehicleIncludeFromVehicleRecursive3'


class VehicleArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'VehicleIncludeFromVehicleRecursive4'


class VehicleArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyVehicleArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive1'


class FindManyVehicleArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive2'


class FindManyVehicleArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive3'


class FindManyVehicleArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    include: 'VehicleIncludeFromVehicleRecursive4'


class FindManyVehicleArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['VehicleOrderByInput', List['VehicleOrderByInput']]
    where: 'VehicleWhereInput'
    cursor: 'VehicleWhereUniqueInput'
    distinct: List['VehicleScalarFieldKeys']
    
    

class MaintenanceIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    vehicle: Union[bool, 'VehicleArgsFromStatusHistoryRecursive1']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive1']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromStatusHistoryRecursive1']


class MaintenanceIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    vehicle: Union[bool, 'VehicleArgsFromStatusHistoryRecursive2']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive2']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromStatusHistoryRecursive2']


class MaintenanceIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    vehicle: Union[bool, 'VehicleArgsFromStatusHistoryRecursive3']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive3']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromStatusHistoryRecursive3']


class MaintenanceIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    vehicle: Union[bool, 'VehicleArgsFromStatusHistoryRecursive4']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive4']
    parts: Union[bool, 'FindManyMaintenancePartArgsFromStatusHistoryRecursive4']


class MaintenanceIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class MaintenanceArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class MaintenanceArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class MaintenanceArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class MaintenanceArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class MaintenanceArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyMaintenanceArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive1'


class FindManyMaintenanceArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive2'


class FindManyMaintenanceArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive3'


class FindManyMaintenanceArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    include: 'MaintenanceIncludeFromMaintenanceRecursive4'


class FindManyMaintenanceArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['MaintenanceOrderByInput', List['MaintenanceOrderByInput']]
    where: 'MaintenanceWhereInput'
    cursor: 'MaintenanceWhereUniqueInput'
    distinct: List['MaintenanceScalarFieldKeys']
    
    

class MaintenancePartIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    maintenance: Union[bool, 'MaintenanceArgsFromStatusHistoryRecursive1']


class MaintenancePartIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    maintenance: Union[bool, 'MaintenanceArgsFromStatusHistoryRecursive2']


class MaintenancePartIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    maintenance: Union[bool, 'MaintenanceArgsFromStatusHistoryRecursive3']


class MaintenancePartIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    maintenance: Union[bool, 'MaintenanceArgsFromStatusHistoryRecursive4']


class MaintenancePartIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class MaintenancePartArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class MaintenancePartArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class MaintenancePartArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class MaintenancePartArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class MaintenancePartArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyMaintenancePartArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive1'


class FindManyMaintenancePartArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive2'


class FindManyMaintenancePartArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive3'


class FindManyMaintenancePartArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    include: 'MaintenancePartIncludeFromMaintenancePartRecursive4'


class FindManyMaintenancePartArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['MaintenancePartOrderByInput', List['MaintenancePartOrderByInput']]
    where: 'MaintenancePartWhereInput'
    cursor: 'MaintenancePartWhereUniqueInput'
    distinct: List['MaintenancePartScalarFieldKeys']
    
    

class DriverPerformanceIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    driver: Union[bool, 'DriverArgsFromStatusHistoryRecursive1']


class DriverPerformanceIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    driver: Union[bool, 'DriverArgsFromStatusHistoryRecursive2']


class DriverPerformanceIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    driver: Union[bool, 'DriverArgsFromStatusHistoryRecursive3']


class DriverPerformanceIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    driver: Union[bool, 'DriverArgsFromStatusHistoryRecursive4']


class DriverPerformanceIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class DriverPerformanceArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class DriverPerformanceArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class DriverPerformanceArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class DriverPerformanceArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class DriverPerformanceArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyDriverPerformanceArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive1'


class FindManyDriverPerformanceArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive2'


class FindManyDriverPerformanceArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive3'


class FindManyDriverPerformanceArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    include: 'DriverPerformanceIncludeFromDriverPerformanceRecursive4'


class FindManyDriverPerformanceArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DriverPerformanceOrderByInput', List['DriverPerformanceOrderByInput']]
    where: 'DriverPerformanceWhereInput'
    cursor: 'DriverPerformanceWhereUniqueInput'
    distinct: List['DriverPerformanceScalarFieldKeys']
    
    

class DrivingRecordIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    driver: Union[bool, 'DriverArgsFromStatusHistoryRecursive1']
    vehicle: Union[bool, 'VehicleArgsFromStatusHistoryRecursive1']


class DrivingRecordIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    driver: Union[bool, 'DriverArgsFromStatusHistoryRecursive2']
    vehicle: Union[bool, 'VehicleArgsFromStatusHistoryRecursive2']


class DrivingRecordIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    driver: Union[bool, 'DriverArgsFromStatusHistoryRecursive3']
    vehicle: Union[bool, 'VehicleArgsFromStatusHistoryRecursive3']


class DrivingRecordIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    driver: Union[bool, 'DriverArgsFromStatusHistoryRecursive4']
    vehicle: Union[bool, 'VehicleArgsFromStatusHistoryRecursive4']


class DrivingRecordIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class DrivingRecordArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class DrivingRecordArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class DrivingRecordArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class DrivingRecordArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class DrivingRecordArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyDrivingRecordArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive1'


class FindManyDrivingRecordArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive2'


class FindManyDrivingRecordArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive3'


class FindManyDrivingRecordArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    include: 'DrivingRecordIncludeFromDrivingRecordRecursive4'


class FindManyDrivingRecordArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['DrivingRecordOrderByInput', List['DrivingRecordOrderByInput']]
    where: 'DrivingRecordWhereInput'
    cursor: 'DrivingRecordWhereUniqueInput'
    distinct: List['DrivingRecordScalarFieldKeys']
    
    

class ERPSyncConfigIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive1']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromStatusHistoryRecursive1']


class ERPSyncConfigIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive2']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromStatusHistoryRecursive2']


class ERPSyncConfigIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive3']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromStatusHistoryRecursive3']


class ERPSyncConfigIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive4']
    syncLogs: Union[bool, 'FindManyERPSyncLogArgsFromStatusHistoryRecursive4']


class ERPSyncConfigIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class ERPSyncConfigArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class ERPSyncConfigArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class ERPSyncConfigArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class ERPSyncConfigArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class ERPSyncConfigArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyERPSyncConfigArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive1'


class FindManyERPSyncConfigArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive2'


class FindManyERPSyncConfigArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive3'


class FindManyERPSyncConfigArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    include: 'ERPSyncConfigIncludeFromERPSyncConfigRecursive4'


class FindManyERPSyncConfigArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['ERPSyncConfigOrderByInput', List['ERPSyncConfigOrderByInput']]
    where: 'ERPSyncConfigWhereInput'
    cursor: 'ERPSyncConfigWhereUniqueInput'
    distinct: List['ERPSyncConfigScalarFieldKeys']
    
    

class ERPSyncLogIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    config: Union[bool, 'ERPSyncConfigArgsFromStatusHistoryRecursive1']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive1']


class ERPSyncLogIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    config: Union[bool, 'ERPSyncConfigArgsFromStatusHistoryRecursive2']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive2']


class ERPSyncLogIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    config: Union[bool, 'ERPSyncConfigArgsFromStatusHistoryRecursive3']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive3']


class ERPSyncLogIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    config: Union[bool, 'ERPSyncConfigArgsFromStatusHistoryRecursive4']
    organization: Union[bool, 'OrganizationArgsFromStatusHistoryRecursive4']


class ERPSyncLogIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class ERPSyncLogArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class ERPSyncLogArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class ERPSyncLogArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class ERPSyncLogArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class ERPSyncLogArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyERPSyncLogArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive1'


class FindManyERPSyncLogArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive2'


class FindManyERPSyncLogArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive3'


class FindManyERPSyncLogArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    include: 'ERPSyncLogIncludeFromERPSyncLogRecursive4'


class FindManyERPSyncLogArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['ERPSyncLogOrderByInput', List['ERPSyncLogOrderByInput']]
    where: 'ERPSyncLogWhereInput'
    cursor: 'ERPSyncLogWhereUniqueInput'
    distinct: List['ERPSyncLogScalarFieldKeys']
    
    

class RepairIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    technician: Union[bool, 'UserArgsFromStatusHistoryRecursive1']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromStatusHistoryRecursive1']


class RepairIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    technician: Union[bool, 'UserArgsFromStatusHistoryRecursive2']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromStatusHistoryRecursive2']


class RepairIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    technician: Union[bool, 'UserArgsFromStatusHistoryRecursive3']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromStatusHistoryRecursive3']


class RepairIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    technician: Union[bool, 'UserArgsFromStatusHistoryRecursive4']
    statusHistories: Union[bool, 'FindManyStatusHistoryArgsFromStatusHistoryRecursive4']


class RepairIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class RepairArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'RepairIncludeFromRepairRecursive1'


class RepairArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'RepairIncludeFromRepairRecursive2'


class RepairArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'RepairIncludeFromRepairRecursive3'


class RepairArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'RepairIncludeFromRepairRecursive4'


class RepairArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyRepairArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive1'


class FindManyRepairArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive2'


class FindManyRepairArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive3'


class FindManyRepairArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    include: 'RepairIncludeFromRepairRecursive4'


class FindManyRepairArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['RepairOrderByInput', List['RepairOrderByInput']]
    where: 'RepairWhereInput'
    cursor: 'RepairWhereUniqueInput'
    distinct: List['RepairScalarFieldKeys']
    
    

class StatusHistoryIncludeFromStatusHistory(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    repair: Union[bool, 'RepairArgsFromStatusHistoryRecursive1']
    technician: Union[bool, 'UserArgsFromStatusHistoryRecursive1']


class StatusHistoryIncludeFromStatusHistoryRecursive1(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    repair: Union[bool, 'RepairArgsFromStatusHistoryRecursive2']
    technician: Union[bool, 'UserArgsFromStatusHistoryRecursive2']


class StatusHistoryIncludeFromStatusHistoryRecursive2(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    repair: Union[bool, 'RepairArgsFromStatusHistoryRecursive3']
    technician: Union[bool, 'UserArgsFromStatusHistoryRecursive3']


class StatusHistoryIncludeFromStatusHistoryRecursive3(TypedDict, total=False):
    """Relational arguments for StatusHistory"""
    repair: Union[bool, 'RepairArgsFromStatusHistoryRecursive4']
    technician: Union[bool, 'UserArgsFromStatusHistoryRecursive4']


class StatusHistoryIncludeFromStatusHistoryRecursive4(TypedDict, total=False):
    """Relational arguments for StatusHistory"""

    

class StatusHistoryArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class StatusHistoryArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class StatusHistoryArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class StatusHistoryArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class StatusHistoryArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    
    

class FindManyStatusHistoryArgsFromStatusHistory(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive1'


class FindManyStatusHistoryArgsFromStatusHistoryRecursive1(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive2'


class FindManyStatusHistoryArgsFromStatusHistoryRecursive2(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive3'


class FindManyStatusHistoryArgsFromStatusHistoryRecursive3(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    include: 'StatusHistoryIncludeFromStatusHistoryRecursive4'


class FindManyStatusHistoryArgsFromStatusHistoryRecursive4(TypedDict, total=False):
    """Arguments for StatusHistory"""
    take: int
    skip: int
    order_by: Union['StatusHistoryOrderByInput', List['StatusHistoryOrderByInput']]
    where: 'StatusHistoryWhereInput'
    cursor: 'StatusHistoryWhereUniqueInput'
    distinct: List['StatusHistoryScalarFieldKeys']
    


FindManyStatusHistoryArgs = FindManyStatusHistoryArgsFromStatusHistory
FindFirstStatusHistoryArgs = FindManyStatusHistoryArgsFromStatusHistory


    

class StatusHistoryWhereInput(TypedDict, total=False):
    """StatusHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    repair_id: Union[_str, 'types.StringFilter']
    repair: 'RepairRelationFilter'
    status: 'enums.RepairStatus'
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    note: Union[None, _str, 'types.StringFilter']
    technician_id: Union[None, _str, 'types.StringFilter']
    technician: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['StatusHistoryWhereInputRecursive1', List['StatusHistoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['StatusHistoryWhereInputRecursive1']
    OR: List['StatusHistoryWhereInputRecursive1']
    NOT: List['StatusHistoryWhereInputRecursive1']


class StatusHistoryWhereInputRecursive1(TypedDict, total=False):
    """StatusHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    repair_id: Union[_str, 'types.StringFilter']
    repair: 'RepairRelationFilter'
    status: 'enums.RepairStatus'
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    note: Union[None, _str, 'types.StringFilter']
    technician_id: Union[None, _str, 'types.StringFilter']
    technician: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['StatusHistoryWhereInputRecursive2', List['StatusHistoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['StatusHistoryWhereInputRecursive2']
    OR: List['StatusHistoryWhereInputRecursive2']
    NOT: List['StatusHistoryWhereInputRecursive2']


class StatusHistoryWhereInputRecursive2(TypedDict, total=False):
    """StatusHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    repair_id: Union[_str, 'types.StringFilter']
    repair: 'RepairRelationFilter'
    status: 'enums.RepairStatus'
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    note: Union[None, _str, 'types.StringFilter']
    technician_id: Union[None, _str, 'types.StringFilter']
    technician: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['StatusHistoryWhereInputRecursive3', List['StatusHistoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['StatusHistoryWhereInputRecursive3']
    OR: List['StatusHistoryWhereInputRecursive3']
    NOT: List['StatusHistoryWhereInputRecursive3']


class StatusHistoryWhereInputRecursive3(TypedDict, total=False):
    """StatusHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    repair_id: Union[_str, 'types.StringFilter']
    repair: 'RepairRelationFilter'
    status: 'enums.RepairStatus'
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    note: Union[None, _str, 'types.StringFilter']
    technician_id: Union[None, _str, 'types.StringFilter']
    technician: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['StatusHistoryWhereInputRecursive4', List['StatusHistoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['StatusHistoryWhereInputRecursive4']
    OR: List['StatusHistoryWhereInputRecursive4']
    NOT: List['StatusHistoryWhereInputRecursive4']


class StatusHistoryWhereInputRecursive4(TypedDict, total=False):
    """StatusHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    repair_id: Union[_str, 'types.StringFilter']
    repair: 'RepairRelationFilter'
    status: 'enums.RepairStatus'
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']
    note: Union[None, _str, 'types.StringFilter']
    technician_id: Union[None, _str, 'types.StringFilter']
    technician: 'UserRelationFilter'



# aggregate StatusHistory types


    

class StatusHistoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """StatusHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    repair_id: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.RepairStatus'
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    note: Union[_str, 'types.StringWithAggregatesFilter']
    technician_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['StatusHistoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['StatusHistoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['StatusHistoryScalarWhereWithAggregatesInputRecursive1']


class StatusHistoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """StatusHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    repair_id: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.RepairStatus'
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    note: Union[_str, 'types.StringWithAggregatesFilter']
    technician_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['StatusHistoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['StatusHistoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['StatusHistoryScalarWhereWithAggregatesInputRecursive2']


class StatusHistoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """StatusHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    repair_id: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.RepairStatus'
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    note: Union[_str, 'types.StringWithAggregatesFilter']
    technician_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['StatusHistoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['StatusHistoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['StatusHistoryScalarWhereWithAggregatesInputRecursive3']


class StatusHistoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """StatusHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    repair_id: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.RepairStatus'
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    note: Union[_str, 'types.StringWithAggregatesFilter']
    technician_id: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['StatusHistoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['StatusHistoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['StatusHistoryScalarWhereWithAggregatesInputRecursive4']


class StatusHistoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """StatusHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    repair_id: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.RepairStatus'
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    note: Union[_str, 'types.StringWithAggregatesFilter']
    technician_id: Union[_str, 'types.StringWithAggregatesFilter']



class StatusHistoryGroupByOutput(TypedDict, total=False):
    id: _str
    repair_id: _str
    status: 'enums.RepairStatus'
    timestamp: datetime.datetime
    note: _str
    technician_id: _str
    _sum: 'StatusHistorySumAggregateOutput'
    _avg: 'StatusHistoryAvgAggregateOutput'
    _min: 'StatusHistoryMinAggregateOutput'
    _max: 'StatusHistoryMaxAggregateOutput'
    _count: 'StatusHistoryCountAggregateOutput'


class StatusHistoryAvgAggregateOutput(TypedDict, total=False):
    """StatusHistory output for aggregating averages"""


class StatusHistorySumAggregateOutput(TypedDict, total=False):
    """StatusHistory output for aggregating sums"""


class StatusHistoryScalarAggregateOutput(TypedDict, total=False):
    """StatusHistory output including scalar fields"""
    id: _str
    repair_id: _str
    status: 'enums.RepairStatus'
    timestamp: datetime.datetime
    note: _str
    technician_id: _str


StatusHistoryMinAggregateOutput = StatusHistoryScalarAggregateOutput
StatusHistoryMaxAggregateOutput = StatusHistoryScalarAggregateOutput


class StatusHistoryMaxAggregateInput(TypedDict, total=False):
    """StatusHistory input for aggregating by max"""
    id: bool
    repair_id: bool
    status: bool
    timestamp: bool
    note: bool
    technician_id: bool


class StatusHistoryMinAggregateInput(TypedDict, total=False):
    """StatusHistory input for aggregating by min"""
    id: bool
    repair_id: bool
    status: bool
    timestamp: bool
    note: bool
    technician_id: bool


class StatusHistoryNumberAggregateInput(TypedDict, total=False):
    """StatusHistory input for aggregating numbers"""


StatusHistoryAvgAggregateInput = StatusHistoryNumberAggregateInput
StatusHistorySumAggregateInput = StatusHistoryNumberAggregateInput


StatusHistoryCountAggregateInput = TypedDict(
    'StatusHistoryCountAggregateInput',
    {
        'id': bool,
        'repair_id': bool,
        'status': bool,
        'timestamp': bool,
        'note': bool,
        'technician_id': bool,
        '_all': bool,
    },
    total=False,
)

StatusHistoryCountAggregateOutput = TypedDict(
    'StatusHistoryCountAggregateOutput',
    {
        'id': int,
        'repair_id': int,
        'status': int,
        'timestamp': int,
        'note': int,
        'technician_id': int,
        '_all': int,
    },
    total=False,
)


StatusHistoryKeys = Literal[
    'id',
    'repair_id',
    'repair',
    'status',
    'timestamp',
    'note',
    'technician_id',
    'technician',
]
StatusHistoryScalarFieldKeys = Literal[
    'id',
    'repair_id',
    'status',
    'timestamp',
    'note',
    'technician_id',
]
StatusHistoryScalarFieldKeysT = TypeVar('StatusHistoryScalarFieldKeysT', bound=StatusHistoryScalarFieldKeys)

StatusHistoryRelationalFieldKeys = Literal[
        'repair',
        'technician',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields