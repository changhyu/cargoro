# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['User']] = 'User'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserActions[_PrismaModelT](client or get_client(), cls)


class BasePermission(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Permission']] = 'Permission'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PermissionActions[_PrismaModelT]':
        from .client import get_client

        return actions.PermissionActions[_PrismaModelT](client or get_client(), cls)


class BaseUserPermission(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserPermission']] = 'UserPermission'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserPermissionActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserPermissionActions[_PrismaModelT](client or get_client(), cls)


class BaseRolePermission(_PrismaModel):
    __prisma_model__: ClassVar[Literal['RolePermission']] = 'RolePermission'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.RolePermissionActions[_PrismaModelT]':
        from .client import get_client

        return actions.RolePermissionActions[_PrismaModelT](client or get_client(), cls)


class BaseOrganization(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Organization']] = 'Organization'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.OrganizationActions[_PrismaModelT]':
        from .client import get_client

        return actions.OrganizationActions[_PrismaModelT](client or get_client(), cls)


class BaseOrganizationMember(_PrismaModel):
    __prisma_model__: ClassVar[Literal['OrganizationMember']] = 'OrganizationMember'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.OrganizationMemberActions[_PrismaModelT]':
        from .client import get_client

        return actions.OrganizationMemberActions[_PrismaModelT](client or get_client(), cls)


class BaseDriver(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Driver']] = 'Driver'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.DriverActions[_PrismaModelT]':
        from .client import get_client

        return actions.DriverActions[_PrismaModelT](client or get_client(), cls)


class BaseVehicle(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Vehicle']] = 'Vehicle'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.VehicleActions[_PrismaModelT]':
        from .client import get_client

        return actions.VehicleActions[_PrismaModelT](client or get_client(), cls)


class BaseMaintenance(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Maintenance']] = 'Maintenance'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MaintenanceActions[_PrismaModelT]':
        from .client import get_client

        return actions.MaintenanceActions[_PrismaModelT](client or get_client(), cls)


class BaseMaintenancePart(_PrismaModel):
    __prisma_model__: ClassVar[Literal['MaintenancePart']] = 'MaintenancePart'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.MaintenancePartActions[_PrismaModelT]':
        from .client import get_client

        return actions.MaintenancePartActions[_PrismaModelT](client or get_client(), cls)


class BaseDriverPerformance(_PrismaModel):
    __prisma_model__: ClassVar[Literal['DriverPerformance']] = 'DriverPerformance'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.DriverPerformanceActions[_PrismaModelT]':
        from .client import get_client

        return actions.DriverPerformanceActions[_PrismaModelT](client or get_client(), cls)


class BaseDrivingRecord(_PrismaModel):
    __prisma_model__: ClassVar[Literal['DrivingRecord']] = 'DrivingRecord'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.DrivingRecordActions[_PrismaModelT]':
        from .client import get_client

        return actions.DrivingRecordActions[_PrismaModelT](client or get_client(), cls)


class BaseERPSyncConfig(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ERPSyncConfig']] = 'ERPSyncConfig'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ERPSyncConfigActions[_PrismaModelT]':
        from .client import get_client

        return actions.ERPSyncConfigActions[_PrismaModelT](client or get_client(), cls)


class BaseERPSyncLog(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ERPSyncLog']] = 'ERPSyncLog'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ERPSyncLogActions[_PrismaModelT]':
        from .client import get_client

        return actions.ERPSyncLogActions[_PrismaModelT](client or get_client(), cls)


class BaseRepair(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Repair']] = 'Repair'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.RepairActions[_PrismaModelT]':
        from .client import get_client

        return actions.RepairActions[_PrismaModelT](client or get_client(), cls)


class BaseStatusHistory(_PrismaModel):
    __prisma_model__: ClassVar[Literal['StatusHistory']] = 'StatusHistory'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.StatusHistoryActions[_PrismaModelT]':
        from .client import get_client

        return actions.StatusHistoryActions[_PrismaModelT](client or get_client(), cls)


