version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: cargoro-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: cargoro_rental
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (캐시 및 Rate Limiting)
  redis:
    image: redis:7-alpine
    container_name: cargoro-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 백엔드 API
  backend:
    build:
      context: ./backend/services/rental-api
      dockerfile: Dockerfile
    container_name: cargoro-backend
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/cargoro_rental
      REDIS_URL: redis://redis:6379
      SECRET_KEY: your-secret-key-change-in-production
      ENVIRONMENT: development
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/services/rental-api:/app
      - backend_logs:/app/logs
    command: python main.py

  # 프론트엔드
  frontend:
    build:
      context: ./apps/fleet-manager-web
      dockerfile: Dockerfile
    container_name: cargoro-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8004
    ports:
      - "3006:3000"
    depends_on:
      - backend
    volumes:
      - ./apps/fleet-manager-web:/app
      - /app/node_modules
      - /app/.next

volumes:
  postgres_data:
  redis_data:
  backend_logs:
